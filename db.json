{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/HTML_code_实现特殊符号.md","hash":"59184c2ea8ee57d88db5ab5897be523f776df16a","modified":1657761805010},{"_id":"source/_posts/Differences_Display_vs_Visibility_vs_Opacity.md","hash":"b7bd428fe38902894b12d5d13aed5bad3a37d3a1","modified":1657761805009},{"_id":"source/_posts/JavaScript_context.md","hash":"11f44afdbe49842b34bfdebdeacacc79aa9effe4","modified":1657761805010},{"_id":"source/_posts/JS_double_markable_sign.md","hash":"3bc26c8b418469f73d8446d1e9719af0d039fae1","modified":1657761805010},{"_id":"source/_posts/Starting-RTC-Eclipse-client-results-in-java.lang.IllegalStateException-error.md","hash":"e66fa8885bc208a7df65330c31f4d3b65c0a5a0c","modified":1657761805011},{"_id":"source/_posts/SyntheticEvent.md","hash":"c96cd8bee67ee8d6e533143b8b2e87aa9f26f1c9","modified":1657761805011},{"_id":"source/_posts/contenteditable_element.md","hash":"04b5171b7ac61fe1ad1f3c746ee7fa535c477582","modified":1657761805011},{"_id":"source/_posts/SyntheticEvent.mdown","hash":"c96cd8bee67ee8d6e533143b8b2e87aa9f26f1c9","modified":1657761805011},{"_id":"source/_posts/git_clone_multiple_repos.md","hash":"5f19e1eb8b0c984886627fe86cbaaeec42f212f6","modified":1657761805012},{"_id":"source/_posts/es6_class.md","hash":"302f856e8a67a69b255bb28360f3aff9f6bda0a1","modified":1657761805011},{"_id":"source/_posts/copy_paste_in_Windows_git_bash.md","hash":"95cc4fb17c8b500aa92bd548272ee466723312d7","modified":1657761805011},{"_id":"source/_posts/code_review.md","hash":"c9ba57f8a5b8a15c65b5796f3d78d65a5524ce5a","modified":1657761853236},{"_id":"source/_posts/express.md","hash":"445d431a7ce1f9e5336e19e504f62a1062f214c6","modified":1657761805012},{"_id":"source/_posts/hello.md","hash":"d20f0a3ac04a2dab31c247995f68bf6975b85007","modified":1657761805012},{"_id":"source/_posts/es6_function_extentions.md","hash":"9013d0bb4d3fd23b4e335addd7b20a44fa3b9928","modified":1657761805012},{"_id":"source/_posts/mac_useful_tips.md","hash":"db0a958f5cd243c7d785f5f208cd7ff8a3c0bb39","modified":1657761805012},{"_id":"source/_posts/list_delete_branches.md","hash":"4954bc3f8530b073331dc4df5afde7a2b098f1a2","modified":1657761805012},{"_id":"source/_posts/meta_x-ua-compatible.md","hash":"20409905a275bf45bbdc660fc85432dd05a6d341","modified":1657761805013},{"_id":"source/_posts/how-to-use-hexo.md","hash":"87e03dda73be9823861261e80d643a479439c2b1","modified":1658134653318},{"_id":"source/_posts/working_with_git.md","hash":"657cdfc81dacb4c6c9d40894c789f8720b8b6061","modified":1657761805013},{"_id":"source/about/index.md","hash":"bc2ee19fba8ababe024f7c8cf539c93fb1ec212b","modified":1657761805013},{"_id":"themes/next/_config.yml","hash":"09fc810b5169622fa094e442719cfccad647639b","modified":1657761805055},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"42466c50ffa40a8e2705436adc4155e8575e29a8","modified":1657761805055},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"e63455db72a956b5882c96600744797e12afea38","modified":1657761805055},{"_id":"public/about/index.html","hash":"15d0e0425902f9b359c049363fa7872691964464","modified":1658998851102},{"_id":"public/2022/07/14/how-to-use-hexo/index.html","hash":"146f574f92a71e4cce588df5a590950c0ed4e14d","modified":1657875376058},{"_id":"public/2022/07/14/code_review/index.html","hash":"9006c7447750bfd35104ae4723872024fe9c436b","modified":1658998851102},{"_id":"public/2017/07/05/mac_useful_tips/index.html","hash":"65200cfae7f1a4c4b93bae2197b3f3c56b91e76d","modified":1658998851102},{"_id":"public/2017/05/11/SyntheticEvent/index.html","hash":"fa08ff9c9f74c5e58ba1070a99cecaf7b43fe452","modified":1658998851102},{"_id":"public/2017/05/05/contenteditable_element/index.html","hash":"89198de29ba6a02c39097fd9d77a19ea162a9311","modified":1658998851102},{"_id":"public/2017/04/28/Starting-RTC-Eclipse-client-results-in-java.lang.IllegalStateException-error/index.html","hash":"2effa3afcddeb16771498edbfd1cbe7630f0d246","modified":1658998851102},{"_id":"public/2017/04/25/HTML_code_实现特殊符号/index.html","hash":"d751a838d3d058b16d39d87079a57821e4100e14","modified":1658998851102},{"_id":"public/2017/04/25/Differences_Display_vs_Visibility_vs_Opacity/index.html","hash":"ff88b9ee54209b57203333f67b6e544d044c9400","modified":1658998851102},{"_id":"public/2016/07/29/list_delete_branches/index.html","hash":"9c6318871612deef11700f0f0dd0b20394e911f3","modified":1658998851102},{"_id":"public/2016/07/28/es6_class/index.html","hash":"b3a93a2026d4b1ab9d84eaba84bc6fb805c4d636","modified":1658998851102},{"_id":"public/2016/07/29/express/index.html","hash":"838bd101755d38d0836d18d92a6cfe0962bc4a0d","modified":1658998851102},{"_id":"public/2016/07/27/meta_x-ua-compatible/index.html","hash":"36bd0717c9932dded532a98bf09f7a73b50ef3a4","modified":1658998851102},{"_id":"public/2016/07/27/working_with_git/index.html","hash":"bef21c17688abeb1134d4238a18019778bb68466","modified":1658998851102},{"_id":"public/2016/07/22/git_clone_multiple_repos/index.html","hash":"aff78962bad05076e12ea34e1f81fbd82ebe3107","modified":1658998851102},{"_id":"public/2016/07/22/es6_function_extentions/index.html","hash":"9b6c114033d008d9fa58204f967053f1fef113dd","modified":1658998851102},{"_id":"public/2016/07/22/copy_paste_in_Windows_git_bash/index.html","hash":"95df4c75c1c37ec1581c4210635dfdef85df414f","modified":1658998851102},{"_id":"public/2016/07/22/JS_double_markable_sign/index.html","hash":"9e8eb96691418440be0b86775b8d4d0ec09a6c18","modified":1658998851102},{"_id":"public/2016/07/22/JavaScript_context/index.html","hash":"e1c2b8c1587e87fd4ccfe270b64be533b843ea10","modified":1658998851102},{"_id":"public/2015/01/01/hello/index.html","hash":"7ce11a3b06e1a78fb10ecff0d4c88d79f6d7a62f","modified":1658998851102},{"_id":"public/archives/index.html","hash":"86ed279e85f61f9fd69ea2d82866741ee6fe7258","modified":1658998851102},{"_id":"public/archives/page/2/index.html","hash":"13f425881c2ec6b0662b70a8a16d906eeff6eddd","modified":1658998851102},{"_id":"public/archives/2015/index.html","hash":"e48241fdb7d9301f63dc92a9bde3cbba310e2b86","modified":1658998851102},{"_id":"public/archives/2015/01/index.html","hash":"e58b69d5ecf0c1f341d3d7f32b01cc66610eddd9","modified":1658998851102},{"_id":"public/archives/2016/index.html","hash":"0cb17aef82cfba5294755be3b5a72d5a278c804b","modified":1658998851102},{"_id":"public/archives/2016/07/index.html","hash":"6ba7095314933f27459256b0beed1b130e046232","modified":1658998851102},{"_id":"public/archives/2017/index.html","hash":"a353de3660ad2692fe09b6873f4075a1c397d975","modified":1658998851102},{"_id":"public/archives/2017/04/index.html","hash":"8326f15c0e2f8fac43203d981311d4ba28db1790","modified":1658998851102},{"_id":"public/archives/2017/05/index.html","hash":"0304afb6b5577a332ec33f10438e8158e9fd0bf4","modified":1658998851102},{"_id":"public/archives/2017/07/index.html","hash":"1655308112b973b95770eb8b38f17c6b8f395dc8","modified":1658998851102},{"_id":"public/archives/2022/index.html","hash":"bc0b3fb55f05b7d81e1cee9f3e9156f6e9b9c2e2","modified":1658998851102},{"_id":"public/archives/2022/07/index.html","hash":"25261d7b02dfbe74930f1a5aacd3ea17eeb497b9","modified":1658998851102},{"_id":"public/index.html","hash":"789bcedc4abf1d6acc698f9d1ac96544896799fb","modified":1658998851102},{"_id":"public/page/2/index.html","hash":"2e91e54883443ba7a08a7cfdace927cc461a606c","modified":1658998851102},{"_id":"public/tags/css/index.html","hash":"210235a62d7fc71e1baae3acf07debf3c20dbe98","modified":1658998851102},{"_id":"public/tags/display/index.html","hash":"719cba9a4f75b5e6fb66123f74d2e9b8a452ef4d","modified":1658998851102},{"_id":"public/tags/visibility/index.html","hash":"847608b433f4f3c1c5841d4973cf95615f207039","modified":1658998851102},{"_id":"public/tags/opacity/index.html","hash":"d4e19f05ecb8f2c0cb1870ae67ea5299aa3ab427","modified":1658998851102},{"_id":"public/tags/html/index.html","hash":"abc1e3dc3a75a70716473a4cc3634e6452195f22","modified":1658998851102},{"_id":"public/tags/code/index.html","hash":"18053b0a28972ecc6969bd5b0afda4803ca3fa2b","modified":1658998851102},{"_id":"public/tags/checkmark/index.html","hash":"0bbfe699be552ad0369c470b72fa9ef6d8abf40f","modified":1658998851102},{"_id":"public/tags/symbol/index.html","hash":"bb5641bfa56c97297e5b65342872ce152bef759f","modified":1658998851102},{"_id":"public/tags/JavaScript/index.html","hash":"5d0068aaa14bba05e49ea4b96c99aad9302d05be","modified":1658998851102},{"_id":"public/tags/JS/index.html","hash":"ba2c4b6f26b5db58ac3067e62e51418b7824768f","modified":1658998851102},{"_id":"public/tags/markable/index.html","hash":"1a3d01ea32475d9c90efdc4862918d63341f5cf1","modified":1658998851102},{"_id":"public/tags/double/index.html","hash":"31e0656724cfe966aa96ff08591b3450b52e935d","modified":1658998851102},{"_id":"public/tags/rtc/index.html","hash":"5cec056b64e7e8d45ced35b06b1acbdf5952c980","modified":1658998851102},{"_id":"public/tags/eclipse/index.html","hash":"954c97fd23d9f966ceb8e855ca228ec9ebe4e54e","modified":1658998851102},{"_id":"public/tags/java/index.html","hash":"0812a4f2dfa3b37bc7a68be8276aba9121c6d63d","modified":1658998851102},{"_id":"public/tags/context/index.html","hash":"154d58e0bc6228edec968fd55689422f37e65c6a","modified":1658998851102},{"_id":"public/tags/IllegalStateException/index.html","hash":"00ac64db8c1c9c175d6bcd35144f3b53826b5804","modified":1658998851102},{"_id":"public/tags/react/index.html","hash":"441eb198c91cd04918f6a0cd12a1583d4f63aea7","modified":1658998851102},{"_id":"public/tags/SyntheticEvent/index.html","hash":"cbfbc9b07dde09a1644a0717af87f450a9aa55be","modified":1658998851102},{"_id":"public/tags/javascript/index.html","hash":"7c7b54d237933e0c570985ac04410e7000393463","modified":1658998851102},{"_id":"public/tags/review/index.html","hash":"bb7352985b33d44cf4f1f60decad3bdc4a701198","modified":1658998851102},{"_id":"public/tags/代码审核/index.html","hash":"3993695e395a996dafa20dec5f9330a8fa5e19a8","modified":1658998851102},{"_id":"public/tags/contenteditable/index.html","hash":"312437bfb97ef1f8e3c79756a171dc61397a7ea4","modified":1658998851102},{"_id":"public/tags/div/index.html","hash":"ea1bcff9e687e023f03ff95a0bcf88ad5bbabb49","modified":1658998851102},{"_id":"public/tags/p/index.html","hash":"56e6b09c118a08c5d1f8846c71ba0c7aca25af94","modified":1658998851102},{"_id":"public/tags/git/index.html","hash":"46168dc2c0e35f0a770c13688887dfcd367faf9f","modified":1658998851102},{"_id":"public/tags/bash/index.html","hash":"43b87936bf9a67792040da3f39e032be20f7c955","modified":1658998851102},{"_id":"public/tags/win7/index.html","hash":"41c2ce7e835b6fe299d008ecacc29fa0ec542cdf","modified":1658998851102},{"_id":"public/tags/hello/index.html","hash":"54905d14e63026e39c3a08d34fada8413f15eb83","modified":1658998851102},{"_id":"public/tags/jekyll/index.html","hash":"a955cd8eac16551f34daecf10c44f9ba80b4ef85","modified":1658998851102},{"_id":"public/tags/theme/index.html","hash":"cc9def35bdc5d34aaf37e963d820a92a9cc98032","modified":1658998851102},{"_id":"public/tags/shell/index.html","hash":"1f6a42a1b8ca3f7f4f923793f4df86589e8e3e92","modified":1658998851102},{"_id":"public/tags/github/index.html","hash":"591a679e5528485ddb3cc16bd91dec5f7d390f1b","modified":1658998851102},{"_id":"public/tags/permission/index.html","hash":"fe5ef9a4cec01231f24c79109d265e95018a5123","modified":1658998851102},{"_id":"public/tags/es6/index.html","hash":"ca398b76643fd9f23dcf2c831c796b4212bd2829","modified":1658998851102},{"_id":"public/tags/es2015/index.html","hash":"2857c4a8dfcf39032a9996b5ad30955e967c836e","modified":1658998851102},{"_id":"public/tags/class/index.html","hash":"2c1fdf899f0785cd2701a7c97840f45145e08cac","modified":1658998851102},{"_id":"public/tags/function/index.html","hash":"984660722e175627a877da7b3ea79a4ff78ee844","modified":1658998851102},{"_id":"public/tags/express/index.html","hash":"07c74444b196dd6e81368ab02d2318ff421924b1","modified":1658998851102},{"_id":"public/tags/js/index.html","hash":"7994e1f78ff1639d63d3721496d5ef7f2122b1e2","modified":1658998851102},{"_id":"public/tags/framework/index.html","hash":"2b000e3783e6e44876968bfa5db562f7ce527a95","modified":1658998851102},{"_id":"public/tags/branch/index.html","hash":"f123d9416aaed03b0596b32bd4015270589f67c2","modified":1658998851102},{"_id":"public/tags/list/index.html","hash":"47dbaaa14761bbc96b2bd7648cb0e49d24f3a935","modified":1658998851102},{"_id":"public/tags/delete/index.html","hash":"7d668398f1596a2552941916871e83a1a03f378a","modified":1658998851102},{"_id":"public/tags/mac/index.html","hash":"5033309887ed68ff35f4119e0d77342ffb1c9aab","modified":1658998851102},{"_id":"public/tags/tips/index.html","hash":"e3a4bdae40443e69f71bc637f10a451e01d8bb66","modified":1658998851102},{"_id":"public/tags/meta/index.html","hash":"1b70089b10c9e959b7b6b7bb72f0de67b494acca","modified":1658998851102},{"_id":"public/tags/X-UA-Compatible/index.html","hash":"ef24d60a7ba13f09bd532df511640d78e3f91396","modified":1658998851102},{"_id":"public/tags/http-equiv/index.html","hash":"988bc8bacb7e42390640375aaf44ee7323ee02b4","modified":1658998851102},{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1657761805028},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1657761805028},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1657761805028},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1657761805035},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1657761805029},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1657761805029},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1657761805029},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1657761805030},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1657761805029},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1657761805030},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1657761805030},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1657761805029},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1657761805030},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1657761805034},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1657761805035},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1657761805035},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1657761805035},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1657761805035},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1657761805035},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1657761805035},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1657761805035},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1657761805030},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1657761805031},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1657761805031},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1657761805031},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1657761805031},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1657761805032},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1657761805032},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1657761805032},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1657761805032},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1657761805034},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1657761805034},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1657761805034},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1657761805034},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1657761805034},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1657761805034},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1657761805036},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1657761805038},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1657761805049},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1657761805049},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1657761805049},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1657761805050},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1657761805050},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1657761805050},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1657761805050},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1657761805053},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1657761805053},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1657761805054},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1657761805033},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1657761805033},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1657761805054},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1657761805032},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1657761805033},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1657761805033},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1657761805033},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1657761805036},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1657761805036},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1657761805036},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1657761805036},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1657761805036},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1657761805037},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1657761805037},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1657761805037},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1657761805037},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1657761805037},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1657761805038},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1657761805038},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1657761805040},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1657761805040},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1657761805045},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1657761805051},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1657761805051},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1657761805052},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1657761805052},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1657761805052},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1657761805052},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1657761805045},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1657761805043},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1657761805048},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1657846595706},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1657846595706},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1657846595706},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1657846595706},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1657846595706},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1657846595706},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1657846595706},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1657846595706},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1657846595706},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1657846595706},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1657846595706},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1657846595706},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1657846595706},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1657846595706},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1657846595706},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1657846595706},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1657846595706},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1657846595706},{"_id":"public/css/style.css","hash":"aad5492626f30779dea1f438ed020077c9bf0ec5","modified":1657846595706},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1657846595706},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1657846595706},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1657846595706},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1657846595706},{"_id":"source/_posts/object_equals.md","hash":"173f43e239d23cccf4b9f303721ea8caecb4e6a4","modified":1657874342517},{"_id":"public/2022/07/15/object_equals/index.html","hash":"8f0a255ab20837bc224610983b5068032e147a47","modified":1658998851102},{"_id":"public/tags/object/index.html","hash":"b3d9a62926c676ff78403348a09eb7358e71d7f9","modified":1658998851102},{"_id":"public/tags/equals/index.html","hash":"3694151659f79c9c5f3eb2a72de2996ef82a9c71","modified":1658998851102},{"_id":"source/_posts/css_position.md","hash":"153329b3021ffcf721a9fcbd0fd725031b783d6d","modified":1658138510416},{"_id":"public/page/3/index.html","hash":"393b7374ad33f427792fb529d69231a8596c7175","modified":1658998851102},{"_id":"public/archives/page/3/index.html","hash":"0c4c4c8e4aceccbac9dbd241b3dfbb5e234b05a8","modified":1658998851102},{"_id":"public/tags/position/index.html","hash":"08ae36ba2b0bb28833e043d565c7fd1502806fdb","modified":1658998851102},{"_id":"public/tags/static/index.html","hash":"eb5317f5bc95e76fe8d46d9f85e8901c551f0e33","modified":1658998851102},{"_id":"public/tags/relative/index.html","hash":"11059dd7af75cd1d0f9bd65a1b2536b859fc0c38","modified":1658998851102},{"_id":"public/tags/absolute/index.html","hash":"57dac28a8ce000f0c99f30a4a9b458da23181241","modified":1658998851102},{"_id":"public/tags/fixed/index.html","hash":"cabfe26fc8448eb9279698def424384f24103ac0","modified":1658998851102},{"_id":"public/tags/sticky/index.html","hash":"4adc596d40b6d32a77fae8d303d4c732c83d6494","modified":1658998851102},{"_id":"public/2022/07/18/css_position/index.html","hash":"0241ac928a494e87a75c6e2f34d68e812b46cb69","modified":1658998851102},{"_id":"public/2015/01/01/how-to-use-hexo/index.html","hash":"080286ce7b953114e4fd7e610e4c354c359c7fa2","modified":1658998851102},{"_id":"source/_posts/working_with_git_v2.md","hash":"d13c966f07f15f1d1863218b28c4ecd7d05589d7","modified":1658450431969},{"_id":"public/2022/07/21/working_with_git_v2/index.html","hash":"dd0f451f92d85261225ffb39bc7d9589e5f5d8c8","modified":1658998851102},{"_id":"source/_posts/wx_app_tab_loading.md","hash":"79cef330889cbedf0449d18c36f85cb2ecee985f","modified":1658910086414},{"_id":"public/tags/wx/index.html","hash":"30e526434fe292a037e51b8c279d5e2876897f6a","modified":1658998851102},{"_id":"public/tags/app/index.html","hash":"1a3f6e47ee9bbe803440c6114ada4e4550def094","modified":1658998851102},{"_id":"public/tags/onreachbottom/index.html","hash":"c074f8b849d85d8b01323b63711514df38b8e7f3","modified":1658998851102},{"_id":"public/tags/tab/index.html","hash":"000ef3a0bc6428e1a5d606bdc0179db75d91a3f4","modified":1658998851102},{"_id":"public/tags/loading/index.html","hash":"f18b73c12d9b5f0f993747c2a1f0a02861b064ed","modified":1658998851102},{"_id":"public/2022/07/27/wx_app_tab_loading/index.html","hash":"d0da1fe7c41aa382a84a0f3f8f8dd851d007ad99","modified":1658998851102},{"_id":"source/_posts/wx_app_template.md","hash":"a6449463e6665a28ec315f919ae33a5d8ba77fbb","modified":1658998844200},{"_id":"public/2022/07/28/wx_app_template/index.html","hash":"797619153c5ab61753fd73581d7088a4af65478d","modified":1658998851102}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2017-04-18T14:23:00.000Z","_content":"\n# About me\n\n* Amy\n* Female\n* Married\n* Front-End Developer\n* 1 year\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-04-18 22:23:00\n---\n\n# About me\n\n* Amy\n* Female\n* Married\n* Front-End Developer\n* 1 year\n","updated":"2022-07-14T01:23:25.013Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl5lql4cv00008ds64x26129k","content":"<h1 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h1><ul>\n<li>Amy</li>\n<li>Female</li>\n<li>Married</li>\n<li>Front-End Developer</li>\n<li>1 year</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h1><ul>\n<li>Amy</li>\n<li>Female</li>\n<li>Married</li>\n<li>Front-End Developer</li>\n<li>1 year</li>\n</ul>\n"}],"Post":[{"layout":"post","title":"Display vs Visibility vs Opacity 三者之间的区别","date":"2017-04-25T07:44:00.000Z","_content":"\n> 本文介绍隐藏HTML元素的三种方式之间的区别\n\n<!--more-->\n\n## 需要隐藏元素时，可以采用3种方式：display: none; visibility: hidden; opacity: 0;。\n\n### 三者之间的区别可以用下表说明：\n\n|            | Display: none | Visibility: hidden; | Opacity: 0; |\n| ---------- | :------------:  | :-------------------: | :-----------: |\n| Collapses  |  &#10003; |  X  |  X  |\n| Events     |   X  |  X  |  &#10003;  |\n| Taborder   |   X  |  X  |  &#10003;  |\n| Animatable |   X  |  X  |  &#10003;  |\n\n上表详细说明了这三种样式下，元素对应不同操作的反应：\n\n* Collapses - 表示元素是否占用文档空间，即是否存在于文档流中。\n* Events - 元素对事件的反应，如click事件。\n* Taborder - 元素是否包含在taborder中，即tab可否获取焦点。\n* Animatable - 是否可以在可见与不可见元素之间过渡动画。\n\n> 由此可知，如果想让一个元素彻底消失，不占用任何空间，使用display: none;。   \n如果想让元素在可见的时候具有动画效果，使用opacity: 0;   \n而visibility: hidden;的元素仍然占用文档空间。\n","source":"_posts/Differences_Display_vs_Visibility_vs_Opacity.md","raw":"---\nlayout: post\ntitle: Display vs Visibility vs Opacity 三者之间的区别\ntags: [css,display,visibility,opacity]\ndate: 2017-04-25 15:44:00\n---\n\n> 本文介绍隐藏HTML元素的三种方式之间的区别\n\n<!--more-->\n\n## 需要隐藏元素时，可以采用3种方式：display: none; visibility: hidden; opacity: 0;。\n\n### 三者之间的区别可以用下表说明：\n\n|            | Display: none | Visibility: hidden; | Opacity: 0; |\n| ---------- | :------------:  | :-------------------: | :-----------: |\n| Collapses  |  &#10003; |  X  |  X  |\n| Events     |   X  |  X  |  &#10003;  |\n| Taborder   |   X  |  X  |  &#10003;  |\n| Animatable |   X  |  X  |  &#10003;  |\n\n上表详细说明了这三种样式下，元素对应不同操作的反应：\n\n* Collapses - 表示元素是否占用文档空间，即是否存在于文档流中。\n* Events - 元素对事件的反应，如click事件。\n* Taborder - 元素是否包含在taborder中，即tab可否获取焦点。\n* Animatable - 是否可以在可见与不可见元素之间过渡动画。\n\n> 由此可知，如果想让一个元素彻底消失，不占用任何空间，使用display: none;。   \n如果想让元素在可见的时候具有动画效果，使用opacity: 0;   \n而visibility: hidden;的元素仍然占用文档空间。\n","slug":"Differences_Display_vs_Visibility_vs_Opacity","published":1,"updated":"2022-07-14T01:23:25.009Z","comments":1,"photos":[],"link":"","_id":"cl5lql4cy00018ds66ycvhhte","content":"<blockquote>\n<p>本文介绍隐藏HTML元素的三种方式之间的区别</p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"需要隐藏元素时，可以采用3种方式：display-none-visibility-hidden-opacity-0-。\"><a href=\"#需要隐藏元素时，可以采用3种方式：display-none-visibility-hidden-opacity-0-。\" class=\"headerlink\" title=\"需要隐藏元素时，可以采用3种方式：display: none; visibility: hidden; opacity: 0;。\"></a>需要隐藏元素时，可以采用3种方式：display: none; visibility: hidden; opacity: 0;。</h2><h3 id=\"三者之间的区别可以用下表说明：\"><a href=\"#三者之间的区别可以用下表说明：\" class=\"headerlink\" title=\"三者之间的区别可以用下表说明：\"></a>三者之间的区别可以用下表说明：</h3><table>\n<thead>\n<tr>\n<th></th>\n<th style=\"text-align:center\">Display: none</th>\n<th style=\"text-align:center\">Visibility: hidden;</th>\n<th style=\"text-align:center\">Opacity: 0;</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Collapses</td>\n<td style=\"text-align:center\">&#10003;</td>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">X</td>\n</tr>\n<tr>\n<td>Events</td>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">&#10003;</td>\n</tr>\n<tr>\n<td>Taborder</td>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">&#10003;</td>\n</tr>\n<tr>\n<td>Animatable</td>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">&#10003;</td>\n</tr>\n</tbody>\n</table>\n<p>上表详细说明了这三种样式下，元素对应不同操作的反应：</p>\n<ul>\n<li>Collapses - 表示元素是否占用文档空间，即是否存在于文档流中。</li>\n<li>Events - 元素对事件的反应，如click事件。</li>\n<li>Taborder - 元素是否包含在taborder中，即tab可否获取焦点。</li>\n<li>Animatable - 是否可以在可见与不可见元素之间过渡动画。</li>\n</ul>\n<blockquote>\n<p>由此可知，如果想让一个元素彻底消失，不占用任何空间，使用display: none;。<br>如果想让元素在可见的时候具有动画效果，使用opacity: 0;<br>而visibility: hidden;的元素仍然占用文档空间。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本文介绍隐藏HTML元素的三种方式之间的区别</p>\n</blockquote>","more":"<h2 id=\"需要隐藏元素时，可以采用3种方式：display-none-visibility-hidden-opacity-0-。\"><a href=\"#需要隐藏元素时，可以采用3种方式：display-none-visibility-hidden-opacity-0-。\" class=\"headerlink\" title=\"需要隐藏元素时，可以采用3种方式：display: none; visibility: hidden; opacity: 0;。\"></a>需要隐藏元素时，可以采用3种方式：display: none; visibility: hidden; opacity: 0;。</h2><h3 id=\"三者之间的区别可以用下表说明：\"><a href=\"#三者之间的区别可以用下表说明：\" class=\"headerlink\" title=\"三者之间的区别可以用下表说明：\"></a>三者之间的区别可以用下表说明：</h3><table>\n<thead>\n<tr>\n<th></th>\n<th style=\"text-align:center\">Display: none</th>\n<th style=\"text-align:center\">Visibility: hidden;</th>\n<th style=\"text-align:center\">Opacity: 0;</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Collapses</td>\n<td style=\"text-align:center\">&#10003;</td>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">X</td>\n</tr>\n<tr>\n<td>Events</td>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">&#10003;</td>\n</tr>\n<tr>\n<td>Taborder</td>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">&#10003;</td>\n</tr>\n<tr>\n<td>Animatable</td>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">X</td>\n<td style=\"text-align:center\">&#10003;</td>\n</tr>\n</tbody>\n</table>\n<p>上表详细说明了这三种样式下，元素对应不同操作的反应：</p>\n<ul>\n<li>Collapses - 表示元素是否占用文档空间，即是否存在于文档流中。</li>\n<li>Events - 元素对事件的反应，如click事件。</li>\n<li>Taborder - 元素是否包含在taborder中，即tab可否获取焦点。</li>\n<li>Animatable - 是否可以在可见与不可见元素之间过渡动画。</li>\n</ul>\n<blockquote>\n<p>由此可知，如果想让一个元素彻底消失，不占用任何空间，使用display: none;。<br>如果想让元素在可见的时候具有动画效果，使用opacity: 0;<br>而visibility: hidden;的元素仍然占用文档空间。</p>\n</blockquote>"},{"layout":"post","title":"HTML code 实现特殊符号","date":"2017-04-25T08:50:00.000Z","_content":"\n> 本文介绍如何在Markdown文档中插入特殊符号。\n\n<!--more-->\n\n## 使用HTML可方便地实现特殊符号的插入\n\n下表详细列出特殊符号及其对应的HTML code。\n\n| Sign | Name code | Decimal code | Hex code | Description |\n| ---  | ---- | ---- | ---- | ---- |\n| &    | `&amp;`| `&#38;` | `&#x26;` | ampersand (and) sign |\n| ﹠   |       | `&#65120;` | `&#xFE60;` |    |\n| ☑  |  | `&#9745;` | `&#x2611;` |  |\n| ✓  |  | `&#10003;` | `&#x2713;` | checkmark sign |\n| ✔  |  | `&#10004;` | `&#x2714;` | checkmark sign |\n| \"  | `&quot;` | `&#34;` | `&#x22;` | quotation mark |\n| '  | `&apos;` | `&#39;` | `&#x27;` | single quote |\n| \\`  |  | `&#96;` | `&#x60;` |  |\n|＂  |  | `&#65282;` | `&#xFF02;` |  |\n|＇  |  | `&#65287;` | `&#xFF07;` |  |\n| ♥  | `&hearts;` | `&#9829;` | `&#x2665;` | heart symbol |\n| ❤  |  | `&#10084;` | `&#x2764;` |  |\n| ❥  |  | `&#10085;` | `&#x2765;` |  |\n| � | `&copy;` | `&#169;` | `&#xA9;` | copyright symbol |\n| Ⓒ |  | `&#9400; `| `&#x24B8; `| C inside circle |\n|   | `&nbsp;` | `&#160;` | `&#xA0;` | non-breaking space |\n|   |  | `&#32;` | `&#x20;` | space |\n| ␠ |  | `&#9248;` | `&#x2420;` |  |\n| ␣ |  | `&#9251;` | `&#x2423;` | line space |\n| ™ | `&trade;` | `&#8482;` | `&#x2122;` | trademark symbol |\n| ® | `&reg;` | `&#174;` | `&#x00AE;` | registered trademark symbol |\n| € | `&euro;` | `&#8364;` | `&#x20AC;` | Euro symbol |\n\n目前先总结这么多，随后用到新的还会继续补充。\n\n\n[参考]   \nhttp://www.rapidtables.com/web/html/html-codes.htm\n","source":"_posts/HTML_code_实现特殊符号.md","raw":"---\nlayout: post\ntitle: HTML code 实现特殊符号\ntags: [html,code,checkmark,symbol]\ndate: 2017-04-25 16:50:00\n---\n\n> 本文介绍如何在Markdown文档中插入特殊符号。\n\n<!--more-->\n\n## 使用HTML可方便地实现特殊符号的插入\n\n下表详细列出特殊符号及其对应的HTML code。\n\n| Sign | Name code | Decimal code | Hex code | Description |\n| ---  | ---- | ---- | ---- | ---- |\n| &    | `&amp;`| `&#38;` | `&#x26;` | ampersand (and) sign |\n| ﹠   |       | `&#65120;` | `&#xFE60;` |    |\n| ☑  |  | `&#9745;` | `&#x2611;` |  |\n| ✓  |  | `&#10003;` | `&#x2713;` | checkmark sign |\n| ✔  |  | `&#10004;` | `&#x2714;` | checkmark sign |\n| \"  | `&quot;` | `&#34;` | `&#x22;` | quotation mark |\n| '  | `&apos;` | `&#39;` | `&#x27;` | single quote |\n| \\`  |  | `&#96;` | `&#x60;` |  |\n|＂  |  | `&#65282;` | `&#xFF02;` |  |\n|＇  |  | `&#65287;` | `&#xFF07;` |  |\n| ♥  | `&hearts;` | `&#9829;` | `&#x2665;` | heart symbol |\n| ❤  |  | `&#10084;` | `&#x2764;` |  |\n| ❥  |  | `&#10085;` | `&#x2765;` |  |\n| � | `&copy;` | `&#169;` | `&#xA9;` | copyright symbol |\n| Ⓒ |  | `&#9400; `| `&#x24B8; `| C inside circle |\n|   | `&nbsp;` | `&#160;` | `&#xA0;` | non-breaking space |\n|   |  | `&#32;` | `&#x20;` | space |\n| ␠ |  | `&#9248;` | `&#x2420;` |  |\n| ␣ |  | `&#9251;` | `&#x2423;` | line space |\n| ™ | `&trade;` | `&#8482;` | `&#x2122;` | trademark symbol |\n| ® | `&reg;` | `&#174;` | `&#x00AE;` | registered trademark symbol |\n| € | `&euro;` | `&#8364;` | `&#x20AC;` | Euro symbol |\n\n目前先总结这么多，随后用到新的还会继续补充。\n\n\n[参考]   \nhttp://www.rapidtables.com/web/html/html-codes.htm\n","slug":"HTML_code_实现特殊符号","published":1,"updated":"2022-07-14T01:23:25.010Z","comments":1,"photos":[],"link":"","_id":"cl5lql4d200028ds6eghi3tbk","content":"<blockquote>\n<p>本文介绍如何在Markdown文档中插入特殊符号。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"使用HTML可方便地实现特殊符号的插入\"><a href=\"#使用HTML可方便地实现特殊符号的插入\" class=\"headerlink\" title=\"使用HTML可方便地实现特殊符号的插入\"></a>使用HTML可方便地实现特殊符号的插入</h2><p>下表详细列出特殊符号及其对应的HTML code。</p>\n<table>\n<thead>\n<tr>\n<th>Sign</th>\n<th>Name code</th>\n<th>Decimal code</th>\n<th>Hex code</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&amp;</td>\n<td><code>&amp;amp;</code></td>\n<td><code>&amp;#38;</code></td>\n<td><code>&amp;#x26;</code></td>\n<td>ampersand (and) sign</td>\n</tr>\n<tr>\n<td>﹠</td>\n<td></td>\n<td><code>&amp;#65120;</code></td>\n<td><code>&amp;#xFE60;</code></td>\n<td></td>\n</tr>\n<tr>\n<td>☑</td>\n<td></td>\n<td><code>&amp;#9745;</code></td>\n<td><code>&amp;#x2611;</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✓</td>\n<td></td>\n<td><code>&amp;#10003;</code></td>\n<td><code>&amp;#x2713;</code></td>\n<td>checkmark sign</td>\n</tr>\n<tr>\n<td>✔</td>\n<td></td>\n<td><code>&amp;#10004;</code></td>\n<td><code>&amp;#x2714;</code></td>\n<td>checkmark sign</td>\n</tr>\n<tr>\n<td>“</td>\n<td><code>&amp;quot;</code></td>\n<td><code>&amp;#34;</code></td>\n<td><code>&amp;#x22;</code></td>\n<td>quotation mark</td>\n</tr>\n<tr>\n<td>‘</td>\n<td><code>&amp;apos;</code></td>\n<td><code>&amp;#39;</code></td>\n<td><code>&amp;#x27;</code></td>\n<td>single quote</td>\n</tr>\n<tr>\n<td>`</td>\n<td></td>\n<td><code>&amp;#96;</code></td>\n<td><code>&amp;#x60;</code></td>\n<td></td>\n</tr>\n<tr>\n<td>＂</td>\n<td></td>\n<td><code>&amp;#65282;</code></td>\n<td><code>&amp;#xFF02;</code></td>\n<td></td>\n</tr>\n<tr>\n<td>＇</td>\n<td></td>\n<td><code>&amp;#65287;</code></td>\n<td><code>&amp;#xFF07;</code></td>\n<td></td>\n</tr>\n<tr>\n<td>♥</td>\n<td><code>&amp;hearts;</code></td>\n<td><code>&amp;#9829;</code></td>\n<td><code>&amp;#x2665;</code></td>\n<td>heart symbol</td>\n</tr>\n<tr>\n<td>❤</td>\n<td></td>\n<td><code>&amp;#10084;</code></td>\n<td><code>&amp;#x2764;</code></td>\n<td></td>\n</tr>\n<tr>\n<td>❥</td>\n<td></td>\n<td><code>&amp;#10085;</code></td>\n<td><code>&amp;#x2765;</code></td>\n<td></td>\n</tr>\n<tr>\n<td>�</td>\n<td><code>&amp;copy;</code></td>\n<td><code>&amp;#169;</code></td>\n<td><code>&amp;#xA9;</code></td>\n<td>copyright symbol</td>\n</tr>\n<tr>\n<td>Ⓒ</td>\n<td></td>\n<td><code>&amp;#9400;</code></td>\n<td><code>&amp;#x24B8;</code></td>\n<td>C inside circle</td>\n</tr>\n<tr>\n<td></td>\n<td><code>&amp;nbsp;</code></td>\n<td><code>&amp;#160;</code></td>\n<td><code>&amp;#xA0;</code></td>\n<td>non-breaking space</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td><code>&amp;#32;</code></td>\n<td><code>&amp;#x20;</code></td>\n<td>space</td>\n</tr>\n<tr>\n<td>␠</td>\n<td></td>\n<td><code>&amp;#9248;</code></td>\n<td><code>&amp;#x2420;</code></td>\n<td></td>\n</tr>\n<tr>\n<td>␣</td>\n<td></td>\n<td><code>&amp;#9251;</code></td>\n<td><code>&amp;#x2423;</code></td>\n<td>line space</td>\n</tr>\n<tr>\n<td>™</td>\n<td><code>&amp;trade;</code></td>\n<td><code>&amp;#8482;</code></td>\n<td><code>&amp;#x2122;</code></td>\n<td>trademark symbol</td>\n</tr>\n<tr>\n<td>®</td>\n<td><code>&amp;reg;</code></td>\n<td><code>&amp;#174;</code></td>\n<td><code>&amp;#x00AE;</code></td>\n<td>registered trademark symbol</td>\n</tr>\n<tr>\n<td>€</td>\n<td><code>&amp;euro;</code></td>\n<td><code>&amp;#8364;</code></td>\n<td><code>&amp;#x20AC;</code></td>\n<td>Euro symbol</td>\n</tr>\n</tbody>\n</table>\n<p>目前先总结这么多，随后用到新的还会继续补充。</p>\n<p>[参考]<br><a href=\"http://www.rapidtables.com/web/html/html-codes.htm\">http://www.rapidtables.com/web/html/html-codes.htm</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本文介绍如何在Markdown文档中插入特殊符号。</p>\n</blockquote>","more":"<h2 id=\"使用HTML可方便地实现特殊符号的插入\"><a href=\"#使用HTML可方便地实现特殊符号的插入\" class=\"headerlink\" title=\"使用HTML可方便地实现特殊符号的插入\"></a>使用HTML可方便地实现特殊符号的插入</h2><p>下表详细列出特殊符号及其对应的HTML code。</p>\n<table>\n<thead>\n<tr>\n<th>Sign</th>\n<th>Name code</th>\n<th>Decimal code</th>\n<th>Hex code</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&amp;</td>\n<td><code>&amp;amp;</code></td>\n<td><code>&amp;#38;</code></td>\n<td><code>&amp;#x26;</code></td>\n<td>ampersand (and) sign</td>\n</tr>\n<tr>\n<td>﹠</td>\n<td></td>\n<td><code>&amp;#65120;</code></td>\n<td><code>&amp;#xFE60;</code></td>\n<td></td>\n</tr>\n<tr>\n<td>☑</td>\n<td></td>\n<td><code>&amp;#9745;</code></td>\n<td><code>&amp;#x2611;</code></td>\n<td></td>\n</tr>\n<tr>\n<td>✓</td>\n<td></td>\n<td><code>&amp;#10003;</code></td>\n<td><code>&amp;#x2713;</code></td>\n<td>checkmark sign</td>\n</tr>\n<tr>\n<td>✔</td>\n<td></td>\n<td><code>&amp;#10004;</code></td>\n<td><code>&amp;#x2714;</code></td>\n<td>checkmark sign</td>\n</tr>\n<tr>\n<td>“</td>\n<td><code>&amp;quot;</code></td>\n<td><code>&amp;#34;</code></td>\n<td><code>&amp;#x22;</code></td>\n<td>quotation mark</td>\n</tr>\n<tr>\n<td>‘</td>\n<td><code>&amp;apos;</code></td>\n<td><code>&amp;#39;</code></td>\n<td><code>&amp;#x27;</code></td>\n<td>single quote</td>\n</tr>\n<tr>\n<td>`</td>\n<td></td>\n<td><code>&amp;#96;</code></td>\n<td><code>&amp;#x60;</code></td>\n<td></td>\n</tr>\n<tr>\n<td>＂</td>\n<td></td>\n<td><code>&amp;#65282;</code></td>\n<td><code>&amp;#xFF02;</code></td>\n<td></td>\n</tr>\n<tr>\n<td>＇</td>\n<td></td>\n<td><code>&amp;#65287;</code></td>\n<td><code>&amp;#xFF07;</code></td>\n<td></td>\n</tr>\n<tr>\n<td>♥</td>\n<td><code>&amp;hearts;</code></td>\n<td><code>&amp;#9829;</code></td>\n<td><code>&amp;#x2665;</code></td>\n<td>heart symbol</td>\n</tr>\n<tr>\n<td>❤</td>\n<td></td>\n<td><code>&amp;#10084;</code></td>\n<td><code>&amp;#x2764;</code></td>\n<td></td>\n</tr>\n<tr>\n<td>❥</td>\n<td></td>\n<td><code>&amp;#10085;</code></td>\n<td><code>&amp;#x2765;</code></td>\n<td></td>\n</tr>\n<tr>\n<td>�</td>\n<td><code>&amp;copy;</code></td>\n<td><code>&amp;#169;</code></td>\n<td><code>&amp;#xA9;</code></td>\n<td>copyright symbol</td>\n</tr>\n<tr>\n<td>Ⓒ</td>\n<td></td>\n<td><code>&amp;#9400;</code></td>\n<td><code>&amp;#x24B8;</code></td>\n<td>C inside circle</td>\n</tr>\n<tr>\n<td></td>\n<td><code>&amp;nbsp;</code></td>\n<td><code>&amp;#160;</code></td>\n<td><code>&amp;#xA0;</code></td>\n<td>non-breaking space</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td><code>&amp;#32;</code></td>\n<td><code>&amp;#x20;</code></td>\n<td>space</td>\n</tr>\n<tr>\n<td>␠</td>\n<td></td>\n<td><code>&amp;#9248;</code></td>\n<td><code>&amp;#x2420;</code></td>\n<td></td>\n</tr>\n<tr>\n<td>␣</td>\n<td></td>\n<td><code>&amp;#9251;</code></td>\n<td><code>&amp;#x2423;</code></td>\n<td>line space</td>\n</tr>\n<tr>\n<td>™</td>\n<td><code>&amp;trade;</code></td>\n<td><code>&amp;#8482;</code></td>\n<td><code>&amp;#x2122;</code></td>\n<td>trademark symbol</td>\n</tr>\n<tr>\n<td>®</td>\n<td><code>&amp;reg;</code></td>\n<td><code>&amp;#174;</code></td>\n<td><code>&amp;#x00AE;</code></td>\n<td>registered trademark symbol</td>\n</tr>\n<tr>\n<td>€</td>\n<td><code>&amp;euro;</code></td>\n<td><code>&amp;#8364;</code></td>\n<td><code>&amp;#x20AC;</code></td>\n<td>Euro symbol</td>\n</tr>\n</tbody>\n</table>\n<p>目前先总结这么多，随后用到新的还会继续补充。</p>\n<p>[参考]<br><a href=\"http://www.rapidtables.com/web/html/html-codes.htm\">http://www.rapidtables.com/web/html/html-codes.htm</a></p>"},{"layout":"post","title":"JS中两个!!的用法","date":"2016-07-22T03:33:00.000Z","_content":"\n> 两个感叹号的作用就在于，如果明确设置了变量的值（非null/undifined/0/\"\"等值),结果就会根据变量的实际值来返回，如果没有设置，结果就会返回false。\n\n<!--more-->\n\n如下例子：\n\n```javascript\nvar foo;\nalert(!foo); // undefined情况下，一个感叹号返回true\nalert(!goo); // null情况下，一个感叹号同样返回true\n\nvar obj = {flag:true};\nvar test = !!obj.flag; // 等效于var test = obj.flag || false;\nalert(test);\n```","source":"_posts/JS_double_markable_sign.md","raw":"---\nlayout: post\ntitle: JS中两个!!的用法\ntags: [JavaScript,JS,markable,double]\ndate: 2016-07-22 11:33:00 +800\n---\n\n> 两个感叹号的作用就在于，如果明确设置了变量的值（非null/undifined/0/\"\"等值),结果就会根据变量的实际值来返回，如果没有设置，结果就会返回false。\n\n<!--more-->\n\n如下例子：\n\n```javascript\nvar foo;\nalert(!foo); // undefined情况下，一个感叹号返回true\nalert(!goo); // null情况下，一个感叹号同样返回true\n\nvar obj = {flag:true};\nvar test = !!obj.flag; // 等效于var test = obj.flag || false;\nalert(test);\n```","slug":"JS_double_markable_sign","published":1,"updated":"2022-07-14T01:23:25.010Z","comments":1,"photos":[],"link":"","_id":"cl5lql4d600048ds6embf6em4","content":"<blockquote>\n<p>两个感叹号的作用就在于，如果明确设置了变量的值（非null/undifined/0/“”等值),结果就会根据变量的实际值来返回，如果没有设置，结果就会返回false。</p>\n</blockquote>\n<span id=\"more\"></span>\n<p>如下例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo;</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(!foo); <span class=\"comment\">// undefined情况下，一个感叹号返回true</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(!goo); <span class=\"comment\">// null情况下，一个感叹号同样返回true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">flag</span>:<span class=\"literal\">true</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> test = !!obj.<span class=\"property\">flag</span>; <span class=\"comment\">// 等效于var test = obj.flag || false;</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(test);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<blockquote>\n<p>两个感叹号的作用就在于，如果明确设置了变量的值（非null/undifined/0/“”等值),结果就会根据变量的实际值来返回，如果没有设置，结果就会返回false。</p>\n</blockquote>","more":"<p>如下例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo;</span><br><span class=\"line\"><span class=\"title function_\">alert</span>(!foo); <span class=\"comment\">// undefined情况下，一个感叹号返回true</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(!goo); <span class=\"comment\">// null情况下，一个感叹号同样返回true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">flag</span>:<span class=\"literal\">true</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> test = !!obj.<span class=\"property\">flag</span>; <span class=\"comment\">// 等效于var test = obj.flag || false;</span></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(test);</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"启动RTC Eclipse client 出现 java.lang.IllegalStateException 错误","date":"2017-04-28T06:50:00.000Z","_content":"\n> 有时RTC Eclipse打开时，会出现一个报错窗口，提示：An internal error occurred during: \"Computing local changes. java.lang.IllegalStateException\"。\n\n<!--more-->\n\n## 起因\n这个问题可能原因有很多，我遇到的情况是，当我多次强制关闭eclipse后，出现这个问题的可能性就很高。\n\n## 症状\n\n计算本地修改遇到问题，无法把项目中的修改文件在Local changes中展示出来，就无法知道哪些文件已经被修改。\n\n## 解决办法\n\n参考： \n[Starting RTC Eclipse client results in java.lang.IllegalStateException error](http://www-01.ibm.com/support/docview.wss?uid=swg21699723)\n","source":"_posts/Starting-RTC-Eclipse-client-results-in-java.lang.IllegalStateException-error.md","raw":"---\nlayout: post\ntitle: 启动RTC Eclipse client 出现 java.lang.IllegalStateException 错误\ntags: [rtc,eclipse,java,IllegalStateException]\ndate: 2017-04-28 14:50:00\n---\n\n> 有时RTC Eclipse打开时，会出现一个报错窗口，提示：An internal error occurred during: \"Computing local changes. java.lang.IllegalStateException\"。\n\n<!--more-->\n\n## 起因\n这个问题可能原因有很多，我遇到的情况是，当我多次强制关闭eclipse后，出现这个问题的可能性就很高。\n\n## 症状\n\n计算本地修改遇到问题，无法把项目中的修改文件在Local changes中展示出来，就无法知道哪些文件已经被修改。\n\n## 解决办法\n\n参考： \n[Starting RTC Eclipse client results in java.lang.IllegalStateException error](http://www-01.ibm.com/support/docview.wss?uid=swg21699723)\n","slug":"Starting-RTC-Eclipse-client-results-in-java.lang.IllegalStateException-error","published":1,"updated":"2022-07-14T01:23:25.011Z","comments":1,"photos":[],"link":"","_id":"cl5lql4d700058ds651nm9s84","content":"<blockquote>\n<p>有时RTC Eclipse打开时，会出现一个报错窗口，提示：An internal error occurred during: “Computing local changes. java.lang.IllegalStateException”。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>这个问题可能原因有很多，我遇到的情况是，当我多次强制关闭eclipse后，出现这个问题的可能性就很高。</p>\n<h2 id=\"症状\"><a href=\"#症状\" class=\"headerlink\" title=\"症状\"></a>症状</h2><p>计算本地修改遇到问题，无法把项目中的修改文件在Local changes中展示出来，就无法知道哪些文件已经被修改。</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>参考：<br><a href=\"http://www-01.ibm.com/support/docview.wss?uid=swg21699723\">Starting RTC Eclipse client results in java.lang.IllegalStateException error</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>有时RTC Eclipse打开时，会出现一个报错窗口，提示：An internal error occurred during: “Computing local changes. java.lang.IllegalStateException”。</p>\n</blockquote>","more":"<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><p>这个问题可能原因有很多，我遇到的情况是，当我多次强制关闭eclipse后，出现这个问题的可能性就很高。</p>\n<h2 id=\"症状\"><a href=\"#症状\" class=\"headerlink\" title=\"症状\"></a>症状</h2><p>计算本地修改遇到问题，无法把项目中的修改文件在Local changes中展示出来，就无法知道哪些文件已经被修改。</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>参考：<br><a href=\"http://www-01.ibm.com/support/docview.wss?uid=swg21699723\">Starting RTC Eclipse client results in java.lang.IllegalStateException error</a></p>"},{"layout":"post","title":"JavaScript上下文","date":"2016-07-22T03:30:00.000Z","_content":"\n> 每当一个函数被调用时，JavaScript会创建一个对应的上下文，上下文的创建步骤如下：\n\n1. 创建arguments对象；\n2. 创建函数的scope对象；\n3. 初始化函数的局部变量；\n4. 创建this属性；\n\n<!--more-->\n\n> 其中，this指向的是正在调用该函数的对象。\n理解这一点对于理解JavaScript中的函数运行非常关键，因为JavaScript中函数的上下文是在函数被调用的时候才确定的。\n","source":"_posts/JavaScript_context.md","raw":"---\nlayout: post\ntitle: JavaScript上下文\ntags: [JavaScript,JS,context]\ndate: 2016-07-22 11:30:00 +800\n---\n\n> 每当一个函数被调用时，JavaScript会创建一个对应的上下文，上下文的创建步骤如下：\n\n1. 创建arguments对象；\n2. 创建函数的scope对象；\n3. 初始化函数的局部变量；\n4. 创建this属性；\n\n<!--more-->\n\n> 其中，this指向的是正在调用该函数的对象。\n理解这一点对于理解JavaScript中的函数运行非常关键，因为JavaScript中函数的上下文是在函数被调用的时候才确定的。\n","slug":"JavaScript_context","published":1,"updated":"2022-07-14T01:23:25.010Z","comments":1,"photos":[],"link":"","_id":"cl5lql4d800068ds6233yeczk","content":"<blockquote>\n<p>每当一个函数被调用时，JavaScript会创建一个对应的上下文，上下文的创建步骤如下：</p>\n</blockquote>\n<ol>\n<li>创建arguments对象；</li>\n<li>创建函数的scope对象；</li>\n<li>初始化函数的局部变量；</li>\n<li>创建this属性；</li>\n</ol>\n<span id=\"more\"></span>\n<blockquote>\n<p>其中，this指向的是正在调用该函数的对象。<br>理解这一点对于理解JavaScript中的函数运行非常关键，因为JavaScript中函数的上下文是在函数被调用的时候才确定的。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>每当一个函数被调用时，JavaScript会创建一个对应的上下文，上下文的创建步骤如下：</p>\n</blockquote>\n<ol>\n<li>创建arguments对象；</li>\n<li>创建函数的scope对象；</li>\n<li>初始化函数的局部变量；</li>\n<li>创建this属性；</li>\n</ol>","more":"<blockquote>\n<p>其中，this指向的是正在调用该函数的对象。<br>理解这一点对于理解JavaScript中的函数运行非常关键，因为JavaScript中函数的上下文是在函数被调用的时候才确定的。</p>\n</blockquote>"},{"layout":"post","title":"合成事件（SyntheticEvent）","date":"2017-05-11T08:40:00.000Z","_content":"\n> 本文简要介绍React事件系统中的合成事件(`SyntheticEvent`)，`SyntheticEvent`是React对浏览器原生事件跨游览器的封装，和原生事件一样支持`stopPropagation()`、`preventDefault()`接口，并且这些接口是跨游览器兼容的。\n\n<!-- more -->\n\n### 属性\n如果需要使用浏览器的原生事件，可以通过`nativeEvent`属性获得。每个`SyntheticEvent`对象都具有以下属性：\n```JavaScript\nboolean bubbles\nboolean cancelable\nboolean defaultPrevented\nboolean isTrusted\nboolean isDefaultPrevented()\nboolean isPropagationStopped()\n\nvoid preventDefault()\nvoid stopPropagation()\n\nstring type\n\nnumber eventPhase\nnumber timeStamp\n\nDOMEvent nativeEvent\nDOMEventTarget currentTarget\nDOMEventTarget target\n```\n\n> ***注意：***   \nReact v0.14版本，在事件处理程序中返回`false`并不会停止事件冒泡，取而代之，如果需要应手动触发`e.stopPropagation()`或`e.preventDefault()`。\n\n### 事件池 (`Event Pooling`)\n`SyntheticEvent`是池化的，就意味着`SyntheticEvent`对象将会被重用，且所有属性都会在事件回调被调用后清空（`nullified`）。这是出于性能考虑，因此，无法异步访问事件。\n```JavaScript\nfunction onClick(event) {\n    console.log(event); // => nullified object.\n    console.log(event.type); // => \"click\"\n    const eventType = event.type; // => \"click\"\n\n    setTimeout(function() {\n        console.log(event.type); // => null\n        console.log(eventType); // => \"click\"\n    }, 0);\n\n    // Won't work. this.state.clickEvent will only contain null values.\n    this.setState({clickEvent: event});\n\n    // You can still export event properties.\n    this.setState({eventType: event.type});\n}\n```\n> ***注意：***   \n如果想异步访问事件属性，需要在事件上调用`event.persist()`，这会从池中移除`SyntheticEvent`并允许保留对事件的引用。   \n\n### 支持的事件\nReact将事件统一化，使事件在不同的浏览器上保持一致的属性。   \n以下的事件处理程序在事件冒泡阶段被触发，如果要注册事件捕获程序，在所有的事件名后加上`Capture`即可，例如，使用`onClickCapture`来处理捕获阶段的点击事件。   \n* Clipboard Events\n* Composition Events\n* Keyboard Events\n* Focus Events\n* Form Events\n* Mouse Events\n* Selection Events\n* Touch Events\n* UI Events\n* Wheel Events\n* Media Events\n* Image Events\n* Animation Events\n* Transition Events\n\n#### Clipboard Events\nEvent names:\n```JavaScript\nonCopy onCut onPaste\n```\n\nProperties:\n```JavaScript\nDOMDataTransfer clipboardData\n```\n\n#### Composition Events\nEvent names:\n```JavaScript\nonCompositionEnd onCompositionStart onCompositionUpdate\n```\n\nProperties:\n```JavaScript\nstring data\n```\n#### Keyboard Events\nEvent names:\n```JavaScript\nonKeyDown onKeyPress onKeyUp\n```\n\nProperties:\n```JavaScript\nboolean altKey\nboolean ctrlKey\nboolean getModifierState(key)\nboolean metaKey\nboolean repeat\nboolean shiftKey\n\nnumber charCode\nnumber keyCode\nnumber location\nnumber which\n\nstring key\nstring locale\n```\n#### Focus Events\nEvent names:\n```JavaScript\nonFocus onBlur\n```\nThese focus events work on all elements in the React DOM, not just form elements.  \n\nProperties:\n```JavaScript\nDOMEventTarget relatedTarget\n```\n#### Form Events\nEvent names:\n```JavaScript\nonChange onInput onSubmit\n```\n\nProperties:\n```JavaScript\nDOMEventTarget relatedTarget\n```\n#### Mouse Events\nEvent names:\n```JavaScript\nonClick onContextMenu onDoubleClick onDrage onDragEnd onDragEnter onDragExit onDragLeave onDragOver onDragStart onDrop onMouseDown onMouseEnter onMouseLeave onMouseMove onMouseOut onMouseOver onMouseUp\n```\nThe `onMouseEnter` and `onMouseLeave` events propagate from the element being left to the one being entered instead of ordinary bubbling and do not have a capture phase.   \n\nProperties:\n```JavaScript\nboolean altKey\nboolean ctrlKey\nboolean getModifierState(key)\nboolean metaKey\nboolean shiftKey\n\nnumber button\nnumber buttons\nnumber clientX\nnumber clientY\nnumber pageX\nnumber pageY\nnumber screenX\nnumber screenY\n\nDOMEventTarget relatedTarget\n```\n#### Selection Events\nEvent names:\n```JavaScript\nonSelect\n```\n\nProperties:\n```JavaScript\nDOMEventTarget relatedTarget\n```\n#### Touch Events\nEvent names:\n```JavaScript\nonTouchCancel onTouchEnd onTouchMove onTouchStart\n```\n\nProperties:\n```JavaScript\nboolean altKey\nboolean getModifierState(key)\nboolean ctrlKey\nboolean metaKey\nboolean shiftKey\n\nDOMTouchList targetTouches\nDOMTouchList touches\n```\n#### UI Events\nEvent names:\n```JavaScript\nonScroll\n```\n\nProperties:\n```JavaScript\nnumber detail\nDOMAbstractView view\n```\n#### Wheel Events\nEvent names:\n```JavaScript\nonWheel\n```\n\nProperties:\n```JavaScript\nnumber deltaMode\nnumber deltaX\nnumber deltaY\nnumber deltaZ\n```\n#### Media Events\nEvent names:\n```JavaScript\nonAbort onCanPlay onCanPlayThrough onDurationChange onEmptied onEncrypted onEnded onError onLoadedData onLoadedMetadata onLoadStart onPause onPlay onPlaying onProgress onRateChange onSeeked onSeeking onStalled onSuspend onTimeUpdate onVolumeChange onWaiting\n```\n#### Image Events\nEvent names:\n```JavaScript\nonLoad onError\n```\n#### Animation Events\nEvent names:\n```JavaScript\nonAnimationStart onAnimationEnt onAnimationIteration\n```\n\nProperties:\n```JavaScript\nstring animationName\nstring pseudoElement\nfloat elapsedTime\n```\n#### Transition Events\nEvent names:\n```JavaScript\nonTransitionEnd\n```\n\nProperties:\n```JavaScript\nstring propertyName\nstring pseudoElement\nfloat elapsedTime\n```\n","source":"_posts/SyntheticEvent.md","raw":"---\nlayout: post\ntitle: 合成事件（SyntheticEvent）\ntags: [SyntheticEvent,react,javascript]\ndate: 2017-05-11 16:40:00\n---\n\n> 本文简要介绍React事件系统中的合成事件(`SyntheticEvent`)，`SyntheticEvent`是React对浏览器原生事件跨游览器的封装，和原生事件一样支持`stopPropagation()`、`preventDefault()`接口，并且这些接口是跨游览器兼容的。\n\n<!-- more -->\n\n### 属性\n如果需要使用浏览器的原生事件，可以通过`nativeEvent`属性获得。每个`SyntheticEvent`对象都具有以下属性：\n```JavaScript\nboolean bubbles\nboolean cancelable\nboolean defaultPrevented\nboolean isTrusted\nboolean isDefaultPrevented()\nboolean isPropagationStopped()\n\nvoid preventDefault()\nvoid stopPropagation()\n\nstring type\n\nnumber eventPhase\nnumber timeStamp\n\nDOMEvent nativeEvent\nDOMEventTarget currentTarget\nDOMEventTarget target\n```\n\n> ***注意：***   \nReact v0.14版本，在事件处理程序中返回`false`并不会停止事件冒泡，取而代之，如果需要应手动触发`e.stopPropagation()`或`e.preventDefault()`。\n\n### 事件池 (`Event Pooling`)\n`SyntheticEvent`是池化的，就意味着`SyntheticEvent`对象将会被重用，且所有属性都会在事件回调被调用后清空（`nullified`）。这是出于性能考虑，因此，无法异步访问事件。\n```JavaScript\nfunction onClick(event) {\n    console.log(event); // => nullified object.\n    console.log(event.type); // => \"click\"\n    const eventType = event.type; // => \"click\"\n\n    setTimeout(function() {\n        console.log(event.type); // => null\n        console.log(eventType); // => \"click\"\n    }, 0);\n\n    // Won't work. this.state.clickEvent will only contain null values.\n    this.setState({clickEvent: event});\n\n    // You can still export event properties.\n    this.setState({eventType: event.type});\n}\n```\n> ***注意：***   \n如果想异步访问事件属性，需要在事件上调用`event.persist()`，这会从池中移除`SyntheticEvent`并允许保留对事件的引用。   \n\n### 支持的事件\nReact将事件统一化，使事件在不同的浏览器上保持一致的属性。   \n以下的事件处理程序在事件冒泡阶段被触发，如果要注册事件捕获程序，在所有的事件名后加上`Capture`即可，例如，使用`onClickCapture`来处理捕获阶段的点击事件。   \n* Clipboard Events\n* Composition Events\n* Keyboard Events\n* Focus Events\n* Form Events\n* Mouse Events\n* Selection Events\n* Touch Events\n* UI Events\n* Wheel Events\n* Media Events\n* Image Events\n* Animation Events\n* Transition Events\n\n#### Clipboard Events\nEvent names:\n```JavaScript\nonCopy onCut onPaste\n```\n\nProperties:\n```JavaScript\nDOMDataTransfer clipboardData\n```\n\n#### Composition Events\nEvent names:\n```JavaScript\nonCompositionEnd onCompositionStart onCompositionUpdate\n```\n\nProperties:\n```JavaScript\nstring data\n```\n#### Keyboard Events\nEvent names:\n```JavaScript\nonKeyDown onKeyPress onKeyUp\n```\n\nProperties:\n```JavaScript\nboolean altKey\nboolean ctrlKey\nboolean getModifierState(key)\nboolean metaKey\nboolean repeat\nboolean shiftKey\n\nnumber charCode\nnumber keyCode\nnumber location\nnumber which\n\nstring key\nstring locale\n```\n#### Focus Events\nEvent names:\n```JavaScript\nonFocus onBlur\n```\nThese focus events work on all elements in the React DOM, not just form elements.  \n\nProperties:\n```JavaScript\nDOMEventTarget relatedTarget\n```\n#### Form Events\nEvent names:\n```JavaScript\nonChange onInput onSubmit\n```\n\nProperties:\n```JavaScript\nDOMEventTarget relatedTarget\n```\n#### Mouse Events\nEvent names:\n```JavaScript\nonClick onContextMenu onDoubleClick onDrage onDragEnd onDragEnter onDragExit onDragLeave onDragOver onDragStart onDrop onMouseDown onMouseEnter onMouseLeave onMouseMove onMouseOut onMouseOver onMouseUp\n```\nThe `onMouseEnter` and `onMouseLeave` events propagate from the element being left to the one being entered instead of ordinary bubbling and do not have a capture phase.   \n\nProperties:\n```JavaScript\nboolean altKey\nboolean ctrlKey\nboolean getModifierState(key)\nboolean metaKey\nboolean shiftKey\n\nnumber button\nnumber buttons\nnumber clientX\nnumber clientY\nnumber pageX\nnumber pageY\nnumber screenX\nnumber screenY\n\nDOMEventTarget relatedTarget\n```\n#### Selection Events\nEvent names:\n```JavaScript\nonSelect\n```\n\nProperties:\n```JavaScript\nDOMEventTarget relatedTarget\n```\n#### Touch Events\nEvent names:\n```JavaScript\nonTouchCancel onTouchEnd onTouchMove onTouchStart\n```\n\nProperties:\n```JavaScript\nboolean altKey\nboolean getModifierState(key)\nboolean ctrlKey\nboolean metaKey\nboolean shiftKey\n\nDOMTouchList targetTouches\nDOMTouchList touches\n```\n#### UI Events\nEvent names:\n```JavaScript\nonScroll\n```\n\nProperties:\n```JavaScript\nnumber detail\nDOMAbstractView view\n```\n#### Wheel Events\nEvent names:\n```JavaScript\nonWheel\n```\n\nProperties:\n```JavaScript\nnumber deltaMode\nnumber deltaX\nnumber deltaY\nnumber deltaZ\n```\n#### Media Events\nEvent names:\n```JavaScript\nonAbort onCanPlay onCanPlayThrough onDurationChange onEmptied onEncrypted onEnded onError onLoadedData onLoadedMetadata onLoadStart onPause onPlay onPlaying onProgress onRateChange onSeeked onSeeking onStalled onSuspend onTimeUpdate onVolumeChange onWaiting\n```\n#### Image Events\nEvent names:\n```JavaScript\nonLoad onError\n```\n#### Animation Events\nEvent names:\n```JavaScript\nonAnimationStart onAnimationEnt onAnimationIteration\n```\n\nProperties:\n```JavaScript\nstring animationName\nstring pseudoElement\nfloat elapsedTime\n```\n#### Transition Events\nEvent names:\n```JavaScript\nonTransitionEnd\n```\n\nProperties:\n```JavaScript\nstring propertyName\nstring pseudoElement\nfloat elapsedTime\n```\n","slug":"SyntheticEvent","published":1,"updated":"2022-07-14T01:23:25.011Z","comments":1,"photos":[],"link":"","_id":"cl5lql4d900088ds68z5b9qnc","content":"<blockquote>\n<p>本文简要介绍React事件系统中的合成事件(<code>SyntheticEvent</code>)，<code>SyntheticEvent</code>是React对浏览器原生事件跨游览器的封装，和原生事件一样支持<code>stopPropagation()</code>、<code>preventDefault()</code>接口，并且这些接口是跨游览器兼容的。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><p>如果需要使用浏览器的原生事件，可以通过<code>nativeEvent</code>属性获得。每个<code>SyntheticEvent</code>对象都具有以下属性：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean bubbles</span><br><span class=\"line\">boolean cancelable</span><br><span class=\"line\">boolean defaultPrevented</span><br><span class=\"line\">boolean isTrusted</span><br><span class=\"line\">boolean <span class=\"title function_\">isDefaultPrevented</span>()</span><br><span class=\"line\">boolean <span class=\"title function_\">isPropagationStopped</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">preventDefault</span>()</span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">stopPropagation</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">string type</span><br><span class=\"line\"></span><br><span class=\"line\">number eventPhase</span><br><span class=\"line\">number timeStamp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">DOMEvent</span> nativeEvent</span><br><span class=\"line\"><span class=\"title class_\">DOMEventTarget</span> currentTarget</span><br><span class=\"line\"><span class=\"title class_\">DOMEventTarget</span> target</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><strong><em>注意：</em></strong><br>React v0.14版本，在事件处理程序中返回<code>false</code>并不会停止事件冒泡，取而代之，如果需要应手动触发<code>e.stopPropagation()</code>或<code>e.preventDefault()</code>。</p>\n</blockquote>\n<h3 id=\"事件池-Event-Pooling\"><a href=\"#事件池-Event-Pooling\" class=\"headerlink\" title=\"事件池 (Event Pooling)\"></a>事件池 (<code>Event Pooling</code>)</h3><p><code>SyntheticEvent</code>是池化的，就意味着<code>SyntheticEvent</code>对象将会被重用，且所有属性都会在事件回调被调用后清空（<code>nullified</code>）。这是出于性能考虑，因此，无法异步访问事件。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">onClick</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(event); <span class=\"comment\">// =&gt; nullified object.</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(event.<span class=\"property\">type</span>); <span class=\"comment\">// =&gt; &quot;click&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> eventType = event.<span class=\"property\">type</span>; <span class=\"comment\">// =&gt; &quot;click&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(event.<span class=\"property\">type</span>); <span class=\"comment\">// =&gt; null</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(eventType); <span class=\"comment\">// =&gt; &quot;click&quot;</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Won&#x27;t work. this.state.clickEvent will only contain null values.</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;<span class=\"attr\">clickEvent</span>: event&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// You can still export event properties.</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;<span class=\"attr\">eventType</span>: event.<span class=\"property\">type</span>&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><strong><em>注意：</em></strong><br>如果想异步访问事件属性，需要在事件上调用<code>event.persist()</code>，这会从池中移除<code>SyntheticEvent</code>并允许保留对事件的引用。   </p>\n</blockquote>\n<h3 id=\"支持的事件\"><a href=\"#支持的事件\" class=\"headerlink\" title=\"支持的事件\"></a>支持的事件</h3><p>React将事件统一化，使事件在不同的浏览器上保持一致的属性。<br>以下的事件处理程序在事件冒泡阶段被触发，如果要注册事件捕获程序，在所有的事件名后加上<code>Capture</code>即可，例如，使用<code>onClickCapture</code>来处理捕获阶段的点击事件。   </p>\n<ul>\n<li>Clipboard Events</li>\n<li>Composition Events</li>\n<li>Keyboard Events</li>\n<li>Focus Events</li>\n<li>Form Events</li>\n<li>Mouse Events</li>\n<li>Selection Events</li>\n<li>Touch Events</li>\n<li>UI Events</li>\n<li>Wheel Events</li>\n<li>Media Events</li>\n<li>Image Events</li>\n<li>Animation Events</li>\n<li>Transition Events</li>\n</ul>\n<h4 id=\"Clipboard-Events\"><a href=\"#Clipboard-Events\" class=\"headerlink\" title=\"Clipboard Events\"></a>Clipboard Events</h4><p>Event names:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onCopy onCut onPaste</span><br></pre></td></tr></table></figure></p>\n<p>Properties:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">DOMDataTransfer</span> clipboardData</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Composition-Events\"><a href=\"#Composition-Events\" class=\"headerlink\" title=\"Composition Events\"></a>Composition Events</h4><p>Event names:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onCompositionEnd onCompositionStart onCompositionUpdate</span><br></pre></td></tr></table></figure></p>\n<p>Properties:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string data</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Keyboard-Events\"><a href=\"#Keyboard-Events\" class=\"headerlink\" title=\"Keyboard Events\"></a>Keyboard Events</h4><p>Event names:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onKeyDown onKeyPress onKeyUp</span><br></pre></td></tr></table></figure></p>\n<p>Properties:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean altKey</span><br><span class=\"line\">boolean ctrlKey</span><br><span class=\"line\">boolean <span class=\"title function_\">getModifierState</span>(key)</span><br><span class=\"line\">boolean metaKey</span><br><span class=\"line\">boolean repeat</span><br><span class=\"line\">boolean shiftKey</span><br><span class=\"line\"></span><br><span class=\"line\">number charCode</span><br><span class=\"line\">number keyCode</span><br><span class=\"line\">number location</span><br><span class=\"line\">number which</span><br><span class=\"line\"></span><br><span class=\"line\">string key</span><br><span class=\"line\">string locale</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Focus-Events\"><a href=\"#Focus-Events\" class=\"headerlink\" title=\"Focus Events\"></a>Focus Events</h4><p>Event names:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onFocus onBlur</span><br></pre></td></tr></table></figure><br>These focus events work on all elements in the React DOM, not just form elements.  </p>\n<p>Properties:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">DOMEventTarget</span> relatedTarget</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Form-Events\"><a href=\"#Form-Events\" class=\"headerlink\" title=\"Form Events\"></a>Form Events</h4><p>Event names:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onChange onInput onSubmit</span><br></pre></td></tr></table></figure></p>\n<p>Properties:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">DOMEventTarget</span> relatedTarget</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Mouse-Events\"><a href=\"#Mouse-Events\" class=\"headerlink\" title=\"Mouse Events\"></a>Mouse Events</h4><p>Event names:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onClick onContextMenu onDoubleClick onDrage onDragEnd onDragEnter onDragExit onDragLeave onDragOver onDragStart onDrop onMouseDown onMouseEnter onMouseLeave onMouseMove onMouseOut onMouseOver onMouseUp</span><br></pre></td></tr></table></figure><br>The <code>onMouseEnter</code> and <code>onMouseLeave</code> events propagate from the element being left to the one being entered instead of ordinary bubbling and do not have a capture phase.   </p>\n<p>Properties:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean altKey</span><br><span class=\"line\">boolean ctrlKey</span><br><span class=\"line\">boolean <span class=\"title function_\">getModifierState</span>(key)</span><br><span class=\"line\">boolean metaKey</span><br><span class=\"line\">boolean shiftKey</span><br><span class=\"line\"></span><br><span class=\"line\">number button</span><br><span class=\"line\">number buttons</span><br><span class=\"line\">number clientX</span><br><span class=\"line\">number clientY</span><br><span class=\"line\">number pageX</span><br><span class=\"line\">number pageY</span><br><span class=\"line\">number screenX</span><br><span class=\"line\">number screenY</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">DOMEventTarget</span> relatedTarget</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Selection-Events\"><a href=\"#Selection-Events\" class=\"headerlink\" title=\"Selection Events\"></a>Selection Events</h4><p>Event names:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onSelect</span><br></pre></td></tr></table></figure></p>\n<p>Properties:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">DOMEventTarget</span> relatedTarget</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Touch-Events\"><a href=\"#Touch-Events\" class=\"headerlink\" title=\"Touch Events\"></a>Touch Events</h4><p>Event names:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onTouchCancel onTouchEnd onTouchMove onTouchStart</span><br></pre></td></tr></table></figure></p>\n<p>Properties:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean altKey</span><br><span class=\"line\">boolean <span class=\"title function_\">getModifierState</span>(key)</span><br><span class=\"line\">boolean ctrlKey</span><br><span class=\"line\">boolean metaKey</span><br><span class=\"line\">boolean shiftKey</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">DOMTouchList</span> targetTouches</span><br><span class=\"line\"><span class=\"title class_\">DOMTouchList</span> touches</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"UI-Events\"><a href=\"#UI-Events\" class=\"headerlink\" title=\"UI Events\"></a>UI Events</h4><p>Event names:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onScroll</span><br></pre></td></tr></table></figure></p>\n<p>Properties:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">number detail</span><br><span class=\"line\"><span class=\"title class_\">DOMAbstractView</span> view</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Wheel-Events\"><a href=\"#Wheel-Events\" class=\"headerlink\" title=\"Wheel Events\"></a>Wheel Events</h4><p>Event names:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onWheel</span><br></pre></td></tr></table></figure></p>\n<p>Properties:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">number deltaMode</span><br><span class=\"line\">number deltaX</span><br><span class=\"line\">number deltaY</span><br><span class=\"line\">number deltaZ</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Media-Events\"><a href=\"#Media-Events\" class=\"headerlink\" title=\"Media Events\"></a>Media Events</h4><p>Event names:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onAbort onCanPlay onCanPlayThrough onDurationChange onEmptied onEncrypted onEnded onError onLoadedData onLoadedMetadata onLoadStart onPause onPlay onPlaying onProgress onRateChange onSeeked onSeeking onStalled onSuspend onTimeUpdate onVolumeChange onWaiting</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Image-Events\"><a href=\"#Image-Events\" class=\"headerlink\" title=\"Image Events\"></a>Image Events</h4><p>Event names:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onLoad onError</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Animation-Events\"><a href=\"#Animation-Events\" class=\"headerlink\" title=\"Animation Events\"></a>Animation Events</h4><p>Event names:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onAnimationStart onAnimationEnt onAnimationIteration</span><br></pre></td></tr></table></figure></p>\n<p>Properties:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string animationName</span><br><span class=\"line\">string pseudoElement</span><br><span class=\"line\">float elapsedTime</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Transition-Events\"><a href=\"#Transition-Events\" class=\"headerlink\" title=\"Transition Events\"></a>Transition Events</h4><p>Event names:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onTransitionEnd</span><br></pre></td></tr></table></figure></p>\n<p>Properties:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string propertyName</span><br><span class=\"line\">string pseudoElement</span><br><span class=\"line\">float elapsedTime</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本文简要介绍React事件系统中的合成事件(<code>SyntheticEvent</code>)，<code>SyntheticEvent</code>是React对浏览器原生事件跨游览器的封装，和原生事件一样支持<code>stopPropagation()</code>、<code>preventDefault()</code>接口，并且这些接口是跨游览器兼容的。</p>\n</blockquote>","more":"<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><p>如果需要使用浏览器的原生事件，可以通过<code>nativeEvent</code>属性获得。每个<code>SyntheticEvent</code>对象都具有以下属性：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean bubbles</span><br><span class=\"line\">boolean cancelable</span><br><span class=\"line\">boolean defaultPrevented</span><br><span class=\"line\">boolean isTrusted</span><br><span class=\"line\">boolean <span class=\"title function_\">isDefaultPrevented</span>()</span><br><span class=\"line\">boolean <span class=\"title function_\">isPropagationStopped</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">preventDefault</span>()</span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">stopPropagation</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">string type</span><br><span class=\"line\"></span><br><span class=\"line\">number eventPhase</span><br><span class=\"line\">number timeStamp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">DOMEvent</span> nativeEvent</span><br><span class=\"line\"><span class=\"title class_\">DOMEventTarget</span> currentTarget</span><br><span class=\"line\"><span class=\"title class_\">DOMEventTarget</span> target</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><strong><em>注意：</em></strong><br>React v0.14版本，在事件处理程序中返回<code>false</code>并不会停止事件冒泡，取而代之，如果需要应手动触发<code>e.stopPropagation()</code>或<code>e.preventDefault()</code>。</p>\n</blockquote>\n<h3 id=\"事件池-Event-Pooling\"><a href=\"#事件池-Event-Pooling\" class=\"headerlink\" title=\"事件池 (Event Pooling)\"></a>事件池 (<code>Event Pooling</code>)</h3><p><code>SyntheticEvent</code>是池化的，就意味着<code>SyntheticEvent</code>对象将会被重用，且所有属性都会在事件回调被调用后清空（<code>nullified</code>）。这是出于性能考虑，因此，无法异步访问事件。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">onClick</span>(<span class=\"params\">event</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(event); <span class=\"comment\">// =&gt; nullified object.</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(event.<span class=\"property\">type</span>); <span class=\"comment\">// =&gt; &quot;click&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> eventType = event.<span class=\"property\">type</span>; <span class=\"comment\">// =&gt; &quot;click&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(event.<span class=\"property\">type</span>); <span class=\"comment\">// =&gt; null</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(eventType); <span class=\"comment\">// =&gt; &quot;click&quot;</span></span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Won&#x27;t work. this.state.clickEvent will only contain null values.</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;<span class=\"attr\">clickEvent</span>: event&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// You can still export event properties.</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;<span class=\"attr\">eventType</span>: event.<span class=\"property\">type</span>&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p><strong><em>注意：</em></strong><br>如果想异步访问事件属性，需要在事件上调用<code>event.persist()</code>，这会从池中移除<code>SyntheticEvent</code>并允许保留对事件的引用。   </p>\n</blockquote>\n<h3 id=\"支持的事件\"><a href=\"#支持的事件\" class=\"headerlink\" title=\"支持的事件\"></a>支持的事件</h3><p>React将事件统一化，使事件在不同的浏览器上保持一致的属性。<br>以下的事件处理程序在事件冒泡阶段被触发，如果要注册事件捕获程序，在所有的事件名后加上<code>Capture</code>即可，例如，使用<code>onClickCapture</code>来处理捕获阶段的点击事件。   </p>\n<ul>\n<li>Clipboard Events</li>\n<li>Composition Events</li>\n<li>Keyboard Events</li>\n<li>Focus Events</li>\n<li>Form Events</li>\n<li>Mouse Events</li>\n<li>Selection Events</li>\n<li>Touch Events</li>\n<li>UI Events</li>\n<li>Wheel Events</li>\n<li>Media Events</li>\n<li>Image Events</li>\n<li>Animation Events</li>\n<li>Transition Events</li>\n</ul>\n<h4 id=\"Clipboard-Events\"><a href=\"#Clipboard-Events\" class=\"headerlink\" title=\"Clipboard Events\"></a>Clipboard Events</h4><p>Event names:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onCopy onCut onPaste</span><br></pre></td></tr></table></figure></p>\n<p>Properties:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">DOMDataTransfer</span> clipboardData</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Composition-Events\"><a href=\"#Composition-Events\" class=\"headerlink\" title=\"Composition Events\"></a>Composition Events</h4><p>Event names:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onCompositionEnd onCompositionStart onCompositionUpdate</span><br></pre></td></tr></table></figure></p>\n<p>Properties:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string data</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Keyboard-Events\"><a href=\"#Keyboard-Events\" class=\"headerlink\" title=\"Keyboard Events\"></a>Keyboard Events</h4><p>Event names:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onKeyDown onKeyPress onKeyUp</span><br></pre></td></tr></table></figure></p>\n<p>Properties:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean altKey</span><br><span class=\"line\">boolean ctrlKey</span><br><span class=\"line\">boolean <span class=\"title function_\">getModifierState</span>(key)</span><br><span class=\"line\">boolean metaKey</span><br><span class=\"line\">boolean repeat</span><br><span class=\"line\">boolean shiftKey</span><br><span class=\"line\"></span><br><span class=\"line\">number charCode</span><br><span class=\"line\">number keyCode</span><br><span class=\"line\">number location</span><br><span class=\"line\">number which</span><br><span class=\"line\"></span><br><span class=\"line\">string key</span><br><span class=\"line\">string locale</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Focus-Events\"><a href=\"#Focus-Events\" class=\"headerlink\" title=\"Focus Events\"></a>Focus Events</h4><p>Event names:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onFocus onBlur</span><br></pre></td></tr></table></figure><br>These focus events work on all elements in the React DOM, not just form elements.  </p>\n<p>Properties:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">DOMEventTarget</span> relatedTarget</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Form-Events\"><a href=\"#Form-Events\" class=\"headerlink\" title=\"Form Events\"></a>Form Events</h4><p>Event names:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onChange onInput onSubmit</span><br></pre></td></tr></table></figure></p>\n<p>Properties:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">DOMEventTarget</span> relatedTarget</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Mouse-Events\"><a href=\"#Mouse-Events\" class=\"headerlink\" title=\"Mouse Events\"></a>Mouse Events</h4><p>Event names:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onClick onContextMenu onDoubleClick onDrage onDragEnd onDragEnter onDragExit onDragLeave onDragOver onDragStart onDrop onMouseDown onMouseEnter onMouseLeave onMouseMove onMouseOut onMouseOver onMouseUp</span><br></pre></td></tr></table></figure><br>The <code>onMouseEnter</code> and <code>onMouseLeave</code> events propagate from the element being left to the one being entered instead of ordinary bubbling and do not have a capture phase.   </p>\n<p>Properties:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean altKey</span><br><span class=\"line\">boolean ctrlKey</span><br><span class=\"line\">boolean <span class=\"title function_\">getModifierState</span>(key)</span><br><span class=\"line\">boolean metaKey</span><br><span class=\"line\">boolean shiftKey</span><br><span class=\"line\"></span><br><span class=\"line\">number button</span><br><span class=\"line\">number buttons</span><br><span class=\"line\">number clientX</span><br><span class=\"line\">number clientY</span><br><span class=\"line\">number pageX</span><br><span class=\"line\">number pageY</span><br><span class=\"line\">number screenX</span><br><span class=\"line\">number screenY</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">DOMEventTarget</span> relatedTarget</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Selection-Events\"><a href=\"#Selection-Events\" class=\"headerlink\" title=\"Selection Events\"></a>Selection Events</h4><p>Event names:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onSelect</span><br></pre></td></tr></table></figure></p>\n<p>Properties:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">DOMEventTarget</span> relatedTarget</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Touch-Events\"><a href=\"#Touch-Events\" class=\"headerlink\" title=\"Touch Events\"></a>Touch Events</h4><p>Event names:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onTouchCancel onTouchEnd onTouchMove onTouchStart</span><br></pre></td></tr></table></figure></p>\n<p>Properties:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean altKey</span><br><span class=\"line\">boolean <span class=\"title function_\">getModifierState</span>(key)</span><br><span class=\"line\">boolean ctrlKey</span><br><span class=\"line\">boolean metaKey</span><br><span class=\"line\">boolean shiftKey</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">DOMTouchList</span> targetTouches</span><br><span class=\"line\"><span class=\"title class_\">DOMTouchList</span> touches</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"UI-Events\"><a href=\"#UI-Events\" class=\"headerlink\" title=\"UI Events\"></a>UI Events</h4><p>Event names:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onScroll</span><br></pre></td></tr></table></figure></p>\n<p>Properties:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">number detail</span><br><span class=\"line\"><span class=\"title class_\">DOMAbstractView</span> view</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Wheel-Events\"><a href=\"#Wheel-Events\" class=\"headerlink\" title=\"Wheel Events\"></a>Wheel Events</h4><p>Event names:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onWheel</span><br></pre></td></tr></table></figure></p>\n<p>Properties:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">number deltaMode</span><br><span class=\"line\">number deltaX</span><br><span class=\"line\">number deltaY</span><br><span class=\"line\">number deltaZ</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Media-Events\"><a href=\"#Media-Events\" class=\"headerlink\" title=\"Media Events\"></a>Media Events</h4><p>Event names:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onAbort onCanPlay onCanPlayThrough onDurationChange onEmptied onEncrypted onEnded onError onLoadedData onLoadedMetadata onLoadStart onPause onPlay onPlaying onProgress onRateChange onSeeked onSeeking onStalled onSuspend onTimeUpdate onVolumeChange onWaiting</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Image-Events\"><a href=\"#Image-Events\" class=\"headerlink\" title=\"Image Events\"></a>Image Events</h4><p>Event names:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onLoad onError</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Animation-Events\"><a href=\"#Animation-Events\" class=\"headerlink\" title=\"Animation Events\"></a>Animation Events</h4><p>Event names:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onAnimationStart onAnimationEnt onAnimationIteration</span><br></pre></td></tr></table></figure></p>\n<p>Properties:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string animationName</span><br><span class=\"line\">string pseudoElement</span><br><span class=\"line\">float elapsedTime</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"Transition-Events\"><a href=\"#Transition-Events\" class=\"headerlink\" title=\"Transition Events\"></a>Transition Events</h4><p>Event names:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onTransitionEnd</span><br></pre></td></tr></table></figure></p>\n<p>Properties:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string propertyName</span><br><span class=\"line\">string pseudoElement</span><br><span class=\"line\">float elapsedTime</span><br></pre></td></tr></table></figure></p>"},{"layout":"post","title":"关于 Code Review 一点看法","date":"2022-07-14T00:50:00.000Z","_content":"\n> 代码审核机制是一个费时但是颇有成效的工作，本文准备从为什么要做代码审查（Code Review）来分析它的重要性。\n\n<!--more-->\n","source":"_posts/code_review.md","raw":"---\nlayout: post\ntitle: 关于 Code Review 一点看法\ntags: [code,review,代码审核]\ndate: 2022-07-14 08:50:00 +800\n---\n\n> 代码审核机制是一个费时但是颇有成效的工作，本文准备从为什么要做代码审查（Code Review）来分析它的重要性。\n\n<!--more-->\n","slug":"code_review","published":1,"updated":"2022-07-14T01:24:13.236Z","comments":1,"photos":[],"link":"","_id":"cl5lql4db00098ds6c59zaboi","content":"<blockquote>\n<p>代码审核机制是一个费时但是颇有成效的工作，本文准备从为什么要做代码审查（Code Review）来分析它的重要性。</p>\n</blockquote>\n<span id=\"more\"></span>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>代码审核机制是一个费时但是颇有成效的工作，本文准备从为什么要做代码审查（Code Review）来分析它的重要性。</p>\n</blockquote>","more":""},{"layout":"post","title":"contenteditable 使用心得","date":"2017-05-05T03:10:00.000Z","_content":"\n> 本文介绍一些最近新学习的关于contenteditable属性的使用心得。\n\n<!--more-->\n\n## contenteditable 基础\n\n是H5提出的一种新的元素属性，可以让一些不可编辑的元素，如div, p, span等，可以进行编辑。\n\n它的值共包括8种：`\"\"`, `\"true\"`, `\"false\"`, `inherit`, `\"events\"`, `\"caret\"`, `\"typing\"`, `\"plaintext-only\"`。   \n其中，各状态需要注意的点如下：\n* \"\"和\"true\"均表示让元素为可编辑状态\n* \"false\"表示元素不可编辑\n* inherit表示该元素会继承其父元素的状态，也是默认的缺省状态\n* \"events\", \"caret\", \"typing\" 和 \"true\"，这几种状态从左到右具有继承关系，即\"caret\"包含\"events\"属性的所有特性，\"typing\"包含\"caret\"的所有特性，\"true\"包含\"typing\"的所有特性\n* \"plaintext-only\"已不支持\n\n## 事件\n\n* onInput - 当用户键入内容时触发\n* onBlur - 当元素失去焦点时触发\n* onKeyDown - 当用户使用键盘键入时，可获取当前用户按的键\n\n## 相关知识\n\n1. 如何取消contenteditable元素的换行功能\n\n把元素加上onKeyDown事件监听，在事件处事函数中加上对keyCode的判断，若为`13`，即`Enter`键对应的code，则把动作取消即可。实现如下：   \n```JavaScript\nonKeyDown(e) {\n\tif(e.keyCode === 13) {\n\t\te.preventDefault();\n\t}\n}\n```\n2. 如何取消contenteditable元素的粘贴功能\n\n监听onPaste事件，直接取消动作。实现如下：   \n```JavaScript\nonPaste(e) {\n    e.preventDefault();\n}\n```\n3. [如何让contenteditable元素只能输入纯文本](http://www.zhangxinxu.com/wordpress/2016/01/contenteditable-plaintext-only/)\n\n\n参考   \n[W3C ContentEditable](https://w3c.github.io/editing/contentEditable.html)\n","source":"_posts/contenteditable_element.md","raw":"---\nlayout: post\ntitle: contenteditable 使用心得\ntags: [contenteditable,div,p]\ndate: 2017-05-05 11:10:00\n---\n\n> 本文介绍一些最近新学习的关于contenteditable属性的使用心得。\n\n<!--more-->\n\n## contenteditable 基础\n\n是H5提出的一种新的元素属性，可以让一些不可编辑的元素，如div, p, span等，可以进行编辑。\n\n它的值共包括8种：`\"\"`, `\"true\"`, `\"false\"`, `inherit`, `\"events\"`, `\"caret\"`, `\"typing\"`, `\"plaintext-only\"`。   \n其中，各状态需要注意的点如下：\n* \"\"和\"true\"均表示让元素为可编辑状态\n* \"false\"表示元素不可编辑\n* inherit表示该元素会继承其父元素的状态，也是默认的缺省状态\n* \"events\", \"caret\", \"typing\" 和 \"true\"，这几种状态从左到右具有继承关系，即\"caret\"包含\"events\"属性的所有特性，\"typing\"包含\"caret\"的所有特性，\"true\"包含\"typing\"的所有特性\n* \"plaintext-only\"已不支持\n\n## 事件\n\n* onInput - 当用户键入内容时触发\n* onBlur - 当元素失去焦点时触发\n* onKeyDown - 当用户使用键盘键入时，可获取当前用户按的键\n\n## 相关知识\n\n1. 如何取消contenteditable元素的换行功能\n\n把元素加上onKeyDown事件监听，在事件处事函数中加上对keyCode的判断，若为`13`，即`Enter`键对应的code，则把动作取消即可。实现如下：   \n```JavaScript\nonKeyDown(e) {\n\tif(e.keyCode === 13) {\n\t\te.preventDefault();\n\t}\n}\n```\n2. 如何取消contenteditable元素的粘贴功能\n\n监听onPaste事件，直接取消动作。实现如下：   \n```JavaScript\nonPaste(e) {\n    e.preventDefault();\n}\n```\n3. [如何让contenteditable元素只能输入纯文本](http://www.zhangxinxu.com/wordpress/2016/01/contenteditable-plaintext-only/)\n\n\n参考   \n[W3C ContentEditable](https://w3c.github.io/editing/contentEditable.html)\n","slug":"contenteditable_element","published":1,"updated":"2022-07-14T01:23:25.011Z","comments":1,"photos":[],"link":"","_id":"cl5lql4dc000b8ds651wudrm3","content":"<blockquote>\n<p>本文介绍一些最近新学习的关于contenteditable属性的使用心得。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"contenteditable-基础\"><a href=\"#contenteditable-基础\" class=\"headerlink\" title=\"contenteditable 基础\"></a>contenteditable 基础</h2><p>是H5提出的一种新的元素属性，可以让一些不可编辑的元素，如div, p, span等，可以进行编辑。</p>\n<p>它的值共包括8种：<code>&quot;&quot;</code>, <code>&quot;true&quot;</code>, <code>&quot;false&quot;</code>, <code>inherit</code>, <code>&quot;events&quot;</code>, <code>&quot;caret&quot;</code>, <code>&quot;typing&quot;</code>, <code>&quot;plaintext-only&quot;</code>。<br>其中，各状态需要注意的点如下：</p>\n<ul>\n<li>“”和”true”均表示让元素为可编辑状态</li>\n<li>“false”表示元素不可编辑</li>\n<li>inherit表示该元素会继承其父元素的状态，也是默认的缺省状态</li>\n<li>“events”, “caret”, “typing” 和 “true”，这几种状态从左到右具有继承关系，即”caret”包含”events”属性的所有特性，”typing”包含”caret”的所有特性，”true”包含”typing”的所有特性</li>\n<li>“plaintext-only”已不支持</li>\n</ul>\n<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><ul>\n<li>onInput - 当用户键入内容时触发</li>\n<li>onBlur - 当元素失去焦点时触发</li>\n<li>onKeyDown - 当用户使用键盘键入时，可获取当前用户按的键</li>\n</ul>\n<h2 id=\"相关知识\"><a href=\"#相关知识\" class=\"headerlink\" title=\"相关知识\"></a>相关知识</h2><ol>\n<li>如何取消contenteditable元素的换行功能</li>\n</ol>\n<p>把元素加上onKeyDown事件监听，在事件处事函数中加上对keyCode的判断，若为<code>13</code>，即<code>Enter</code>键对应的code，则把动作取消即可。实现如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">onKeyDown</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(e.<span class=\"property\">keyCode</span> === <span class=\"number\">13</span>) &#123;</span><br><span class=\"line\">\t\te.<span class=\"title function_\">preventDefault</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"2\">\n<li>如何取消contenteditable元素的粘贴功能</li>\n</ol>\n<p>监听onPaste事件，直接取消动作。实现如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">onPaste</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    e.<span class=\"title function_\">preventDefault</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"3\">\n<li><a href=\"http://www.zhangxinxu.com/wordpress/2016/01/contenteditable-plaintext-only/\">如何让contenteditable元素只能输入纯文本</a></li>\n</ol>\n<p>参考<br><a href=\"https://w3c.github.io/editing/contentEditable.html\">W3C ContentEditable</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本文介绍一些最近新学习的关于contenteditable属性的使用心得。</p>\n</blockquote>","more":"<h2 id=\"contenteditable-基础\"><a href=\"#contenteditable-基础\" class=\"headerlink\" title=\"contenteditable 基础\"></a>contenteditable 基础</h2><p>是H5提出的一种新的元素属性，可以让一些不可编辑的元素，如div, p, span等，可以进行编辑。</p>\n<p>它的值共包括8种：<code>&quot;&quot;</code>, <code>&quot;true&quot;</code>, <code>&quot;false&quot;</code>, <code>inherit</code>, <code>&quot;events&quot;</code>, <code>&quot;caret&quot;</code>, <code>&quot;typing&quot;</code>, <code>&quot;plaintext-only&quot;</code>。<br>其中，各状态需要注意的点如下：</p>\n<ul>\n<li>“”和”true”均表示让元素为可编辑状态</li>\n<li>“false”表示元素不可编辑</li>\n<li>inherit表示该元素会继承其父元素的状态，也是默认的缺省状态</li>\n<li>“events”, “caret”, “typing” 和 “true”，这几种状态从左到右具有继承关系，即”caret”包含”events”属性的所有特性，”typing”包含”caret”的所有特性，”true”包含”typing”的所有特性</li>\n<li>“plaintext-only”已不支持</li>\n</ul>\n<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><ul>\n<li>onInput - 当用户键入内容时触发</li>\n<li>onBlur - 当元素失去焦点时触发</li>\n<li>onKeyDown - 当用户使用键盘键入时，可获取当前用户按的键</li>\n</ul>\n<h2 id=\"相关知识\"><a href=\"#相关知识\" class=\"headerlink\" title=\"相关知识\"></a>相关知识</h2><ol>\n<li>如何取消contenteditable元素的换行功能</li>\n</ol>\n<p>把元素加上onKeyDown事件监听，在事件处事函数中加上对keyCode的判断，若为<code>13</code>，即<code>Enter</code>键对应的code，则把动作取消即可。实现如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">onKeyDown</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(e.<span class=\"property\">keyCode</span> === <span class=\"number\">13</span>) &#123;</span><br><span class=\"line\">\t\te.<span class=\"title function_\">preventDefault</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"2\">\n<li>如何取消contenteditable元素的粘贴功能</li>\n</ol>\n<p>监听onPaste事件，直接取消动作。实现如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">onPaste</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">    e.<span class=\"title function_\">preventDefault</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"3\">\n<li><a href=\"http://www.zhangxinxu.com/wordpress/2016/01/contenteditable-plaintext-only/\">如何让contenteditable元素只能输入纯文本</a></li>\n</ol>\n<p>参考<br><a href=\"https://w3c.github.io/editing/contentEditable.html\">W3C ContentEditable</a></p>"},{"layout":"post","title":"如何在Windows git bash中拷贝文件内容","date":"2016-07-22T03:40:00.000Z","_content":"\n> 在Win7中，很多人喜欢下载git bash终端，本文记录如何在shell中快速拷贝/粘贴一个文件的内容。\n\n<!--more-->\n\n## 拷贝文件\n\n```shell\n$ cat filename > /dev/clipboard\n```\n\n## 粘贴剪贴板内容到文件\n\n```shell\n$ cat /dev/clipboard > filename\n```\n\n## 查看剪贴板内容\n\n```shell\n$ cat /dev/clipboard\n```\n","source":"_posts/copy_paste_in_Windows_git_bash.md","raw":"---\nlayout: post\ntitle: 如何在Windows git bash中拷贝文件内容\ntags: [git,bash,win7]\ndate: 2016-07-22 11:40:00 +800\n---\n\n> 在Win7中，很多人喜欢下载git bash终端，本文记录如何在shell中快速拷贝/粘贴一个文件的内容。\n\n<!--more-->\n\n## 拷贝文件\n\n```shell\n$ cat filename > /dev/clipboard\n```\n\n## 粘贴剪贴板内容到文件\n\n```shell\n$ cat /dev/clipboard > filename\n```\n\n## 查看剪贴板内容\n\n```shell\n$ cat /dev/clipboard\n```\n","slug":"copy_paste_in_Windows_git_bash","published":1,"updated":"2022-07-14T01:23:25.011Z","comments":1,"photos":[],"link":"","_id":"cl5lql4dd000c8ds6hpcuh3nz","content":"<blockquote>\n<p>在Win7中，很多人喜欢下载git bash终端，本文记录如何在shell中快速拷贝/粘贴一个文件的内容。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"拷贝文件\"><a href=\"#拷贝文件\" class=\"headerlink\" title=\"拷贝文件\"></a>拷贝文件</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cat</span> filename &gt; /dev/clipboard</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"粘贴剪贴板内容到文件\"><a href=\"#粘贴剪贴板内容到文件\" class=\"headerlink\" title=\"粘贴剪贴板内容到文件\"></a>粘贴剪贴板内容到文件</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cat</span> /dev/clipboard &gt; filename</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"查看剪贴板内容\"><a href=\"#查看剪贴板内容\" class=\"headerlink\" title=\"查看剪贴板内容\"></a>查看剪贴板内容</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cat</span> /dev/clipboard</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>在Win7中，很多人喜欢下载git bash终端，本文记录如何在shell中快速拷贝/粘贴一个文件的内容。</p>\n</blockquote>","more":"<h2 id=\"拷贝文件\"><a href=\"#拷贝文件\" class=\"headerlink\" title=\"拷贝文件\"></a>拷贝文件</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cat</span> filename &gt; /dev/clipboard</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"粘贴剪贴板内容到文件\"><a href=\"#粘贴剪贴板内容到文件\" class=\"headerlink\" title=\"粘贴剪贴板内容到文件\"></a>粘贴剪贴板内容到文件</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cat</span> /dev/clipboard &gt; filename</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"查看剪贴板内容\"><a href=\"#查看剪贴板内容\" class=\"headerlink\" title=\"查看剪贴板内容\"></a>查看剪贴板内容</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">cat</span> /dev/clipboard</span></span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"Hello, Jekyll and TchTheme","date":"2015-01-01T01:22:30.000Z","eye_catch":"https://jekyllrb.com/img/logo-2x.png","_content":"\nYou can use most of standard Markdown features.\n\n## List\n\n* foo\n* bar\n    * indentation\n        * nesting indentation\n    * indentation\n* buz\n\n<!--more-->\n\n## Quote\n\n> quote\n>\n> > nesting quote\n>\n> quote\n\n## Strikethrough\n\n~~Mistaken text.~~\n\n## Syntax highlighting\n\n```php\n<?php\necho 'Hello, World!';\n```\n\n## Tables\n\nFirst Header  | Second Header\n------------- | -------------\nContent Cell  | Content Cell\nContent Cell  | Content Cell\n\n## Emoji\n\nYou can use GitHub flavored emoji :+1:\n\n> **Note**  \n> It's not a very good idea to use emoji before `<!--more-->` because jekyll can't render emoji in the excerpted content.\n\n## See also\n\n[Markdown](http://daringfireball.net/projects/markdown/syntax)\n","source":"_posts/hello.md","raw":"---\nlayout: post\ntitle: Hello, Jekyll and TchTheme\ntags: [hello,jekyll,theme]\ndate: 2015-01-01 09:22:30 +800\neye_catch: https://jekyllrb.com/img/logo-2x.png\n---\n\nYou can use most of standard Markdown features.\n\n## List\n\n* foo\n* bar\n    * indentation\n        * nesting indentation\n    * indentation\n* buz\n\n<!--more-->\n\n## Quote\n\n> quote\n>\n> > nesting quote\n>\n> quote\n\n## Strikethrough\n\n~~Mistaken text.~~\n\n## Syntax highlighting\n\n```php\n<?php\necho 'Hello, World!';\n```\n\n## Tables\n\nFirst Header  | Second Header\n------------- | -------------\nContent Cell  | Content Cell\nContent Cell  | Content Cell\n\n## Emoji\n\nYou can use GitHub flavored emoji :+1:\n\n> **Note**  \n> It's not a very good idea to use emoji before `<!--more-->` because jekyll can't render emoji in the excerpted content.\n\n## See also\n\n[Markdown](http://daringfireball.net/projects/markdown/syntax)\n","slug":"hello","published":1,"updated":"2022-07-14T01:23:25.012Z","comments":1,"photos":[],"link":"","_id":"cl5lql4de000e8ds68vmg1tbg","content":"<p>You can use most of standard Markdown features.</p>\n<h2 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h2><ul>\n<li>foo</li>\n<li>bar<ul>\n<li>indentation<ul>\n<li>nesting indentation</li>\n</ul>\n</li>\n<li>indentation</li>\n</ul>\n</li>\n<li>buz</li>\n</ul>\n<span id=\"more\"></span>\n<h2 id=\"Quote\"><a href=\"#Quote\" class=\"headerlink\" title=\"Quote\"></a>Quote</h2><blockquote>\n<p>quote</p>\n<blockquote>\n<p>nesting quote</p>\n</blockquote>\n<p>quote</p>\n</blockquote>\n<h2 id=\"Strikethrough\"><a href=\"#Strikethrough\" class=\"headerlink\" title=\"Strikethrough\"></a>Strikethrough</h2><p><del>Mistaken text.</del></p>\n<h2 id=\"Syntax-highlighting\"><a href=\"#Syntax-highlighting\" class=\"headerlink\" title=\"Syntax highlighting\"></a>Syntax highlighting</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&#x27;Hello, World!&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Tables\"><a href=\"#Tables\" class=\"headerlink\" title=\"Tables\"></a>Tables</h2><table>\n<thead>\n<tr>\n<th>First Header</th>\n<th>Second Header</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n<tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Emoji\"><a href=\"#Emoji\" class=\"headerlink\" title=\"Emoji\"></a>Emoji</h2><p>You can use GitHub flavored emoji :+1:</p>\n<blockquote>\n<p><strong>Note</strong><br>It’s not a very good idea to use emoji before <code>&lt;!--more--&gt;</code> because jekyll can’t render emoji in the excerpted content.</p>\n</blockquote>\n<h2 id=\"See-also\"><a href=\"#See-also\" class=\"headerlink\" title=\"See also\"></a>See also</h2><p><a href=\"http://daringfireball.net/projects/markdown/syntax\">Markdown</a></p>\n","site":{"data":{}},"excerpt":"<p>You can use most of standard Markdown features.</p>\n<h2 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h2><ul>\n<li>foo</li>\n<li>bar<ul>\n<li>indentation<ul>\n<li>nesting indentation</li>\n</ul>\n</li>\n<li>indentation</li>\n</ul>\n</li>\n<li>buz</li>\n</ul>","more":"<h2 id=\"Quote\"><a href=\"#Quote\" class=\"headerlink\" title=\"Quote\"></a>Quote</h2><blockquote>\n<p>quote</p>\n<blockquote>\n<p>nesting quote</p>\n</blockquote>\n<p>quote</p>\n</blockquote>\n<h2 id=\"Strikethrough\"><a href=\"#Strikethrough\" class=\"headerlink\" title=\"Strikethrough\"></a>Strikethrough</h2><p><del>Mistaken text.</del></p>\n<h2 id=\"Syntax-highlighting\"><a href=\"#Syntax-highlighting\" class=\"headerlink\" title=\"Syntax highlighting\"></a>Syntax highlighting</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">&#x27;Hello, World!&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Tables\"><a href=\"#Tables\" class=\"headerlink\" title=\"Tables\"></a>Tables</h2><table>\n<thead>\n<tr>\n<th>First Header</th>\n<th>Second Header</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n<tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Emoji\"><a href=\"#Emoji\" class=\"headerlink\" title=\"Emoji\"></a>Emoji</h2><p>You can use GitHub flavored emoji :+1:</p>\n<blockquote>\n<p><strong>Note</strong><br>It’s not a very good idea to use emoji before <code>&lt;!--more--&gt;</code> because jekyll can’t render emoji in the excerpted content.</p>\n</blockquote>\n<h2 id=\"See-also\"><a href=\"#See-also\" class=\"headerlink\" title=\"See also\"></a>See also</h2><p><a href=\"http://daringfireball.net/projects/markdown/syntax\">Markdown</a></p>"},{"layout":"post","title":"Win7 Git bash 出现Permission denied (publickey)错误","date":"2016-07-22T05:50:00.000Z","_content":"\n> Windows用户的多数程序员喜欢安装Git bash，用命令行控制。最近发现如果要操作多个git repos，需要生成多个MD5密钥。在执行git操作时需要指定使用哪个密码，通过以下设置可以实现。\n\n<!--more-->\n\n### Check that you are connecting to the correct server\n\n使用下面的命令检查是否连接到正确的domain：\n\n```bash\n$ ssh -vT ssh -vT git@github.com\nOpenSSH_7.1p2, OpenSSL 1.0.2h  3 May 2016\ndebug1: Reading configuration data /c/Users/Amy Zhao/.ssh/config\ndebug1: Reading configuration data /etc/ssh/ssh_config\ndebug1: Connecting to github.com [192.30.253.112] port 22.\ndebug1: Connection established.\ndebug1: key_load_public: No such file or directory\ndebug1: identity file /c/Users/Amy Zhao/.ssh/id_rsa type -1\ndebug1: key_load_public: No such file or directory\n...\n```\n\n### Always use the \"git\" user\n\nAll connections must be made as the \"git\" user. If you try to connect with your GitHub username, it will fail:\n\n```bash\n$ ssh -T billy.anyteen@github.com\nPermission denied (publickey)\n```\n\nInstead, you should verify your connection by typing:\n\n```bash\n$ ssh -T git@github.com\nHi your_username! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n### Make sure you have a key that is being used\n\nFirst, you should turn on ssh-agent:\n\n```bash\n# start the ssh-agent in the background\n$ eval \"$(ssh-agent -s)\"\nAgent pid 15192\n```\n\nVerify that you have a private key generated and loaded into SSH. If you're using OpenSSH 6.7 or older, typing:\n\n```bash\n$ ssh-add -l\n2048 a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/you/.ssh/id_rsa (RSA)\n```\n\nOr if you're using OpenSSH 6.8 or newer:\n\n```bash\n$ ssh-add -l -E md5\n2048 MD5:a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/you/.ssh/id_rsa (RSA)\n```\n\nThe `ssh-add` command should print out a long string of numbers and letters. If it doesn't print anything, you'll need to [generate a new SSH key][generate SSH keys] and associate it the GitHub.\n\n***Tip: On most systems the default private keys (~/.ssh/id_rsa, ~/.ssh/id_dsa and ~/.ssh/identity) are automatically added to the SSH authentication agent. You shouldn't need to run ssh-add path/to/key unless you override the file name when you generate a key.***\n\n\n## Auto-launching ssh-agent on Git for Windows\n\nIf you want to auto-start ssh-agent and add the private key you wanted, you can config your `~/.bashrc` file like below:\n\n```bash\nenv=~/.ssh/agent.env\n\nagent_load_env () { test -f \"$env\" && . \"$env\" >| /dev/null ; }\n\nagent_start () {\n    (umask 077; ssh-agent >| \"$env\")\n    . \"$env\" >| /dev/null ; }\n\nagent_load_env\n\n# agent_run_state: 0=agent running w/ key; 1=agent w/o key; 2= agent not running\nagent_run_state=$(ssh-add -l >| /dev/null 2>&1; echo $?)\n\nif [ ! \"$SSH_AUTH_SOCK\" ] || [ $agent_run_state = 2 ]; then\n    agent_start\n    ssh-add ~/.ssh/github-amy\n    ssh-add ~/.ssh/github_rsa\nelif [ \"$SSH_AUTH_SOCK\" ] && [ $agent_run_state = 1 ]; then\n    ssh-add ~/.ssh/github-amy\n    ssh-add ~/.ssh/github_rsa\nfi\n\nunset env\n```\n\n***Tip: If your private keys are not stored in ~/.ssh/id_rsa or ~/.ssh/id_dsa, you must add their paths with the ssh-add command so that your SSH authentication agent knows where to find them. For example: `ssh-add ~/.my_other_ssh/id_rsa` ***\n\nNow, when you first run Git Bash, your ssh-agent and identities was started automatically.\nThe `ssh-agent` process will continue to run until you log out, shut down your computer or kill the process.\n\nIf you want `ssh-agent` to forget your key after some time, you can configure it to do so by running `ssh-add -t <seconds>`.\n\n## 参考\n\n#### GitHub Help\n[Working with SSH key passphrases](https://help.github.com/articles/working-with-ssh-key-passphrases/)   \n[Error: Permission denied (publickey)](https://help.github.com/articles/error-permission-denied-publickey/)\n","source":"_posts/git_clone_multiple_repos.md","raw":"---\nlayout: post\ntitle: Win7 Git bash 出现Permission denied (publickey)错误\ntags: [shell,git,bash,github,permission]\ndate: 2016-07-22 13:50:00 +800\n---\n\n> Windows用户的多数程序员喜欢安装Git bash，用命令行控制。最近发现如果要操作多个git repos，需要生成多个MD5密钥。在执行git操作时需要指定使用哪个密码，通过以下设置可以实现。\n\n<!--more-->\n\n### Check that you are connecting to the correct server\n\n使用下面的命令检查是否连接到正确的domain：\n\n```bash\n$ ssh -vT ssh -vT git@github.com\nOpenSSH_7.1p2, OpenSSL 1.0.2h  3 May 2016\ndebug1: Reading configuration data /c/Users/Amy Zhao/.ssh/config\ndebug1: Reading configuration data /etc/ssh/ssh_config\ndebug1: Connecting to github.com [192.30.253.112] port 22.\ndebug1: Connection established.\ndebug1: key_load_public: No such file or directory\ndebug1: identity file /c/Users/Amy Zhao/.ssh/id_rsa type -1\ndebug1: key_load_public: No such file or directory\n...\n```\n\n### Always use the \"git\" user\n\nAll connections must be made as the \"git\" user. If you try to connect with your GitHub username, it will fail:\n\n```bash\n$ ssh -T billy.anyteen@github.com\nPermission denied (publickey)\n```\n\nInstead, you should verify your connection by typing:\n\n```bash\n$ ssh -T git@github.com\nHi your_username! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n### Make sure you have a key that is being used\n\nFirst, you should turn on ssh-agent:\n\n```bash\n# start the ssh-agent in the background\n$ eval \"$(ssh-agent -s)\"\nAgent pid 15192\n```\n\nVerify that you have a private key generated and loaded into SSH. If you're using OpenSSH 6.7 or older, typing:\n\n```bash\n$ ssh-add -l\n2048 a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/you/.ssh/id_rsa (RSA)\n```\n\nOr if you're using OpenSSH 6.8 or newer:\n\n```bash\n$ ssh-add -l -E md5\n2048 MD5:a0:dd:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/you/.ssh/id_rsa (RSA)\n```\n\nThe `ssh-add` command should print out a long string of numbers and letters. If it doesn't print anything, you'll need to [generate a new SSH key][generate SSH keys] and associate it the GitHub.\n\n***Tip: On most systems the default private keys (~/.ssh/id_rsa, ~/.ssh/id_dsa and ~/.ssh/identity) are automatically added to the SSH authentication agent. You shouldn't need to run ssh-add path/to/key unless you override the file name when you generate a key.***\n\n\n## Auto-launching ssh-agent on Git for Windows\n\nIf you want to auto-start ssh-agent and add the private key you wanted, you can config your `~/.bashrc` file like below:\n\n```bash\nenv=~/.ssh/agent.env\n\nagent_load_env () { test -f \"$env\" && . \"$env\" >| /dev/null ; }\n\nagent_start () {\n    (umask 077; ssh-agent >| \"$env\")\n    . \"$env\" >| /dev/null ; }\n\nagent_load_env\n\n# agent_run_state: 0=agent running w/ key; 1=agent w/o key; 2= agent not running\nagent_run_state=$(ssh-add -l >| /dev/null 2>&1; echo $?)\n\nif [ ! \"$SSH_AUTH_SOCK\" ] || [ $agent_run_state = 2 ]; then\n    agent_start\n    ssh-add ~/.ssh/github-amy\n    ssh-add ~/.ssh/github_rsa\nelif [ \"$SSH_AUTH_SOCK\" ] && [ $agent_run_state = 1 ]; then\n    ssh-add ~/.ssh/github-amy\n    ssh-add ~/.ssh/github_rsa\nfi\n\nunset env\n```\n\n***Tip: If your private keys are not stored in ~/.ssh/id_rsa or ~/.ssh/id_dsa, you must add their paths with the ssh-add command so that your SSH authentication agent knows where to find them. For example: `ssh-add ~/.my_other_ssh/id_rsa` ***\n\nNow, when you first run Git Bash, your ssh-agent and identities was started automatically.\nThe `ssh-agent` process will continue to run until you log out, shut down your computer or kill the process.\n\nIf you want `ssh-agent` to forget your key after some time, you can configure it to do so by running `ssh-add -t <seconds>`.\n\n## 参考\n\n#### GitHub Help\n[Working with SSH key passphrases](https://help.github.com/articles/working-with-ssh-key-passphrases/)   \n[Error: Permission denied (publickey)](https://help.github.com/articles/error-permission-denied-publickey/)\n","slug":"git_clone_multiple_repos","published":1,"updated":"2022-07-14T01:23:25.012Z","comments":1,"photos":[],"link":"","_id":"cl5lql4df000f8ds691tm4k7p","content":"<blockquote>\n<p>Windows用户的多数程序员喜欢安装Git bash，用命令行控制。最近发现如果要操作多个git repos，需要生成多个MD5密钥。在执行git操作时需要指定使用哪个密码，通过以下设置可以实现。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h3 id=\"Check-that-you-are-connecting-to-the-correct-server\"><a href=\"#Check-that-you-are-connecting-to-the-correct-server\" class=\"headerlink\" title=\"Check that you are connecting to the correct server\"></a>Check that you are connecting to the correct server</h3><p>使用下面的命令检查是否连接到正确的domain：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -vT ssh -vT git@github.com</span><br><span class=\"line\">OpenSSH_7.1p2, OpenSSL 1.0.2h  3 May 2016</span><br><span class=\"line\">debug1: Reading configuration data /c/Users/Amy Zhao/.ssh/config</span><br><span class=\"line\">debug1: Reading configuration data /etc/ssh/ssh_config</span><br><span class=\"line\">debug1: Connecting to github.com [192.30.253.112] port 22.</span><br><span class=\"line\">debug1: Connection established.</span><br><span class=\"line\">debug1: key_load_public: No such file or directory</span><br><span class=\"line\">debug1: identity file /c/Users/Amy Zhao/.ssh/id_rsa <span class=\"built_in\">type</span> -1</span><br><span class=\"line\">debug1: key_load_public: No such file or directory</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h3 id=\"Always-use-the-“git”-user\"><a href=\"#Always-use-the-“git”-user\" class=\"headerlink\" title=\"Always use the “git” user\"></a>Always use the “git” user</h3><p>All connections must be made as the “git” user. If you try to connect with your GitHub username, it will fail:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T billy.anyteen@github.com</span><br><span class=\"line\">Permission denied (publickey)</span><br></pre></td></tr></table></figure>\n<p>Instead, you should verify your connection by typing:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br><span class=\"line\">Hi your_username! You<span class=\"string\">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Make-sure-you-have-a-key-that-is-being-used\"><a href=\"#Make-sure-you-have-a-key-that-is-being-used\" class=\"headerlink\" title=\"Make sure you have a key that is being used\"></a>Make sure you have a key that is being used</h3><p>First, you should turn on ssh-agent:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># start the ssh-agent in the background</span></span><br><span class=\"line\">$ <span class=\"built_in\">eval</span> <span class=\"string\">&quot;<span class=\"subst\">$(ssh-agent -s)</span>&quot;</span></span><br><span class=\"line\">Agent pid 15192</span><br></pre></td></tr></table></figure>\n<p>Verify that you have a private key generated and loaded into SSH. If you’re using OpenSSH 6.7 or older, typing:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-add -l</span><br><span class=\"line\">2048 a0:<span class=\"built_in\">dd</span>:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/you/.ssh/id_rsa (RSA)</span><br></pre></td></tr></table></figure>\n<p>Or if you’re using OpenSSH 6.8 or newer:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-add -l -E md5</span><br><span class=\"line\">2048 MD5:a0:<span class=\"built_in\">dd</span>:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/you/.ssh/id_rsa (RSA)</span><br></pre></td></tr></table></figure>\n<p>The <code>ssh-add</code> command should print out a long string of numbers and letters. If it doesn’t print anything, you’ll need to [generate a new SSH key][generate SSH keys] and associate it the GitHub.</p>\n<p><strong><em>Tip: On most systems the default private keys (~/.ssh/id_rsa, ~/.ssh/id_dsa and ~/.ssh/identity) are automatically added to the SSH authentication agent. You shouldn’t need to run ssh-add path/to/key unless you override the file name when you generate a key.</em></strong></p>\n<h2 id=\"Auto-launching-ssh-agent-on-Git-for-Windows\"><a href=\"#Auto-launching-ssh-agent-on-Git-for-Windows\" class=\"headerlink\" title=\"Auto-launching ssh-agent on Git for Windows\"></a>Auto-launching ssh-agent on Git for Windows</h2><p>If you want to auto-start ssh-agent and add the private key you wanted, you can config your <code>~/.bashrc</code> file like below:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">env</span>=~/.ssh/agent.env</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">agent_load_env</span></span> () &#123; <span class=\"built_in\">test</span> -f <span class=\"string\">&quot;<span class=\"variable\">$env</span>&quot;</span> &amp;&amp; . <span class=\"string\">&quot;<span class=\"variable\">$env</span>&quot;</span> &gt;| /dev/null ; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">agent_start</span></span> () &#123;</span><br><span class=\"line\">    (<span class=\"built_in\">umask</span> 077; ssh-agent &gt;| <span class=\"string\">&quot;<span class=\"variable\">$env</span>&quot;</span>)</span><br><span class=\"line\">    . <span class=\"string\">&quot;<span class=\"variable\">$env</span>&quot;</span> &gt;| /dev/null ; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">agent_load_env</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># agent_run_state: 0=agent running w/ key; 1=agent w/o key; 2= agent not running</span></span><br><span class=\"line\">agent_run_state=$(ssh-add -l &gt;| /dev/null 2&gt;&amp;1; <span class=\"built_in\">echo</span> $?)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ ! <span class=\"string\">&quot;<span class=\"variable\">$SSH_AUTH_SOCK</span>&quot;</span> ] || [ <span class=\"variable\">$agent_run_state</span> = 2 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    agent_start</span><br><span class=\"line\">    ssh-add ~/.ssh/github-amy</span><br><span class=\"line\">    ssh-add ~/.ssh/github_rsa</span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ <span class=\"string\">&quot;<span class=\"variable\">$SSH_AUTH_SOCK</span>&quot;</span> ] &amp;&amp; [ <span class=\"variable\">$agent_run_state</span> = 1 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    ssh-add ~/.ssh/github-amy</span><br><span class=\"line\">    ssh-add ~/.ssh/github_rsa</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">unset</span> <span class=\"built_in\">env</span></span><br></pre></td></tr></table></figure>\n<p><strong><em>Tip: If your private keys are not stored in ~/.ssh/id_rsa or ~/.ssh/id_dsa, you must add their paths with the ssh-add command so that your SSH authentication agent knows where to find them. For example: <code>ssh-add ~/.my_other_ssh/id_rsa</code> </em></strong></p>\n<p>Now, when you first run Git Bash, your ssh-agent and identities was started automatically.<br>The <code>ssh-agent</code> process will continue to run until you log out, shut down your computer or kill the process.</p>\n<p>If you want <code>ssh-agent</code> to forget your key after some time, you can configure it to do so by running <code>ssh-add -t &lt;seconds&gt;</code>.</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><h4 id=\"GitHub-Help\"><a href=\"#GitHub-Help\" class=\"headerlink\" title=\"GitHub Help\"></a>GitHub Help</h4><p><a href=\"https://help.github.com/articles/working-with-ssh-key-passphrases/\">Working with SSH key passphrases</a><br><a href=\"https://help.github.com/articles/error-permission-denied-publickey/\">Error: Permission denied (publickey)</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>Windows用户的多数程序员喜欢安装Git bash，用命令行控制。最近发现如果要操作多个git repos，需要生成多个MD5密钥。在执行git操作时需要指定使用哪个密码，通过以下设置可以实现。</p>\n</blockquote>","more":"<h3 id=\"Check-that-you-are-connecting-to-the-correct-server\"><a href=\"#Check-that-you-are-connecting-to-the-correct-server\" class=\"headerlink\" title=\"Check that you are connecting to the correct server\"></a>Check that you are connecting to the correct server</h3><p>使用下面的命令检查是否连接到正确的domain：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -vT ssh -vT git@github.com</span><br><span class=\"line\">OpenSSH_7.1p2, OpenSSL 1.0.2h  3 May 2016</span><br><span class=\"line\">debug1: Reading configuration data /c/Users/Amy Zhao/.ssh/config</span><br><span class=\"line\">debug1: Reading configuration data /etc/ssh/ssh_config</span><br><span class=\"line\">debug1: Connecting to github.com [192.30.253.112] port 22.</span><br><span class=\"line\">debug1: Connection established.</span><br><span class=\"line\">debug1: key_load_public: No such file or directory</span><br><span class=\"line\">debug1: identity file /c/Users/Amy Zhao/.ssh/id_rsa <span class=\"built_in\">type</span> -1</span><br><span class=\"line\">debug1: key_load_public: No such file or directory</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h3 id=\"Always-use-the-“git”-user\"><a href=\"#Always-use-the-“git”-user\" class=\"headerlink\" title=\"Always use the “git” user\"></a>Always use the “git” user</h3><p>All connections must be made as the “git” user. If you try to connect with your GitHub username, it will fail:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T billy.anyteen@github.com</span><br><span class=\"line\">Permission denied (publickey)</span><br></pre></td></tr></table></figure>\n<p>Instead, you should verify your connection by typing:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br><span class=\"line\">Hi your_username! You<span class=\"string\">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Make-sure-you-have-a-key-that-is-being-used\"><a href=\"#Make-sure-you-have-a-key-that-is-being-used\" class=\"headerlink\" title=\"Make sure you have a key that is being used\"></a>Make sure you have a key that is being used</h3><p>First, you should turn on ssh-agent:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># start the ssh-agent in the background</span></span><br><span class=\"line\">$ <span class=\"built_in\">eval</span> <span class=\"string\">&quot;<span class=\"subst\">$(ssh-agent -s)</span>&quot;</span></span><br><span class=\"line\">Agent pid 15192</span><br></pre></td></tr></table></figure>\n<p>Verify that you have a private key generated and loaded into SSH. If you’re using OpenSSH 6.7 or older, typing:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-add -l</span><br><span class=\"line\">2048 a0:<span class=\"built_in\">dd</span>:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/you/.ssh/id_rsa (RSA)</span><br></pre></td></tr></table></figure>\n<p>Or if you’re using OpenSSH 6.8 or newer:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-add -l -E md5</span><br><span class=\"line\">2048 MD5:a0:<span class=\"built_in\">dd</span>:42:3c:5a:9d:e4:2a:21:52:4e:78:07:6e:c8:4d /Users/you/.ssh/id_rsa (RSA)</span><br></pre></td></tr></table></figure>\n<p>The <code>ssh-add</code> command should print out a long string of numbers and letters. If it doesn’t print anything, you’ll need to [generate a new SSH key][generate SSH keys] and associate it the GitHub.</p>\n<p><strong><em>Tip: On most systems the default private keys (~/.ssh/id_rsa, ~/.ssh/id_dsa and ~/.ssh/identity) are automatically added to the SSH authentication agent. You shouldn’t need to run ssh-add path/to/key unless you override the file name when you generate a key.</em></strong></p>\n<h2 id=\"Auto-launching-ssh-agent-on-Git-for-Windows\"><a href=\"#Auto-launching-ssh-agent-on-Git-for-Windows\" class=\"headerlink\" title=\"Auto-launching ssh-agent on Git for Windows\"></a>Auto-launching ssh-agent on Git for Windows</h2><p>If you want to auto-start ssh-agent and add the private key you wanted, you can config your <code>~/.bashrc</code> file like below:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">env</span>=~/.ssh/agent.env</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">agent_load_env</span></span> () &#123; <span class=\"built_in\">test</span> -f <span class=\"string\">&quot;<span class=\"variable\">$env</span>&quot;</span> &amp;&amp; . <span class=\"string\">&quot;<span class=\"variable\">$env</span>&quot;</span> &gt;| /dev/null ; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">agent_start</span></span> () &#123;</span><br><span class=\"line\">    (<span class=\"built_in\">umask</span> 077; ssh-agent &gt;| <span class=\"string\">&quot;<span class=\"variable\">$env</span>&quot;</span>)</span><br><span class=\"line\">    . <span class=\"string\">&quot;<span class=\"variable\">$env</span>&quot;</span> &gt;| /dev/null ; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">agent_load_env</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># agent_run_state: 0=agent running w/ key; 1=agent w/o key; 2= agent not running</span></span><br><span class=\"line\">agent_run_state=$(ssh-add -l &gt;| /dev/null 2&gt;&amp;1; <span class=\"built_in\">echo</span> $?)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ ! <span class=\"string\">&quot;<span class=\"variable\">$SSH_AUTH_SOCK</span>&quot;</span> ] || [ <span class=\"variable\">$agent_run_state</span> = 2 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    agent_start</span><br><span class=\"line\">    ssh-add ~/.ssh/github-amy</span><br><span class=\"line\">    ssh-add ~/.ssh/github_rsa</span><br><span class=\"line\"><span class=\"keyword\">elif</span> [ <span class=\"string\">&quot;<span class=\"variable\">$SSH_AUTH_SOCK</span>&quot;</span> ] &amp;&amp; [ <span class=\"variable\">$agent_run_state</span> = 1 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    ssh-add ~/.ssh/github-amy</span><br><span class=\"line\">    ssh-add ~/.ssh/github_rsa</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">unset</span> <span class=\"built_in\">env</span></span><br></pre></td></tr></table></figure>\n<p><strong><em>Tip: If your private keys are not stored in ~/.ssh/id_rsa or ~/.ssh/id_dsa, you must add their paths with the ssh-add command so that your SSH authentication agent knows where to find them. For example: <code>ssh-add ~/.my_other_ssh/id_rsa</code> </em></strong></p>\n<p>Now, when you first run Git Bash, your ssh-agent and identities was started automatically.<br>The <code>ssh-agent</code> process will continue to run until you log out, shut down your computer or kill the process.</p>\n<p>If you want <code>ssh-agent</code> to forget your key after some time, you can configure it to do so by running <code>ssh-add -t &lt;seconds&gt;</code>.</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><h4 id=\"GitHub-Help\"><a href=\"#GitHub-Help\" class=\"headerlink\" title=\"GitHub Help\"></a>GitHub Help</h4><p><a href=\"https://help.github.com/articles/working-with-ssh-key-passphrases/\">Working with SSH key passphrases</a><br><a href=\"https://help.github.com/articles/error-permission-denied-publickey/\">Error: Permission denied (publickey)</a></p>"},{"layout":"post","title":"ES6 Class","date":"2016-07-28T12:10:00.000Z","_content":"\n> 从ES6（ES2015）开始，JS提出了类（Class）概念，JS中的类只是JS现有的、基于原型的继承的一种语法包装（语法糖），它能让我们用理简明的语法实现继承。\n\n<!--more-->\n\n## 定义类\n\nES6中的类实际就是一个函数，且正如函数的定义方式有函数声明和函数表达式两种方式一样，类的定义也有两种方式，分别为：\n\n- 类声明\n- 类表达式\n\n### 类声明\n\n类声明是定义类的一种方式，使用class关键字后跟一个类名，就可以定义一个类。如下：\n\n```javascript\nclass Foo {\n    constructor() {\n        // ..\n    }\n}\n```\n\n#### 不存在变量提升（hoist）\n\n类声明和函数声明不同的一点是，函数声明存在变量提升现象，而类声明不会。即，类必须先声明，然后才能使用，否则会抛出`ReferenceError`异常。\n\n```javascript\nvar foo = new Foo(); // Uncaught ReferenceError: Foo is not defined(...)\nclass Foo {\n    // ...\n}\n```\n\n这种规定的原因与类的继承有关，必须保证子类在父类之后定义。\n\n```javascript\nlet Foo = class {};\n\nclass Bar extends Foo {\n}\n```\n\n上面的代码不会报错，因为class `Bar`继承`Foo`时，`Foo`已经有定义了。但是，如果存在Class提升，上面代码就会报错，因为Class `Bar`会被提升到代码头部，而表达式式`Foo`是不会提升的，所以导致Class `Bar`继承`Foo`的时候，`Foo`还没有定义。\n\n### 类表达式\n\n类表达式就定义类的另外一种方式，就像函数表达式一样，在类表达式中，类名是可有可无的。若定义的类名，则该类名只有的类的内部才可以访问到。\n\n```javascript\n// 方式一\nconst MyClass = class {};\n\n// 方式二：给出类名\nconst MyClass = class Me {\n    getClassName() {\n        return Me.name;\n    }\n};\n```\n\n上面方式二定义类的同时给出了类名，此时，`Me`类名只可以在Class的内部代码可用，指代当前类。MyClass的name属性值为给出的类名。\n\n```javascript\nlet my = new MyClass();\nmy.getClassName(); // Me\nMe.name; // Uncaught ReferenceError: Me is not defined(…)\nMyClass.name; // Me\n```\n\n采用类表达式，可以写出立即执行的Class。如下：\n\n```javascript\nlet person = new class {\n    constructor(name) {\n        this.name = name;\n    }\n    \n    sayName() {\n        console.log(this.name);\n    }\n}('Zhang San');\n\nperson.sayName(); // Zhang San\n```\n\n## 类体和方法定义\n\n类的成员需要定义在一对大括号内`{}`，大括号内的代码的大括号本身组成了类体。类成员包括类构造器和类方法（包括静态方法和实例方法）。\n\n### 严格模式\n\n类体中的代码都强制在严格模式中执行，即默认\"use strict\"。考虑到未来所有的代码，其实都是运行在模块之中，所以ES6实际上把整个语言升级到了严格模式。\n\n### 构造器（constructor方法）\n\n`constructor`方法是一个特殊的类方法，它既不是静态方法也不是实例方法，它仅在实例化的时候被调用。一个类只能拥有一个名为`constructor`的方法，否则会抛出`SyntaxError`异常。\n\n如果没有定义`constructor`方法，这个方法会被默认添加，即，不管有没有显示定义，任何一个类都有`constructor`方法。\n\n子类必须在constructor方法中调用`super`方法，否则新建实例时会报错。因为子类没有自己的`this`对象，而是继承父类的`this`对象，然后对其进行加工，如果不调用`super`方法，子类就得不到`this`对象。\n\n```javascript\nclass Point {}\n\nclass ColorPoint extends Point {\n    constructor() {}\n}\n\nlet cp = new ColorPoint(); // ReferenceError\n```\n\n上面代码中，`ColorPoint`继承了父类`Point`，但是它的构造函数没有调用`super`方法，导致新建实例时报错。\n\n\n### 原型方法\n\n定义类的方法时，方法名前面不需要加上`function`关键字。另外，方法之间不需要用逗号分隔，加了会报错。\n\n```javascript\nclass Bar {\n    constructor() {}\n    \n    doStuff() {}\n    \n    toString() {}\n    \n    toValue() {}\n}\n```\n\n类的所有方法都是定义在类的`prototype`属性上的，上面的写法等同于下面：\n\n```javascript\nBar.prototype = {\n    doStuff() {},\n    toString() {},\n    toValue() {}\n};\n```\n\n所以，在类的实例上调用方法，实际上就是调用原型上的方法。   \n\n```javascript\nclass B {}\nlet b = new B();\n\nb.constructor === B.prototype.constructor; // true\n```\n\n上面代码中，`b`是B类的实例，它的`constructor`方法就是B类原型的`constructor`方法。   \n由于类的方法都是定义在`prototype`上面，所以类的新方法可以添加在`prototype`对象上面。`Object.assign`方法可以很方便地一次向类添加多个方法。\n\n```javascript\nclass Point {\n    constructor() {\n        // ...\n    }\n}\n\nObject.assign(Point.prototype, {\n    toString() {},\n    toValue() {}\n});\n```\n\n另外，类的内部所有定义的方法，都是不可枚举的（non-enumerable）。\n\n```javascript\nclass Point {\n    constructor(x, y) {\n        // ...\n    }\n    \n    toString() {\n        return '(' + x + ', ' + y + ')';\n    }\n}\n\nObject.keys(Point.prototype); // []\nObject.getOwnPropertyNames(Point.prototype); // [\"constructor\", \"toString\"]\nObject.getOwnPropertyDescriptor(Point, 'toString');\n// Object {writable: true, enumerable: false, configurable: true}\n```\n\n### 静态方法\n\n`static`关键字用来定义类的静态方法。静态方法是指那些不需要对类进行实例化，使用类名就可以直接访问的方法。静态方法经常用来作为工具函数。\n\n```javascript\nclass Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    static distance(a, b) {\n        const dx = a.x - b.x;\n        const dy = a.y - b.y;\n\n        return Math.sqrt(dx*dx + dy*dy);\n    }\n}\n\nconst p1 = new Point(5, 5);\nconst p2 = new Point(10, 10);\n\nconsole.log(Point.distance(p1, p2));\n```\n\n静态方法不可以被实例继承，是通过类名直接调用的。但是，父类的静态方法可以被子类继承。\n\n```javascript\nclass Foo {\n  static classMethod() {\n    return 'hello';\n  }\n}\n\nclass Bar extends Foo {\n}\n\nBar.classMethod(); // \"hello\"\n```\n\n静态方法也可以用`super`关键字调用。\n\n```javascript\nclass Foo {\n  static classMethod() {\n    return 'hello';\n  }\n}\n\nclass Bar extends Foo {\n  static classMethod() {\n    return super.classMethod() + ', too';\n  }\n}\n\nBar.classMethod(); // \"hello too\"\n```\n\n## extends关键字\n\n`extends`关键字用于实现类之间的继承。子类继承父类，就继承了父类的所有属性和方法。   \n`extends`后面只可以跟一个父类。\n\n## super 关键字\n\n`super`关键字可以用来调用其父类的构造器或方法。\n\n```javascript\nclass Cat { \n  constructor(name) {\n    this.name = name;\n  }\n  \n  speak() {\n    console.log(this.name + ' makes a noise.');\n  }\n}\n\nclass Lion extends Cat {\n  speak() {\n    super.speak();\n    console.log(this.name + ' roars.');\n  }\n}\n```\n\n## 类的Getter和Setter方法\n\n与ES5一样，在类内部可以使用`get`和`set`关键字，对某个属性设置取值和赋值方法。\n\n```javascript\nclass Foo {\n    constructor() {}\n    \n    get prop() {\n        return 'getter';\n    }\n    \n    set prop(val) {\n        console.log('setter: ' + val);\n    }\n}\n\nlet foo = new Foo();\n\nfoo.prop = 1;\n// setter: 1\n\nfoo.prop;\n// \"getter\"\n```\n\n上面代码中，`prop`属性有对应 的赋值和取值方法，因此赋值和读取行为都被自定义了。   \n存值和取值方法是设置在属性的descriptor对象上的。\n\n```javascript\nvar descriptor = Object.getOwnPropertyDescriptor(Foo.prototype, 'prop');\n\n\"get\" in descriptor // true\n\"set\" in descriptor // true\n```\n\n上面代码中，存值和取值方法是定义在`prop`属性的描述对象上的，这与ES5一致。\n\n\n## 类的Generator方法\n\n如果类的某个方法名前加上星号（`*`），就表示这个方法是一个Generator函数。\n\n```javascript\nclass Foo {\n  constructor(...args) {\n    this.args = args;\n  }\n  * [Symbol.iterator]() {\n    for (let arg of this.args) {\n      yield arg;\n    }\n  }\n}\n\nfor (let x of new Foo('hello', 'world')) {\n  console.log(x);\n}\n// hello\n// world\n```\n\n上面代码中，Foo类的Symbol.iterator方法前有一个星号，表示该方法是一个Generator函数。Symbol.iterator方法返回一个Foo类的默认遍历器，`for...of`循环会自动调用这个遍历器。\n\n","source":"_posts/es6_class.md","raw":"---\nlayout: post\ntitle: ES6 Class\ntags: [es6,es2015,class]\ndate: 2016-07-28 20:10:00 +800\n---\n\n> 从ES6（ES2015）开始，JS提出了类（Class）概念，JS中的类只是JS现有的、基于原型的继承的一种语法包装（语法糖），它能让我们用理简明的语法实现继承。\n\n<!--more-->\n\n## 定义类\n\nES6中的类实际就是一个函数，且正如函数的定义方式有函数声明和函数表达式两种方式一样，类的定义也有两种方式，分别为：\n\n- 类声明\n- 类表达式\n\n### 类声明\n\n类声明是定义类的一种方式，使用class关键字后跟一个类名，就可以定义一个类。如下：\n\n```javascript\nclass Foo {\n    constructor() {\n        // ..\n    }\n}\n```\n\n#### 不存在变量提升（hoist）\n\n类声明和函数声明不同的一点是，函数声明存在变量提升现象，而类声明不会。即，类必须先声明，然后才能使用，否则会抛出`ReferenceError`异常。\n\n```javascript\nvar foo = new Foo(); // Uncaught ReferenceError: Foo is not defined(...)\nclass Foo {\n    // ...\n}\n```\n\n这种规定的原因与类的继承有关，必须保证子类在父类之后定义。\n\n```javascript\nlet Foo = class {};\n\nclass Bar extends Foo {\n}\n```\n\n上面的代码不会报错，因为class `Bar`继承`Foo`时，`Foo`已经有定义了。但是，如果存在Class提升，上面代码就会报错，因为Class `Bar`会被提升到代码头部，而表达式式`Foo`是不会提升的，所以导致Class `Bar`继承`Foo`的时候，`Foo`还没有定义。\n\n### 类表达式\n\n类表达式就定义类的另外一种方式，就像函数表达式一样，在类表达式中，类名是可有可无的。若定义的类名，则该类名只有的类的内部才可以访问到。\n\n```javascript\n// 方式一\nconst MyClass = class {};\n\n// 方式二：给出类名\nconst MyClass = class Me {\n    getClassName() {\n        return Me.name;\n    }\n};\n```\n\n上面方式二定义类的同时给出了类名，此时，`Me`类名只可以在Class的内部代码可用，指代当前类。MyClass的name属性值为给出的类名。\n\n```javascript\nlet my = new MyClass();\nmy.getClassName(); // Me\nMe.name; // Uncaught ReferenceError: Me is not defined(…)\nMyClass.name; // Me\n```\n\n采用类表达式，可以写出立即执行的Class。如下：\n\n```javascript\nlet person = new class {\n    constructor(name) {\n        this.name = name;\n    }\n    \n    sayName() {\n        console.log(this.name);\n    }\n}('Zhang San');\n\nperson.sayName(); // Zhang San\n```\n\n## 类体和方法定义\n\n类的成员需要定义在一对大括号内`{}`，大括号内的代码的大括号本身组成了类体。类成员包括类构造器和类方法（包括静态方法和实例方法）。\n\n### 严格模式\n\n类体中的代码都强制在严格模式中执行，即默认\"use strict\"。考虑到未来所有的代码，其实都是运行在模块之中，所以ES6实际上把整个语言升级到了严格模式。\n\n### 构造器（constructor方法）\n\n`constructor`方法是一个特殊的类方法，它既不是静态方法也不是实例方法，它仅在实例化的时候被调用。一个类只能拥有一个名为`constructor`的方法，否则会抛出`SyntaxError`异常。\n\n如果没有定义`constructor`方法，这个方法会被默认添加，即，不管有没有显示定义，任何一个类都有`constructor`方法。\n\n子类必须在constructor方法中调用`super`方法，否则新建实例时会报错。因为子类没有自己的`this`对象，而是继承父类的`this`对象，然后对其进行加工，如果不调用`super`方法，子类就得不到`this`对象。\n\n```javascript\nclass Point {}\n\nclass ColorPoint extends Point {\n    constructor() {}\n}\n\nlet cp = new ColorPoint(); // ReferenceError\n```\n\n上面代码中，`ColorPoint`继承了父类`Point`，但是它的构造函数没有调用`super`方法，导致新建实例时报错。\n\n\n### 原型方法\n\n定义类的方法时，方法名前面不需要加上`function`关键字。另外，方法之间不需要用逗号分隔，加了会报错。\n\n```javascript\nclass Bar {\n    constructor() {}\n    \n    doStuff() {}\n    \n    toString() {}\n    \n    toValue() {}\n}\n```\n\n类的所有方法都是定义在类的`prototype`属性上的，上面的写法等同于下面：\n\n```javascript\nBar.prototype = {\n    doStuff() {},\n    toString() {},\n    toValue() {}\n};\n```\n\n所以，在类的实例上调用方法，实际上就是调用原型上的方法。   \n\n```javascript\nclass B {}\nlet b = new B();\n\nb.constructor === B.prototype.constructor; // true\n```\n\n上面代码中，`b`是B类的实例，它的`constructor`方法就是B类原型的`constructor`方法。   \n由于类的方法都是定义在`prototype`上面，所以类的新方法可以添加在`prototype`对象上面。`Object.assign`方法可以很方便地一次向类添加多个方法。\n\n```javascript\nclass Point {\n    constructor() {\n        // ...\n    }\n}\n\nObject.assign(Point.prototype, {\n    toString() {},\n    toValue() {}\n});\n```\n\n另外，类的内部所有定义的方法，都是不可枚举的（non-enumerable）。\n\n```javascript\nclass Point {\n    constructor(x, y) {\n        // ...\n    }\n    \n    toString() {\n        return '(' + x + ', ' + y + ')';\n    }\n}\n\nObject.keys(Point.prototype); // []\nObject.getOwnPropertyNames(Point.prototype); // [\"constructor\", \"toString\"]\nObject.getOwnPropertyDescriptor(Point, 'toString');\n// Object {writable: true, enumerable: false, configurable: true}\n```\n\n### 静态方法\n\n`static`关键字用来定义类的静态方法。静态方法是指那些不需要对类进行实例化，使用类名就可以直接访问的方法。静态方法经常用来作为工具函数。\n\n```javascript\nclass Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    static distance(a, b) {\n        const dx = a.x - b.x;\n        const dy = a.y - b.y;\n\n        return Math.sqrt(dx*dx + dy*dy);\n    }\n}\n\nconst p1 = new Point(5, 5);\nconst p2 = new Point(10, 10);\n\nconsole.log(Point.distance(p1, p2));\n```\n\n静态方法不可以被实例继承，是通过类名直接调用的。但是，父类的静态方法可以被子类继承。\n\n```javascript\nclass Foo {\n  static classMethod() {\n    return 'hello';\n  }\n}\n\nclass Bar extends Foo {\n}\n\nBar.classMethod(); // \"hello\"\n```\n\n静态方法也可以用`super`关键字调用。\n\n```javascript\nclass Foo {\n  static classMethod() {\n    return 'hello';\n  }\n}\n\nclass Bar extends Foo {\n  static classMethod() {\n    return super.classMethod() + ', too';\n  }\n}\n\nBar.classMethod(); // \"hello too\"\n```\n\n## extends关键字\n\n`extends`关键字用于实现类之间的继承。子类继承父类，就继承了父类的所有属性和方法。   \n`extends`后面只可以跟一个父类。\n\n## super 关键字\n\n`super`关键字可以用来调用其父类的构造器或方法。\n\n```javascript\nclass Cat { \n  constructor(name) {\n    this.name = name;\n  }\n  \n  speak() {\n    console.log(this.name + ' makes a noise.');\n  }\n}\n\nclass Lion extends Cat {\n  speak() {\n    super.speak();\n    console.log(this.name + ' roars.');\n  }\n}\n```\n\n## 类的Getter和Setter方法\n\n与ES5一样，在类内部可以使用`get`和`set`关键字，对某个属性设置取值和赋值方法。\n\n```javascript\nclass Foo {\n    constructor() {}\n    \n    get prop() {\n        return 'getter';\n    }\n    \n    set prop(val) {\n        console.log('setter: ' + val);\n    }\n}\n\nlet foo = new Foo();\n\nfoo.prop = 1;\n// setter: 1\n\nfoo.prop;\n// \"getter\"\n```\n\n上面代码中，`prop`属性有对应 的赋值和取值方法，因此赋值和读取行为都被自定义了。   \n存值和取值方法是设置在属性的descriptor对象上的。\n\n```javascript\nvar descriptor = Object.getOwnPropertyDescriptor(Foo.prototype, 'prop');\n\n\"get\" in descriptor // true\n\"set\" in descriptor // true\n```\n\n上面代码中，存值和取值方法是定义在`prop`属性的描述对象上的，这与ES5一致。\n\n\n## 类的Generator方法\n\n如果类的某个方法名前加上星号（`*`），就表示这个方法是一个Generator函数。\n\n```javascript\nclass Foo {\n  constructor(...args) {\n    this.args = args;\n  }\n  * [Symbol.iterator]() {\n    for (let arg of this.args) {\n      yield arg;\n    }\n  }\n}\n\nfor (let x of new Foo('hello', 'world')) {\n  console.log(x);\n}\n// hello\n// world\n```\n\n上面代码中，Foo类的Symbol.iterator方法前有一个星号，表示该方法是一个Generator函数。Symbol.iterator方法返回一个Foo类的默认遍历器，`for...of`循环会自动调用这个遍历器。\n\n","slug":"es6_class","published":1,"updated":"2022-07-14T01:23:25.011Z","comments":1,"photos":[],"link":"","_id":"cl5lql4dg000h8ds6bh10e6zi","content":"<blockquote>\n<p>从ES6（ES2015）开始，JS提出了类（Class）概念，JS中的类只是JS现有的、基于原型的继承的一种语法包装（语法糖），它能让我们用理简明的语法实现继承。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"定义类\"><a href=\"#定义类\" class=\"headerlink\" title=\"定义类\"></a>定义类</h2><p>ES6中的类实际就是一个函数，且正如函数的定义方式有函数声明和函数表达式两种方式一样，类的定义也有两种方式，分别为：</p>\n<ul>\n<li>类声明</li>\n<li>类表达式</li>\n</ul>\n<h3 id=\"类声明\"><a href=\"#类声明\" class=\"headerlink\" title=\"类声明\"></a>类声明</h3><p>类声明是定义类的一种方式，使用class关键字后跟一个类名，就可以定义一个类。如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ..</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"不存在变量提升（hoist）\"><a href=\"#不存在变量提升（hoist）\" class=\"headerlink\" title=\"不存在变量提升（hoist）\"></a>不存在变量提升（hoist）</h4><p>类声明和函数声明不同的一点是，函数声明存在变量提升现象，而类声明不会。即，类必须先声明，然后才能使用，否则会抛出<code>ReferenceError</code>异常。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>(); <span class=\"comment\">// Uncaught ReferenceError: Foo is not defined(...)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种规定的原因与类的继承有关，必须保证子类在父类之后定义。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Foo</span> = <span class=\"keyword\">class</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Bar</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Foo</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码不会报错，因为class <code>Bar</code>继承<code>Foo</code>时，<code>Foo</code>已经有定义了。但是，如果存在Class提升，上面代码就会报错，因为Class <code>Bar</code>会被提升到代码头部，而表达式式<code>Foo</code>是不会提升的，所以导致Class <code>Bar</code>继承<code>Foo</code>的时候，<code>Foo</code>还没有定义。</p>\n<h3 id=\"类表达式\"><a href=\"#类表达式\" class=\"headerlink\" title=\"类表达式\"></a>类表达式</h3><p>类表达式就定义类的另外一种方式，就像函数表达式一样，在类表达式中，类名是可有可无的。若定义的类名，则该类名只有的类的内部才可以访问到。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方式一</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MyClass</span> = <span class=\"keyword\">class</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式二：给出类名</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MyClass</span> = <span class=\"keyword\">class</span> <span class=\"title class_\">Me</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">getClassName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">Me</span>.<span class=\"property\">name</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>上面方式二定义类的同时给出了类名，此时，<code>Me</code>类名只可以在Class的内部代码可用，指代当前类。MyClass的name属性值为给出的类名。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> my = <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>();</span><br><span class=\"line\">my.<span class=\"title function_\">getClassName</span>(); <span class=\"comment\">// Me</span></span><br><span class=\"line\"><span class=\"title class_\">Me</span>.<span class=\"property\">name</span>; <span class=\"comment\">// Uncaught ReferenceError: Me is not defined(…)</span></span><br><span class=\"line\"><span class=\"title class_\">MyClass</span>.<span class=\"property\">name</span>; <span class=\"comment\">// Me</span></span><br></pre></td></tr></table></figure>\n<p>采用类表达式，可以写出立即执行的Class。如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> <span class=\"keyword\">class</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"title function_\">sayName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;(<span class=\"string\">&#x27;Zhang San&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">person.<span class=\"title function_\">sayName</span>(); <span class=\"comment\">// Zhang San</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"类体和方法定义\"><a href=\"#类体和方法定义\" class=\"headerlink\" title=\"类体和方法定义\"></a>类体和方法定义</h2><p>类的成员需要定义在一对大括号内<code>&#123;&#125;</code>，大括号内的代码的大括号本身组成了类体。类成员包括类构造器和类方法（包括静态方法和实例方法）。</p>\n<h3 id=\"严格模式\"><a href=\"#严格模式\" class=\"headerlink\" title=\"严格模式\"></a>严格模式</h3><p>类体中的代码都强制在严格模式中执行，即默认”use strict”。考虑到未来所有的代码，其实都是运行在模块之中，所以ES6实际上把整个语言升级到了严格模式。</p>\n<h3 id=\"构造器（constructor方法）\"><a href=\"#构造器（constructor方法）\" class=\"headerlink\" title=\"构造器（constructor方法）\"></a>构造器（constructor方法）</h3><p><code>constructor</code>方法是一个特殊的类方法，它既不是静态方法也不是实例方法，它仅在实例化的时候被调用。一个类只能拥有一个名为<code>constructor</code>的方法，否则会抛出<code>SyntaxError</code>异常。</p>\n<p>如果没有定义<code>constructor</code>方法，这个方法会被默认添加，即，不管有没有显示定义，任何一个类都有<code>constructor</code>方法。</p>\n<p>子类必须在constructor方法中调用<code>super</code>方法，否则新建实例时会报错。因为子类没有自己的<code>this</code>对象，而是继承父类的<code>this</code>对象，然后对其进行加工，如果不调用<code>super</code>方法，子类就得不到<code>this</code>对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Point</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> cp = <span class=\"keyword\">new</span> <span class=\"title class_\">ColorPoint</span>(); <span class=\"comment\">// ReferenceError</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>ColorPoint</code>继承了父类<code>Point</code>，但是它的构造函数没有调用<code>super</code>方法，导致新建实例时报错。</p>\n<h3 id=\"原型方法\"><a href=\"#原型方法\" class=\"headerlink\" title=\"原型方法\"></a>原型方法</h3><p>定义类的方法时，方法名前面不需要加上<code>function</code>关键字。另外，方法之间不需要用逗号分隔，加了会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Bar</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"title function_\">doStuff</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"title function_\">toString</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"title function_\">toValue</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>类的所有方法都是定义在类的<code>prototype</code>属性上的，上面的写法等同于下面：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Bar</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123;</span><br><span class=\"line\">    <span class=\"title function_\">doStuff</span>(<span class=\"params\"></span>) &#123;&#125;,</span><br><span class=\"line\">    <span class=\"title function_\">toString</span>(<span class=\"params\"></span>) &#123;&#125;,</span><br><span class=\"line\">    <span class=\"title function_\">toValue</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>所以，在类的实例上调用方法，实际上就是调用原型上的方法。   </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> <span class=\"title function_\">B</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">b.<span class=\"property\">constructor</span> === B.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>b</code>是B类的实例，它的<code>constructor</code>方法就是B类原型的<code>constructor</code>方法。<br>由于类的方法都是定义在<code>prototype</code>上面，所以类的新方法可以添加在<code>prototype</code>对象上面。<code>Object.assign</code>方法可以很方便地一次向类添加多个方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(<span class=\"title class_\">Point</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, &#123;</span><br><span class=\"line\">    <span class=\"title function_\">toString</span>(<span class=\"params\"></span>) &#123;&#125;,</span><br><span class=\"line\">    <span class=\"title function_\">toValue</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>另外，类的内部所有定义的方法，都是不可枚举的（non-enumerable）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"title function_\">toString</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;(&#x27;</span> + x + <span class=\"string\">&#x27;, &#x27;</span> + y + <span class=\"string\">&#x27;)&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(<span class=\"title class_\">Point</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>); <span class=\"comment\">// []</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">getOwnPropertyNames</span>(<span class=\"title class_\">Point</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>); <span class=\"comment\">// [&quot;constructor&quot;, &quot;toString&quot;]</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">getOwnPropertyDescriptor</span>(<span class=\"title class_\">Point</span>, <span class=\"string\">&#x27;toString&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// Object &#123;writable: true, enumerable: false, configurable: true&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h3><p><code>static</code>关键字用来定义类的静态方法。静态方法是指那些不需要对类进行实例化，使用类名就可以直接访问的方法。静态方法经常用来作为工具函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> = x;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> = y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"title function_\">distance</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> dx = a.<span class=\"property\">x</span> - b.<span class=\"property\">x</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> dy = a.<span class=\"property\">y</span> - b.<span class=\"property\">y</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">sqrt</span>(dx*dx + dy*dy);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Point</span>(<span class=\"number\">5</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> p2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Point</span>(<span class=\"number\">10</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Point</span>.<span class=\"title function_\">distance</span>(p1, p2));</span><br></pre></td></tr></table></figure>\n<p>静态方法不可以被实例继承，是通过类名直接调用的。但是，父类的静态方法可以被子类继承。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">classMethod</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Bar</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Foo</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Bar</span>.<span class=\"title function_\">classMethod</span>(); <span class=\"comment\">// &quot;hello&quot;</span></span><br></pre></td></tr></table></figure>\n<p>静态方法也可以用<code>super</code>关键字调用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">classMethod</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Bar</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Foo</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">classMethod</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">super</span>.<span class=\"title function_\">classMethod</span>() + <span class=\"string\">&#x27;, too&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Bar</span>.<span class=\"title function_\">classMethod</span>(); <span class=\"comment\">// &quot;hello too&quot;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"extends关键字\"><a href=\"#extends关键字\" class=\"headerlink\" title=\"extends关键字\"></a>extends关键字</h2><p><code>extends</code>关键字用于实现类之间的继承。子类继承父类，就继承了父类的所有属性和方法。<br><code>extends</code>后面只可以跟一个父类。</p>\n<h2 id=\"super-关键字\"><a href=\"#super-关键字\" class=\"headerlink\" title=\"super 关键字\"></a>super 关键字</h2><p><code>super</code>关键字可以用来调用其父类的构造器或方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cat</span> &#123; </span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"title function_\">speak</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">&#x27; makes a noise.&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Lion</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Cat</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">speak</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>.<span class=\"title function_\">speak</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">&#x27; roars.&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"类的Getter和Setter方法\"><a href=\"#类的Getter和Setter方法\" class=\"headerlink\" title=\"类的Getter和Setter方法\"></a>类的Getter和Setter方法</h2><p>与ES5一样，在类内部可以使用<code>get</code>和<code>set</code>关键字，对某个属性设置取值和赋值方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title function_\">prop</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;getter&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"title function_\">prop</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setter: &#x27;</span> + val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> foo = <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">foo.<span class=\"property\">prop</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// setter: 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">foo.<span class=\"property\">prop</span>;</span><br><span class=\"line\"><span class=\"comment\">// &quot;getter&quot;</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>prop</code>属性有对应 的赋值和取值方法，因此赋值和读取行为都被自定义了。<br>存值和取值方法是设置在属性的descriptor对象上的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> descriptor = <span class=\"title class_\">Object</span>.<span class=\"title function_\">getOwnPropertyDescriptor</span>(<span class=\"title class_\">Foo</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, <span class=\"string\">&#x27;prop&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;get&quot;</span> <span class=\"keyword\">in</span> descriptor <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">&quot;set&quot;</span> <span class=\"keyword\">in</span> descriptor <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，存值和取值方法是定义在<code>prop</code>属性的描述对象上的，这与ES5一致。</p>\n<h2 id=\"类的Generator方法\"><a href=\"#类的Generator方法\" class=\"headerlink\" title=\"类的Generator方法\"></a>类的Generator方法</h2><p>如果类的某个方法名前加上星号（<code>*</code>），就表示这个方法是一个Generator函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">args</span> = args;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  * [<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> arg <span class=\"keyword\">of</span> <span class=\"variable language_\">this</span>.<span class=\"property\">args</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> arg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> x <span class=\"keyword\">of</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>(<span class=\"string\">&#x27;hello&#x27;</span>, <span class=\"string\">&#x27;world&#x27;</span>)) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// hello</span></span><br><span class=\"line\"><span class=\"comment\">// world</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，Foo类的Symbol.iterator方法前有一个星号，表示该方法是一个Generator函数。Symbol.iterator方法返回一个Foo类的默认遍历器，<code>for...of</code>循环会自动调用这个遍历器。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>从ES6（ES2015）开始，JS提出了类（Class）概念，JS中的类只是JS现有的、基于原型的继承的一种语法包装（语法糖），它能让我们用理简明的语法实现继承。</p>\n</blockquote>","more":"<h2 id=\"定义类\"><a href=\"#定义类\" class=\"headerlink\" title=\"定义类\"></a>定义类</h2><p>ES6中的类实际就是一个函数，且正如函数的定义方式有函数声明和函数表达式两种方式一样，类的定义也有两种方式，分别为：</p>\n<ul>\n<li>类声明</li>\n<li>类表达式</li>\n</ul>\n<h3 id=\"类声明\"><a href=\"#类声明\" class=\"headerlink\" title=\"类声明\"></a>类声明</h3><p>类声明是定义类的一种方式，使用class关键字后跟一个类名，就可以定义一个类。如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ..</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"不存在变量提升（hoist）\"><a href=\"#不存在变量提升（hoist）\" class=\"headerlink\" title=\"不存在变量提升（hoist）\"></a>不存在变量提升（hoist）</h4><p>类声明和函数声明不同的一点是，函数声明存在变量提升现象，而类声明不会。即，类必须先声明，然后才能使用，否则会抛出<code>ReferenceError</code>异常。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>(); <span class=\"comment\">// Uncaught ReferenceError: Foo is not defined(...)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种规定的原因与类的继承有关，必须保证子类在父类之后定义。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Foo</span> = <span class=\"keyword\">class</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Bar</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Foo</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的代码不会报错，因为class <code>Bar</code>继承<code>Foo</code>时，<code>Foo</code>已经有定义了。但是，如果存在Class提升，上面代码就会报错，因为Class <code>Bar</code>会被提升到代码头部，而表达式式<code>Foo</code>是不会提升的，所以导致Class <code>Bar</code>继承<code>Foo</code>的时候，<code>Foo</code>还没有定义。</p>\n<h3 id=\"类表达式\"><a href=\"#类表达式\" class=\"headerlink\" title=\"类表达式\"></a>类表达式</h3><p>类表达式就定义类的另外一种方式，就像函数表达式一样，在类表达式中，类名是可有可无的。若定义的类名，则该类名只有的类的内部才可以访问到。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方式一</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MyClass</span> = <span class=\"keyword\">class</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式二：给出类名</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MyClass</span> = <span class=\"keyword\">class</span> <span class=\"title class_\">Me</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">getClassName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">Me</span>.<span class=\"property\">name</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>上面方式二定义类的同时给出了类名，此时，<code>Me</code>类名只可以在Class的内部代码可用，指代当前类。MyClass的name属性值为给出的类名。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> my = <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>();</span><br><span class=\"line\">my.<span class=\"title function_\">getClassName</span>(); <span class=\"comment\">// Me</span></span><br><span class=\"line\"><span class=\"title class_\">Me</span>.<span class=\"property\">name</span>; <span class=\"comment\">// Uncaught ReferenceError: Me is not defined(…)</span></span><br><span class=\"line\"><span class=\"title class_\">MyClass</span>.<span class=\"property\">name</span>; <span class=\"comment\">// Me</span></span><br></pre></td></tr></table></figure>\n<p>采用类表达式，可以写出立即执行的Class。如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = <span class=\"keyword\">new</span> <span class=\"keyword\">class</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"title function_\">sayName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;(<span class=\"string\">&#x27;Zhang San&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">person.<span class=\"title function_\">sayName</span>(); <span class=\"comment\">// Zhang San</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"类体和方法定义\"><a href=\"#类体和方法定义\" class=\"headerlink\" title=\"类体和方法定义\"></a>类体和方法定义</h2><p>类的成员需要定义在一对大括号内<code>&#123;&#125;</code>，大括号内的代码的大括号本身组成了类体。类成员包括类构造器和类方法（包括静态方法和实例方法）。</p>\n<h3 id=\"严格模式\"><a href=\"#严格模式\" class=\"headerlink\" title=\"严格模式\"></a>严格模式</h3><p>类体中的代码都强制在严格模式中执行，即默认”use strict”。考虑到未来所有的代码，其实都是运行在模块之中，所以ES6实际上把整个语言升级到了严格模式。</p>\n<h3 id=\"构造器（constructor方法）\"><a href=\"#构造器（constructor方法）\" class=\"headerlink\" title=\"构造器（constructor方法）\"></a>构造器（constructor方法）</h3><p><code>constructor</code>方法是一个特殊的类方法，它既不是静态方法也不是实例方法，它仅在实例化的时候被调用。一个类只能拥有一个名为<code>constructor</code>的方法，否则会抛出<code>SyntaxError</code>异常。</p>\n<p>如果没有定义<code>constructor</code>方法，这个方法会被默认添加，即，不管有没有显示定义，任何一个类都有<code>constructor</code>方法。</p>\n<p>子类必须在constructor方法中调用<code>super</code>方法，否则新建实例时会报错。因为子类没有自己的<code>this</code>对象，而是继承父类的<code>this</code>对象，然后对其进行加工，如果不调用<code>super</code>方法，子类就得不到<code>this</code>对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Point</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> cp = <span class=\"keyword\">new</span> <span class=\"title class_\">ColorPoint</span>(); <span class=\"comment\">// ReferenceError</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>ColorPoint</code>继承了父类<code>Point</code>，但是它的构造函数没有调用<code>super</code>方法，导致新建实例时报错。</p>\n<h3 id=\"原型方法\"><a href=\"#原型方法\" class=\"headerlink\" title=\"原型方法\"></a>原型方法</h3><p>定义类的方法时，方法名前面不需要加上<code>function</code>关键字。另外，方法之间不需要用逗号分隔，加了会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Bar</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"title function_\">doStuff</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"title function_\">toString</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"title function_\">toValue</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>类的所有方法都是定义在类的<code>prototype</code>属性上的，上面的写法等同于下面：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Bar</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123;</span><br><span class=\"line\">    <span class=\"title function_\">doStuff</span>(<span class=\"params\"></span>) &#123;&#125;,</span><br><span class=\"line\">    <span class=\"title function_\">toString</span>(<span class=\"params\"></span>) &#123;&#125;,</span><br><span class=\"line\">    <span class=\"title function_\">toValue</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>所以，在类的实例上调用方法，实际上就是调用原型上的方法。   </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> <span class=\"title function_\">B</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">b.<span class=\"property\">constructor</span> === B.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>b</code>是B类的实例，它的<code>constructor</code>方法就是B类原型的<code>constructor</code>方法。<br>由于类的方法都是定义在<code>prototype</code>上面，所以类的新方法可以添加在<code>prototype</code>对象上面。<code>Object.assign</code>方法可以很方便地一次向类添加多个方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(<span class=\"title class_\">Point</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, &#123;</span><br><span class=\"line\">    <span class=\"title function_\">toString</span>(<span class=\"params\"></span>) &#123;&#125;,</span><br><span class=\"line\">    <span class=\"title function_\">toValue</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>另外，类的内部所有定义的方法，都是不可枚举的（non-enumerable）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"title function_\">toString</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;(&#x27;</span> + x + <span class=\"string\">&#x27;, &#x27;</span> + y + <span class=\"string\">&#x27;)&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(<span class=\"title class_\">Point</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>); <span class=\"comment\">// []</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">getOwnPropertyNames</span>(<span class=\"title class_\">Point</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>); <span class=\"comment\">// [&quot;constructor&quot;, &quot;toString&quot;]</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">getOwnPropertyDescriptor</span>(<span class=\"title class_\">Point</span>, <span class=\"string\">&#x27;toString&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// Object &#123;writable: true, enumerable: false, configurable: true&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h3><p><code>static</code>关键字用来定义类的静态方法。静态方法是指那些不需要对类进行实例化，使用类名就可以直接访问的方法。静态方法经常用来作为工具函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> = x;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> = y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"title function_\">distance</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> dx = a.<span class=\"property\">x</span> - b.<span class=\"property\">x</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> dy = a.<span class=\"property\">y</span> - b.<span class=\"property\">y</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">sqrt</span>(dx*dx + dy*dy);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Point</span>(<span class=\"number\">5</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> p2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Point</span>(<span class=\"number\">10</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Point</span>.<span class=\"title function_\">distance</span>(p1, p2));</span><br></pre></td></tr></table></figure>\n<p>静态方法不可以被实例继承，是通过类名直接调用的。但是，父类的静态方法可以被子类继承。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">classMethod</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Bar</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Foo</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Bar</span>.<span class=\"title function_\">classMethod</span>(); <span class=\"comment\">// &quot;hello&quot;</span></span><br></pre></td></tr></table></figure>\n<p>静态方法也可以用<code>super</code>关键字调用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">classMethod</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Bar</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Foo</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">classMethod</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">super</span>.<span class=\"title function_\">classMethod</span>() + <span class=\"string\">&#x27;, too&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Bar</span>.<span class=\"title function_\">classMethod</span>(); <span class=\"comment\">// &quot;hello too&quot;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"extends关键字\"><a href=\"#extends关键字\" class=\"headerlink\" title=\"extends关键字\"></a>extends关键字</h2><p><code>extends</code>关键字用于实现类之间的继承。子类继承父类，就继承了父类的所有属性和方法。<br><code>extends</code>后面只可以跟一个父类。</p>\n<h2 id=\"super-关键字\"><a href=\"#super-关键字\" class=\"headerlink\" title=\"super 关键字\"></a>super 关键字</h2><p><code>super</code>关键字可以用来调用其父类的构造器或方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cat</span> &#123; </span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"title function_\">speak</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">&#x27; makes a noise.&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Lion</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Cat</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">speak</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>.<span class=\"title function_\">speak</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">&#x27; roars.&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"类的Getter和Setter方法\"><a href=\"#类的Getter和Setter方法\" class=\"headerlink\" title=\"类的Getter和Setter方法\"></a>类的Getter和Setter方法</h2><p>与ES5一样，在类内部可以使用<code>get</code>和<code>set</code>关键字，对某个属性设置取值和赋值方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title function_\">prop</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;getter&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"title function_\">prop</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setter: &#x27;</span> + val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> foo = <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">foo.<span class=\"property\">prop</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// setter: 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">foo.<span class=\"property\">prop</span>;</span><br><span class=\"line\"><span class=\"comment\">// &quot;getter&quot;</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>prop</code>属性有对应 的赋值和取值方法，因此赋值和读取行为都被自定义了。<br>存值和取值方法是设置在属性的descriptor对象上的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> descriptor = <span class=\"title class_\">Object</span>.<span class=\"title function_\">getOwnPropertyDescriptor</span>(<span class=\"title class_\">Foo</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, <span class=\"string\">&#x27;prop&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;get&quot;</span> <span class=\"keyword\">in</span> descriptor <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">&quot;set&quot;</span> <span class=\"keyword\">in</span> descriptor <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，存值和取值方法是定义在<code>prop</code>属性的描述对象上的，这与ES5一致。</p>\n<h2 id=\"类的Generator方法\"><a href=\"#类的Generator方法\" class=\"headerlink\" title=\"类的Generator方法\"></a>类的Generator方法</h2><p>如果类的某个方法名前加上星号（<code>*</code>），就表示这个方法是一个Generator函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">args</span> = args;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  * [<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> arg <span class=\"keyword\">of</span> <span class=\"variable language_\">this</span>.<span class=\"property\">args</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> arg;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> x <span class=\"keyword\">of</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>(<span class=\"string\">&#x27;hello&#x27;</span>, <span class=\"string\">&#x27;world&#x27;</span>)) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// hello</span></span><br><span class=\"line\"><span class=\"comment\">// world</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，Foo类的Symbol.iterator方法前有一个星号，表示该方法是一个Generator函数。Symbol.iterator方法返回一个Foo类的默认遍历器，<code>for...of</code>循环会自动调用这个遍历器。</p>"},{"layout":"post","title":"ES6 函数扩展","date":"2016-07-22T05:18:00.000Z","_content":"\n> ES6允许为函数参数设置默认值，即直接写在参数定义后面。函数参数默认值还可以与解构赋值(destructuring)的默认值，结合起来使用。\n\n<!--more-->\n\n### 参数默认值\n\n### 基本用法\n\nES6允许为函数参数设置默认值，即直接写在参数定义后面。\n\n```javascript\nfunction log(x, y = 'world') {\n    console.log(x, y);\n}\n\nlog('Hello');   // Hello world\nlog('Hello', 'China');  // Hello China\nlog('Hello', '');   // Hello \n```\n\nES6的写法非常简洁自然，如下例子：\n\n```javascript\nfunction Point(x = 0, y = 0) {\n    this.x = x;\n    this.y = y;\n}\n\nvar p = new Point();\np // {x:0, y:0}\n```\n\n除了简洁，ES6的写法还有两个好处：\n- 阅读代码的人，可以立刻意识到哪些参数是可以省略的，不用查看函数体或文档；\n- 有利于将来代码的优化，即使未来的版本在对外接口中，彻底去掉这个参数，也不会导致以前的代码无法运行。\n\n参数变量是默认声明的，所以不能用`let`或`const`再次声明。\n\n```javascript\nfunction foo(x = 0) {\n    let x = 1; // error\n    const x = 2; // error\n}\n```\n\n上面代码中，参数变量`x`是默认声明的，在函数体中，不能用`let`或`const`再次声明，否则会报错。\n\n### 与解构赋值默认值结合使用\n\n函数参数默认值是可以与解构赋值(destructuring)的默认值，结合起来使用。\n\n```javascript\nfunction foo({x, y = 1}) {\n    console.log(x, y);\n}\n\nfoo({});    // undefined 1\nfoo({x: 1});    // 1 1\nfoo({x:1, y: 2});   // 1 2\nfoo();  // TypeError: Cannot match against 'undefined' or 'null'.\n```\n\n上面代码使用了对象的解构赋值默认值，只有当函数`foo`的参数是一个对象时，变量`x`和`y`才会通过解构赋值生成，如果函数`foo`调用时参数不是对象，就无法进行解构赋值，从而报错。\n\n### 参数默认值的位置\n\n通常情况下，定义了默认值的参数，应该是函数的尾参数。因为这样比较容易看出来，到底省略了哪些参数。如果非尾参数设置默认值，其实这个参数是没法省略的。\n\n```javascript\nfunction f(x = 1, y) {\n    return [x, y];\n}\n\nf();    // [1, undefined]\nf(1);   // [1, undefined]\nf(,1);  // [1, 1]\nf(undefined, 1);    // [1, 1]\n\nfunction func(x, y = 1, z) {\n    return [x, y, z];\n}\n\nfunc();    // [undefined, 1, undefined]\nfunc(1);    // [1, 1, undefined]\nfunc(1, ,2);    // 报错\nfunc(1, undefined, 2);  // [1, 1, 2]\n```\n\n上面例子中，有默认值的参数都不是尾参数，此时，无法只省略该参数，而不省略它后面的参数，除非显示传入`undefined`。\n\n### 函数的`length`属性\n\n函数指定了默认值后，函数的`length`属性返回的就不再是函数参数个数，而是第一个指定默认值的前面参数个数。也就是说指定了默认值后，函数的`length`属性将失真。\n\n```javascript\n(function(a) {}).length // 1\n(function(a = 1) {}).length // 0\n(function(a, b, c = 1, d) {}).length   // 2\n(function(...args) {}).length   // 0\n```\n\n这是因为`length`属性的含义是，该函数预期传入的参数个数，某个参数指定默认值后，预期传入的参数个数就不包括这个参数及其后面的参数。同时，Rest参数也不会计入`length`属性。\n\n### 作用域\n\n一个需要注意的地方，如果参数默认值是一个变量，则该变量所处的作用域与其它变量的作用域一样，即先是当前函数的作用域，然后才是全局作用域。\n\n### 应用\n\n利用参数默认值，可以指定某个参数不得省略，如果省略则抛出一个错误。\n\n```javascript\nfunction throwIfMissing() {\n    throw new Error(\"Missing parameter\");\n}\n\nfunction foo(mustBeGiven = throwIfMissing()) {\n    return mustBeGiven;\n}\n\nfoo(); // Error: Missing parameter\n```\n\n上面代码中`foo`函数，如果调用的时候没有给出参数，则会调用默认值`throwIfMissing`函数，从而抛出一个错误。\n\n此外，还可以将参数默认值设为`undefined`，表明这个参数是可以省略的。\n\n```javascript\nfunction foo(optional = undefined) { ... }\n```\n\n### Rest参数\n\nRest参数接收函数的多余参数，组成一个数组，放在形参的最后，形式如下：\n\n```javascript\nfunction func(a, b, ...theArgs) {\n    // ...\n}\n```\n\n#### Rest参数和arguments对象的区别\n- rest参数只包括那些没有给出名称的参数，arguments包含所有参数；\n- arguments对象不是真正的array，而rest参数是Array的实例，可以直接应用sort, map, forEach, pop等方法；\n- arguments对象拥有一些自己额外的功能。\n\n#### 从arguments转向数组\n\nRest参数简化了使用arguments获取多余参数的方法。\n\n```javascript\n// Before rest parameters, the following could be found\nfunction func(a, b) {\n    var args = Array.prototype.slice.call(arguments, f.length);\n    \n    // ...\n}\n\n// to be equivalent of\nfunction func(a, b, ...args) {\n    // ...\n}\n```\n\n注意，rest参数之后不能再有其它参数（即，只能是最后一个参数），否则会报错。\n\n```javascript\nfunction func(a, ...b, c) {\n    // ...\n}\n// Rest parameter must be last formal parameter\n```\n\n函数的length属性，不包括rest参数：\n\n```javascript\n(function(a) {}).length     // 1\n(function(...a) {}).length      // 0\n(function(a, b, ...c)).length   // 2\n```\n\n### 展开运算符\n\n展开运算符（spread）是三个点（...）,可以将数组转为用逗号分隔的参数序列。如同rest参数的逆运算。\n\n#### 语法\n\n```javascript\nconsole.log(...[1, 2, 3])\n// 1 2 3\n\nconsole.log(1, ...[2, 3, 4], 5);\n// 1 2 3 4 5\n\n[...document.querySelectorAll('div')]\n// [<div>, <div>, <div>...]\n```\n\n用于数组字面量：\n\n```javascript\n[...iterableObj, 4, 5, 6]\n```\n\n用于函数调用：\n\n```javascript\nmyFunction(...iterableObj);\n```\n\n展开运算符主要用于函数调用，如下：\n\n```javascript\nfunction func(x, y, z, a, b) {\n    console.log(x, y, z, a, b);\n}\n\nvar args = [1, 2];\nfunc(0, ...args, 3, ...[4]);\n// 0 1 2 3 4\n```\n\n注意：任何实现了Iterator接口的对象，都可以用展开运算符转为真正的数组。\n\n#### 用法\n\n1. 替换apply方法\n\n展开运算符可以展开数组，因此可以替换apply方法，将数组转为函数的参数。\n\n```javascript\nfunction func(x, y, z) { }\nvar args = [0, 1, 2];\n\n// ES5写法\nfunc.apply(null, args);\n\n// ES6写法\nfunc(...args);\n```\n\n2. 更强大的数组字面量操作\n\n如果由一个已知数组创建一个新数组，数组字面量语法则不足以达到目的，必须结合push, splice, concat等方法。而展开运算符可以轻松实现这个目标：\n\n```javascript\nvar parts = ['shoulders', 'knees'];\nvar lyrics = ['head', ...parts, 'and', 'toes'];\n// [\"head\", \"shoulders\", \"knees\", \"and\", \"toes\"]\n```\n\n展开运算符可以用于任何数组字面量，并可以多次使用。\n\n3. 适用new\n\nJS的函数只能返回一个值，如果返回多个值就需要用到数组或对象。展开运算符提供了一种处理这种返回值的有效方法 \n\n4. 替换push方法\n\npush方法常用于将一个数组加入到另一个数组的结尾。在ES5中是这样做的：\n\n```javascript\nvar arr1 = [0, 1, 2], arr2 = [3, 4, 5];\n// Append all items in arr2 onto arr1\nArray.prototype.push.apply(arr1, arr2);\n```\n\npush方法的参数不能是数组，所以只好通过apply方法变通使用push方法。有了展开运算符，就可以像下面直接将数组传入push方法。\n\n```javascript\nvar arr1 = [0, 1, 2], arr2 = [3, 4, 5];\narr1.push(...arr2);\narr1 // [0, 1, 2, 3, 4, 5]\n```\n\n上面可以将返回的数组使用展开运算直接传入构造函数。\n\n5. 只用于可迭代的变量\n\n下面的用法就会报错：\n\n```javascript\nvar obj = {key1: 'value1'};\nvar args = [...obj]; // 报错\n\nfunction func(x) {\n    console.log(x);\n}\nfunc(...obj); // 报错\n```","source":"_posts/es6_function_extentions.md","raw":"---\nlayout: post\ntitle: ES6 函数扩展\ntags: [es6,es2015,function]\ndate: 2016-07-22 13:18:00 +800\n---\n\n> ES6允许为函数参数设置默认值，即直接写在参数定义后面。函数参数默认值还可以与解构赋值(destructuring)的默认值，结合起来使用。\n\n<!--more-->\n\n### 参数默认值\n\n### 基本用法\n\nES6允许为函数参数设置默认值，即直接写在参数定义后面。\n\n```javascript\nfunction log(x, y = 'world') {\n    console.log(x, y);\n}\n\nlog('Hello');   // Hello world\nlog('Hello', 'China');  // Hello China\nlog('Hello', '');   // Hello \n```\n\nES6的写法非常简洁自然，如下例子：\n\n```javascript\nfunction Point(x = 0, y = 0) {\n    this.x = x;\n    this.y = y;\n}\n\nvar p = new Point();\np // {x:0, y:0}\n```\n\n除了简洁，ES6的写法还有两个好处：\n- 阅读代码的人，可以立刻意识到哪些参数是可以省略的，不用查看函数体或文档；\n- 有利于将来代码的优化，即使未来的版本在对外接口中，彻底去掉这个参数，也不会导致以前的代码无法运行。\n\n参数变量是默认声明的，所以不能用`let`或`const`再次声明。\n\n```javascript\nfunction foo(x = 0) {\n    let x = 1; // error\n    const x = 2; // error\n}\n```\n\n上面代码中，参数变量`x`是默认声明的，在函数体中，不能用`let`或`const`再次声明，否则会报错。\n\n### 与解构赋值默认值结合使用\n\n函数参数默认值是可以与解构赋值(destructuring)的默认值，结合起来使用。\n\n```javascript\nfunction foo({x, y = 1}) {\n    console.log(x, y);\n}\n\nfoo({});    // undefined 1\nfoo({x: 1});    // 1 1\nfoo({x:1, y: 2});   // 1 2\nfoo();  // TypeError: Cannot match against 'undefined' or 'null'.\n```\n\n上面代码使用了对象的解构赋值默认值，只有当函数`foo`的参数是一个对象时，变量`x`和`y`才会通过解构赋值生成，如果函数`foo`调用时参数不是对象，就无法进行解构赋值，从而报错。\n\n### 参数默认值的位置\n\n通常情况下，定义了默认值的参数，应该是函数的尾参数。因为这样比较容易看出来，到底省略了哪些参数。如果非尾参数设置默认值，其实这个参数是没法省略的。\n\n```javascript\nfunction f(x = 1, y) {\n    return [x, y];\n}\n\nf();    // [1, undefined]\nf(1);   // [1, undefined]\nf(,1);  // [1, 1]\nf(undefined, 1);    // [1, 1]\n\nfunction func(x, y = 1, z) {\n    return [x, y, z];\n}\n\nfunc();    // [undefined, 1, undefined]\nfunc(1);    // [1, 1, undefined]\nfunc(1, ,2);    // 报错\nfunc(1, undefined, 2);  // [1, 1, 2]\n```\n\n上面例子中，有默认值的参数都不是尾参数，此时，无法只省略该参数，而不省略它后面的参数，除非显示传入`undefined`。\n\n### 函数的`length`属性\n\n函数指定了默认值后，函数的`length`属性返回的就不再是函数参数个数，而是第一个指定默认值的前面参数个数。也就是说指定了默认值后，函数的`length`属性将失真。\n\n```javascript\n(function(a) {}).length // 1\n(function(a = 1) {}).length // 0\n(function(a, b, c = 1, d) {}).length   // 2\n(function(...args) {}).length   // 0\n```\n\n这是因为`length`属性的含义是，该函数预期传入的参数个数，某个参数指定默认值后，预期传入的参数个数就不包括这个参数及其后面的参数。同时，Rest参数也不会计入`length`属性。\n\n### 作用域\n\n一个需要注意的地方，如果参数默认值是一个变量，则该变量所处的作用域与其它变量的作用域一样，即先是当前函数的作用域，然后才是全局作用域。\n\n### 应用\n\n利用参数默认值，可以指定某个参数不得省略，如果省略则抛出一个错误。\n\n```javascript\nfunction throwIfMissing() {\n    throw new Error(\"Missing parameter\");\n}\n\nfunction foo(mustBeGiven = throwIfMissing()) {\n    return mustBeGiven;\n}\n\nfoo(); // Error: Missing parameter\n```\n\n上面代码中`foo`函数，如果调用的时候没有给出参数，则会调用默认值`throwIfMissing`函数，从而抛出一个错误。\n\n此外，还可以将参数默认值设为`undefined`，表明这个参数是可以省略的。\n\n```javascript\nfunction foo(optional = undefined) { ... }\n```\n\n### Rest参数\n\nRest参数接收函数的多余参数，组成一个数组，放在形参的最后，形式如下：\n\n```javascript\nfunction func(a, b, ...theArgs) {\n    // ...\n}\n```\n\n#### Rest参数和arguments对象的区别\n- rest参数只包括那些没有给出名称的参数，arguments包含所有参数；\n- arguments对象不是真正的array，而rest参数是Array的实例，可以直接应用sort, map, forEach, pop等方法；\n- arguments对象拥有一些自己额外的功能。\n\n#### 从arguments转向数组\n\nRest参数简化了使用arguments获取多余参数的方法。\n\n```javascript\n// Before rest parameters, the following could be found\nfunction func(a, b) {\n    var args = Array.prototype.slice.call(arguments, f.length);\n    \n    // ...\n}\n\n// to be equivalent of\nfunction func(a, b, ...args) {\n    // ...\n}\n```\n\n注意，rest参数之后不能再有其它参数（即，只能是最后一个参数），否则会报错。\n\n```javascript\nfunction func(a, ...b, c) {\n    // ...\n}\n// Rest parameter must be last formal parameter\n```\n\n函数的length属性，不包括rest参数：\n\n```javascript\n(function(a) {}).length     // 1\n(function(...a) {}).length      // 0\n(function(a, b, ...c)).length   // 2\n```\n\n### 展开运算符\n\n展开运算符（spread）是三个点（...）,可以将数组转为用逗号分隔的参数序列。如同rest参数的逆运算。\n\n#### 语法\n\n```javascript\nconsole.log(...[1, 2, 3])\n// 1 2 3\n\nconsole.log(1, ...[2, 3, 4], 5);\n// 1 2 3 4 5\n\n[...document.querySelectorAll('div')]\n// [<div>, <div>, <div>...]\n```\n\n用于数组字面量：\n\n```javascript\n[...iterableObj, 4, 5, 6]\n```\n\n用于函数调用：\n\n```javascript\nmyFunction(...iterableObj);\n```\n\n展开运算符主要用于函数调用，如下：\n\n```javascript\nfunction func(x, y, z, a, b) {\n    console.log(x, y, z, a, b);\n}\n\nvar args = [1, 2];\nfunc(0, ...args, 3, ...[4]);\n// 0 1 2 3 4\n```\n\n注意：任何实现了Iterator接口的对象，都可以用展开运算符转为真正的数组。\n\n#### 用法\n\n1. 替换apply方法\n\n展开运算符可以展开数组，因此可以替换apply方法，将数组转为函数的参数。\n\n```javascript\nfunction func(x, y, z) { }\nvar args = [0, 1, 2];\n\n// ES5写法\nfunc.apply(null, args);\n\n// ES6写法\nfunc(...args);\n```\n\n2. 更强大的数组字面量操作\n\n如果由一个已知数组创建一个新数组，数组字面量语法则不足以达到目的，必须结合push, splice, concat等方法。而展开运算符可以轻松实现这个目标：\n\n```javascript\nvar parts = ['shoulders', 'knees'];\nvar lyrics = ['head', ...parts, 'and', 'toes'];\n// [\"head\", \"shoulders\", \"knees\", \"and\", \"toes\"]\n```\n\n展开运算符可以用于任何数组字面量，并可以多次使用。\n\n3. 适用new\n\nJS的函数只能返回一个值，如果返回多个值就需要用到数组或对象。展开运算符提供了一种处理这种返回值的有效方法 \n\n4. 替换push方法\n\npush方法常用于将一个数组加入到另一个数组的结尾。在ES5中是这样做的：\n\n```javascript\nvar arr1 = [0, 1, 2], arr2 = [3, 4, 5];\n// Append all items in arr2 onto arr1\nArray.prototype.push.apply(arr1, arr2);\n```\n\npush方法的参数不能是数组，所以只好通过apply方法变通使用push方法。有了展开运算符，就可以像下面直接将数组传入push方法。\n\n```javascript\nvar arr1 = [0, 1, 2], arr2 = [3, 4, 5];\narr1.push(...arr2);\narr1 // [0, 1, 2, 3, 4, 5]\n```\n\n上面可以将返回的数组使用展开运算直接传入构造函数。\n\n5. 只用于可迭代的变量\n\n下面的用法就会报错：\n\n```javascript\nvar obj = {key1: 'value1'};\nvar args = [...obj]; // 报错\n\nfunction func(x) {\n    console.log(x);\n}\nfunc(...obj); // 报错\n```","slug":"es6_function_extentions","published":1,"updated":"2022-07-14T01:23:25.012Z","comments":1,"photos":[],"link":"","_id":"cl5lql4dh000j8ds6bcoz0dyq","content":"<blockquote>\n<p>ES6允许为函数参数设置默认值，即直接写在参数定义后面。函数参数默认值还可以与解构赋值(destructuring)的默认值，结合起来使用。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h3 id=\"参数默认值\"><a href=\"#参数默认值\" class=\"headerlink\" title=\"参数默认值\"></a>参数默认值</h3><h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><p>ES6允许为函数参数设置默认值，即直接写在参数定义后面。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">log</span>(<span class=\"params\">x, y = <span class=\"string\">&#x27;world&#x27;</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x, y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello&#x27;</span>);   <span class=\"comment\">// Hello world</span></span><br><span class=\"line\"><span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello&#x27;</span>, <span class=\"string\">&#x27;China&#x27;</span>);  <span class=\"comment\">// Hello China</span></span><br><span class=\"line\"><span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>);   <span class=\"comment\">// Hello </span></span><br></pre></td></tr></table></figure>\n<p>ES6的写法非常简洁自然，如下例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Point</span>(<span class=\"params\">x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> = x;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> = y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Point</span>();</span><br><span class=\"line\">p <span class=\"comment\">// &#123;x:0, y:0&#125;</span></span><br></pre></td></tr></table></figure>\n<p>除了简洁，ES6的写法还有两个好处：</p>\n<ul>\n<li>阅读代码的人，可以立刻意识到哪些参数是可以省略的，不用查看函数体或文档；</li>\n<li>有利于将来代码的优化，即使未来的版本在对外接口中，彻底去掉这个参数，也不会导致以前的代码无法运行。</li>\n</ul>\n<p>参数变量是默认声明的，所以不能用<code>let</code>或<code>const</code>再次声明。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">x = <span class=\"number\">0</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> x = <span class=\"number\">1</span>; <span class=\"comment\">// error</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> x = <span class=\"number\">2</span>; <span class=\"comment\">// error</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中，参数变量<code>x</code>是默认声明的，在函数体中，不能用<code>let</code>或<code>const</code>再次声明，否则会报错。</p>\n<h3 id=\"与解构赋值默认值结合使用\"><a href=\"#与解构赋值默认值结合使用\" class=\"headerlink\" title=\"与解构赋值默认值结合使用\"></a>与解构赋值默认值结合使用</h3><p>函数参数默认值是可以与解构赋值(destructuring)的默认值，结合起来使用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">&#123;x, y = <span class=\"number\">1</span>&#125;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x, y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(&#123;&#125;);    <span class=\"comment\">// undefined 1</span></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(&#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;);    <span class=\"comment\">// 1 1</span></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(&#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>&#125;);   <span class=\"comment\">// 1 2</span></span><br><span class=\"line\"><span class=\"title function_\">foo</span>();  <span class=\"comment\">// TypeError: Cannot match against &#x27;undefined&#x27; or &#x27;null&#x27;.</span></span><br></pre></td></tr></table></figure>\n<p>上面代码使用了对象的解构赋值默认值，只有当函数<code>foo</code>的参数是一个对象时，变量<code>x</code>和<code>y</code>才会通过解构赋值生成，如果函数<code>foo</code>调用时参数不是对象，就无法进行解构赋值，从而报错。</p>\n<h3 id=\"参数默认值的位置\"><a href=\"#参数默认值的位置\" class=\"headerlink\" title=\"参数默认值的位置\"></a>参数默认值的位置</h3><p>通常情况下，定义了默认值的参数，应该是函数的尾参数。因为这样比较容易看出来，到底省略了哪些参数。如果非尾参数设置默认值，其实这个参数是没法省略的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">x = <span class=\"number\">1</span>, y</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">f</span>();    <span class=\"comment\">// [1, undefined]</span></span><br><span class=\"line\"><span class=\"title function_\">f</span>(<span class=\"number\">1</span>);   <span class=\"comment\">// [1, undefined]</span></span><br><span class=\"line\"><span class=\"title function_\">f</span>(,<span class=\"number\">1</span>);  <span class=\"comment\">// [1, 1]</span></span><br><span class=\"line\"><span class=\"title function_\">f</span>(<span class=\"literal\">undefined</span>, <span class=\"number\">1</span>);    <span class=\"comment\">// [1, 1]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\">x, y = <span class=\"number\">1</span>, z</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [x, y, z];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">func</span>();    <span class=\"comment\">// [undefined, 1, undefined]</span></span><br><span class=\"line\"><span class=\"title function_\">func</span>(<span class=\"number\">1</span>);    <span class=\"comment\">// [1, 1, undefined]</span></span><br><span class=\"line\"><span class=\"title function_\">func</span>(<span class=\"number\">1</span>, ,<span class=\"number\">2</span>);    <span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"title function_\">func</span>(<span class=\"number\">1</span>, <span class=\"literal\">undefined</span>, <span class=\"number\">2</span>);  <span class=\"comment\">// [1, 1, 2]</span></span><br></pre></td></tr></table></figure>\n<p>上面例子中，有默认值的参数都不是尾参数，此时，无法只省略该参数，而不省略它后面的参数，除非显示传入<code>undefined</code>。</p>\n<h3 id=\"函数的length属性\"><a href=\"#函数的length属性\" class=\"headerlink\" title=\"函数的length属性\"></a>函数的<code>length</code>属性</h3><p>函数指定了默认值后，函数的<code>length</code>属性返回的就不再是函数参数个数，而是第一个指定默认值的前面参数个数。也就是说指定了默认值后，函数的<code>length</code>属性将失真。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\">a</span>) &#123;&#125;).<span class=\"property\">length</span> <span class=\"comment\">// 1</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\">a = <span class=\"number\">1</span></span>) &#123;&#125;).<span class=\"property\">length</span> <span class=\"comment\">// 0</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\">a, b, c = <span class=\"number\">1</span>, d</span>) &#123;&#125;).<span class=\"property\">length</span>   <span class=\"comment\">// 2</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\">...args</span>) &#123;&#125;).<span class=\"property\">length</span>   <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n<p>这是因为<code>length</code>属性的含义是，该函数预期传入的参数个数，某个参数指定默认值后，预期传入的参数个数就不包括这个参数及其后面的参数。同时，Rest参数也不会计入<code>length</code>属性。</p>\n<h3 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h3><p>一个需要注意的地方，如果参数默认值是一个变量，则该变量所处的作用域与其它变量的作用域一样，即先是当前函数的作用域，然后才是全局作用域。</p>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><p>利用参数默认值，可以指定某个参数不得省略，如果省略则抛出一个错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throwIfMissing</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Missing parameter&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">mustBeGiven = throwIfMissing()</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mustBeGiven;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(); <span class=\"comment\">// Error: Missing parameter</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中<code>foo</code>函数，如果调用的时候没有给出参数，则会调用默认值<code>throwIfMissing</code>函数，从而抛出一个错误。</p>\n<p>此外，还可以将参数默认值设为<code>undefined</code>，表明这个参数是可以省略的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">optional = <span class=\"literal\">undefined</span></span>) &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Rest参数\"><a href=\"#Rest参数\" class=\"headerlink\" title=\"Rest参数\"></a>Rest参数</h3><p>Rest参数接收函数的多余参数，组成一个数组，放在形参的最后，形式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\">a, b, ...theArgs</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Rest参数和arguments对象的区别\"><a href=\"#Rest参数和arguments对象的区别\" class=\"headerlink\" title=\"Rest参数和arguments对象的区别\"></a>Rest参数和arguments对象的区别</h4><ul>\n<li>rest参数只包括那些没有给出名称的参数，arguments包含所有参数；</li>\n<li>arguments对象不是真正的array，而rest参数是Array的实例，可以直接应用sort, map, forEach, pop等方法；</li>\n<li>arguments对象拥有一些自己额外的功能。</li>\n</ul>\n<h4 id=\"从arguments转向数组\"><a href=\"#从arguments转向数组\" class=\"headerlink\" title=\"从arguments转向数组\"></a>从arguments转向数组</h4><p>Rest参数简化了使用arguments获取多余参数的方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Before rest parameters, the following could be found</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>, f.<span class=\"property\">length</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// to be equivalent of</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\">a, b, ...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意，rest参数之后不能再有其它参数（即，只能是最后一个参数），否则会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\">a, ...b, c</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Rest parameter must be last formal parameter</span></span><br></pre></td></tr></table></figure>\n<p>函数的length属性，不包括rest参数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\">a</span>) &#123;&#125;).<span class=\"property\">length</span>     <span class=\"comment\">// 1</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\">...a</span>) &#123;&#125;).<span class=\"property\">length</span>      <span class=\"comment\">// 0</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\">a, b, ...c</span>)).<span class=\"property\">length</span>   <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"展开运算符\"><a href=\"#展开运算符\" class=\"headerlink\" title=\"展开运算符\"></a>展开运算符</h3><p>展开运算符（spread）是三个点（…）,可以将数组转为用逗号分隔的参数序列。如同rest参数的逆运算。</p>\n<h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(...[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>, ...[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3 4 5</span></span><br><span class=\"line\"></span><br><span class=\"line\">[...<span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;div&#x27;</span>)]</span><br><span class=\"line\"><span class=\"comment\">// [&lt;div&gt;, &lt;div&gt;, &lt;div&gt;...]</span></span><br></pre></td></tr></table></figure>\n<p>用于数组字面量：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[...iterableObj, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br></pre></td></tr></table></figure>\n<p>用于函数调用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">myFunction</span>(...iterableObj);</span><br></pre></td></tr></table></figure>\n<p>展开运算符主要用于函数调用，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\">x, y, z, a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x, y, z, a, b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> args = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"title function_\">func</span>(<span class=\"number\">0</span>, ...args, <span class=\"number\">3</span>, ...[<span class=\"number\">4</span>]);</span><br><span class=\"line\"><span class=\"comment\">// 0 1 2 3 4</span></span><br></pre></td></tr></table></figure>\n<p>注意：任何实现了Iterator接口的对象，都可以用展开运算符转为真正的数组。</p>\n<h4 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h4><ol>\n<li>替换apply方法</li>\n</ol>\n<p>展开运算符可以展开数组，因此可以替换apply方法，将数组转为函数的参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\">x, y, z</span>) &#123; &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> args = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES5写法</span></span><br><span class=\"line\">func.<span class=\"title function_\">apply</span>(<span class=\"literal\">null</span>, args);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6写法</span></span><br><span class=\"line\"><span class=\"title function_\">func</span>(...args);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>更强大的数组字面量操作</li>\n</ol>\n<p>如果由一个已知数组创建一个新数组，数组字面量语法则不足以达到目的，必须结合push, splice, concat等方法。而展开运算符可以轻松实现这个目标：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> parts = [<span class=\"string\">&#x27;shoulders&#x27;</span>, <span class=\"string\">&#x27;knees&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> lyrics = [<span class=\"string\">&#x27;head&#x27;</span>, ...parts, <span class=\"string\">&#x27;and&#x27;</span>, <span class=\"string\">&#x27;toes&#x27;</span>];</span><br><span class=\"line\"><span class=\"comment\">// [&quot;head&quot;, &quot;shoulders&quot;, &quot;knees&quot;, &quot;and&quot;, &quot;toes&quot;]</span></span><br></pre></td></tr></table></figure>\n<p>展开运算符可以用于任何数组字面量，并可以多次使用。</p>\n<ol start=\"3\">\n<li>适用new</li>\n</ol>\n<p>JS的函数只能返回一个值，如果返回多个值就需要用到数组或对象。展开运算符提供了一种处理这种返回值的有效方法 </p>\n<ol start=\"4\">\n<li>替换push方法</li>\n</ol>\n<p>push方法常用于将一个数组加入到另一个数组的结尾。在ES5中是这样做的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>], arr2 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"comment\">// Append all items in arr2 onto arr1</span></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">push</span>.<span class=\"title function_\">apply</span>(arr1, arr2);</span><br></pre></td></tr></table></figure>\n<p>push方法的参数不能是数组，所以只好通过apply方法变通使用push方法。有了展开运算符，就可以像下面直接将数组传入push方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>], arr2 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">arr1.<span class=\"title function_\">push</span>(...arr2);</span><br><span class=\"line\">arr1 <span class=\"comment\">// [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n<p>上面可以将返回的数组使用展开运算直接传入构造函数。</p>\n<ol start=\"5\">\n<li>只用于可迭代的变量</li>\n</ol>\n<p>下面的用法就会报错：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">key1</span>: <span class=\"string\">&#x27;value1&#x27;</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> args = [...obj]; <span class=\"comment\">// 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">func</span>(...obj); <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<blockquote>\n<p>ES6允许为函数参数设置默认值，即直接写在参数定义后面。函数参数默认值还可以与解构赋值(destructuring)的默认值，结合起来使用。</p>\n</blockquote>","more":"<h3 id=\"参数默认值\"><a href=\"#参数默认值\" class=\"headerlink\" title=\"参数默认值\"></a>参数默认值</h3><h3 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h3><p>ES6允许为函数参数设置默认值，即直接写在参数定义后面。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">log</span>(<span class=\"params\">x, y = <span class=\"string\">&#x27;world&#x27;</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x, y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello&#x27;</span>);   <span class=\"comment\">// Hello world</span></span><br><span class=\"line\"><span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello&#x27;</span>, <span class=\"string\">&#x27;China&#x27;</span>);  <span class=\"comment\">// Hello China</span></span><br><span class=\"line\"><span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>);   <span class=\"comment\">// Hello </span></span><br></pre></td></tr></table></figure>\n<p>ES6的写法非常简洁自然，如下例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Point</span>(<span class=\"params\">x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> = x;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> = y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Point</span>();</span><br><span class=\"line\">p <span class=\"comment\">// &#123;x:0, y:0&#125;</span></span><br></pre></td></tr></table></figure>\n<p>除了简洁，ES6的写法还有两个好处：</p>\n<ul>\n<li>阅读代码的人，可以立刻意识到哪些参数是可以省略的，不用查看函数体或文档；</li>\n<li>有利于将来代码的优化，即使未来的版本在对外接口中，彻底去掉这个参数，也不会导致以前的代码无法运行。</li>\n</ul>\n<p>参数变量是默认声明的，所以不能用<code>let</code>或<code>const</code>再次声明。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">x = <span class=\"number\">0</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> x = <span class=\"number\">1</span>; <span class=\"comment\">// error</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> x = <span class=\"number\">2</span>; <span class=\"comment\">// error</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中，参数变量<code>x</code>是默认声明的，在函数体中，不能用<code>let</code>或<code>const</code>再次声明，否则会报错。</p>\n<h3 id=\"与解构赋值默认值结合使用\"><a href=\"#与解构赋值默认值结合使用\" class=\"headerlink\" title=\"与解构赋值默认值结合使用\"></a>与解构赋值默认值结合使用</h3><p>函数参数默认值是可以与解构赋值(destructuring)的默认值，结合起来使用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">&#123;x, y = <span class=\"number\">1</span>&#125;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x, y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(&#123;&#125;);    <span class=\"comment\">// undefined 1</span></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(&#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;);    <span class=\"comment\">// 1 1</span></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(&#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>&#125;);   <span class=\"comment\">// 1 2</span></span><br><span class=\"line\"><span class=\"title function_\">foo</span>();  <span class=\"comment\">// TypeError: Cannot match against &#x27;undefined&#x27; or &#x27;null&#x27;.</span></span><br></pre></td></tr></table></figure>\n<p>上面代码使用了对象的解构赋值默认值，只有当函数<code>foo</code>的参数是一个对象时，变量<code>x</code>和<code>y</code>才会通过解构赋值生成，如果函数<code>foo</code>调用时参数不是对象，就无法进行解构赋值，从而报错。</p>\n<h3 id=\"参数默认值的位置\"><a href=\"#参数默认值的位置\" class=\"headerlink\" title=\"参数默认值的位置\"></a>参数默认值的位置</h3><p>通常情况下，定义了默认值的参数，应该是函数的尾参数。因为这样比较容易看出来，到底省略了哪些参数。如果非尾参数设置默认值，其实这个参数是没法省略的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">x = <span class=\"number\">1</span>, y</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">f</span>();    <span class=\"comment\">// [1, undefined]</span></span><br><span class=\"line\"><span class=\"title function_\">f</span>(<span class=\"number\">1</span>);   <span class=\"comment\">// [1, undefined]</span></span><br><span class=\"line\"><span class=\"title function_\">f</span>(,<span class=\"number\">1</span>);  <span class=\"comment\">// [1, 1]</span></span><br><span class=\"line\"><span class=\"title function_\">f</span>(<span class=\"literal\">undefined</span>, <span class=\"number\">1</span>);    <span class=\"comment\">// [1, 1]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\">x, y = <span class=\"number\">1</span>, z</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [x, y, z];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">func</span>();    <span class=\"comment\">// [undefined, 1, undefined]</span></span><br><span class=\"line\"><span class=\"title function_\">func</span>(<span class=\"number\">1</span>);    <span class=\"comment\">// [1, 1, undefined]</span></span><br><span class=\"line\"><span class=\"title function_\">func</span>(<span class=\"number\">1</span>, ,<span class=\"number\">2</span>);    <span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"title function_\">func</span>(<span class=\"number\">1</span>, <span class=\"literal\">undefined</span>, <span class=\"number\">2</span>);  <span class=\"comment\">// [1, 1, 2]</span></span><br></pre></td></tr></table></figure>\n<p>上面例子中，有默认值的参数都不是尾参数，此时，无法只省略该参数，而不省略它后面的参数，除非显示传入<code>undefined</code>。</p>\n<h3 id=\"函数的length属性\"><a href=\"#函数的length属性\" class=\"headerlink\" title=\"函数的length属性\"></a>函数的<code>length</code>属性</h3><p>函数指定了默认值后，函数的<code>length</code>属性返回的就不再是函数参数个数，而是第一个指定默认值的前面参数个数。也就是说指定了默认值后，函数的<code>length</code>属性将失真。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\">a</span>) &#123;&#125;).<span class=\"property\">length</span> <span class=\"comment\">// 1</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\">a = <span class=\"number\">1</span></span>) &#123;&#125;).<span class=\"property\">length</span> <span class=\"comment\">// 0</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\">a, b, c = <span class=\"number\">1</span>, d</span>) &#123;&#125;).<span class=\"property\">length</span>   <span class=\"comment\">// 2</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\">...args</span>) &#123;&#125;).<span class=\"property\">length</span>   <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n<p>这是因为<code>length</code>属性的含义是，该函数预期传入的参数个数，某个参数指定默认值后，预期传入的参数个数就不包括这个参数及其后面的参数。同时，Rest参数也不会计入<code>length</code>属性。</p>\n<h3 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h3><p>一个需要注意的地方，如果参数默认值是一个变量，则该变量所处的作用域与其它变量的作用域一样，即先是当前函数的作用域，然后才是全局作用域。</p>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><p>利用参数默认值，可以指定某个参数不得省略，如果省略则抛出一个错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throwIfMissing</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;Missing parameter&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">mustBeGiven = throwIfMissing()</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mustBeGiven;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(); <span class=\"comment\">// Error: Missing parameter</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中<code>foo</code>函数，如果调用的时候没有给出参数，则会调用默认值<code>throwIfMissing</code>函数，从而抛出一个错误。</p>\n<p>此外，还可以将参数默认值设为<code>undefined</code>，表明这个参数是可以省略的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">optional = <span class=\"literal\">undefined</span></span>) &#123; ... &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Rest参数\"><a href=\"#Rest参数\" class=\"headerlink\" title=\"Rest参数\"></a>Rest参数</h3><p>Rest参数接收函数的多余参数，组成一个数组，放在形参的最后，形式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\">a, b, ...theArgs</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Rest参数和arguments对象的区别\"><a href=\"#Rest参数和arguments对象的区别\" class=\"headerlink\" title=\"Rest参数和arguments对象的区别\"></a>Rest参数和arguments对象的区别</h4><ul>\n<li>rest参数只包括那些没有给出名称的参数，arguments包含所有参数；</li>\n<li>arguments对象不是真正的array，而rest参数是Array的实例，可以直接应用sort, map, forEach, pop等方法；</li>\n<li>arguments对象拥有一些自己额外的功能。</li>\n</ul>\n<h4 id=\"从arguments转向数组\"><a href=\"#从arguments转向数组\" class=\"headerlink\" title=\"从arguments转向数组\"></a>从arguments转向数组</h4><p>Rest参数简化了使用arguments获取多余参数的方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Before rest parameters, the following could be found</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">slice</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>, f.<span class=\"property\">length</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// to be equivalent of</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\">a, b, ...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意，rest参数之后不能再有其它参数（即，只能是最后一个参数），否则会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\">a, ...b, c</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Rest parameter must be last formal parameter</span></span><br></pre></td></tr></table></figure>\n<p>函数的length属性，不包括rest参数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\">a</span>) &#123;&#125;).<span class=\"property\">length</span>     <span class=\"comment\">// 1</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\">...a</span>) &#123;&#125;).<span class=\"property\">length</span>      <span class=\"comment\">// 0</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\">a, b, ...c</span>)).<span class=\"property\">length</span>   <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"展开运算符\"><a href=\"#展开运算符\" class=\"headerlink\" title=\"展开运算符\"></a>展开运算符</h3><p>展开运算符（spread）是三个点（…）,可以将数组转为用逗号分隔的参数序列。如同rest参数的逆运算。</p>\n<h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(...[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>, ...[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3 4 5</span></span><br><span class=\"line\"></span><br><span class=\"line\">[...<span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;div&#x27;</span>)]</span><br><span class=\"line\"><span class=\"comment\">// [&lt;div&gt;, &lt;div&gt;, &lt;div&gt;...]</span></span><br></pre></td></tr></table></figure>\n<p>用于数组字面量：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[...iterableObj, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br></pre></td></tr></table></figure>\n<p>用于函数调用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">myFunction</span>(...iterableObj);</span><br></pre></td></tr></table></figure>\n<p>展开运算符主要用于函数调用，如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\">x, y, z, a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x, y, z, a, b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> args = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"title function_\">func</span>(<span class=\"number\">0</span>, ...args, <span class=\"number\">3</span>, ...[<span class=\"number\">4</span>]);</span><br><span class=\"line\"><span class=\"comment\">// 0 1 2 3 4</span></span><br></pre></td></tr></table></figure>\n<p>注意：任何实现了Iterator接口的对象，都可以用展开运算符转为真正的数组。</p>\n<h4 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h4><ol>\n<li>替换apply方法</li>\n</ol>\n<p>展开运算符可以展开数组，因此可以替换apply方法，将数组转为函数的参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\">x, y, z</span>) &#123; &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> args = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES5写法</span></span><br><span class=\"line\">func.<span class=\"title function_\">apply</span>(<span class=\"literal\">null</span>, args);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6写法</span></span><br><span class=\"line\"><span class=\"title function_\">func</span>(...args);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>更强大的数组字面量操作</li>\n</ol>\n<p>如果由一个已知数组创建一个新数组，数组字面量语法则不足以达到目的，必须结合push, splice, concat等方法。而展开运算符可以轻松实现这个目标：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> parts = [<span class=\"string\">&#x27;shoulders&#x27;</span>, <span class=\"string\">&#x27;knees&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> lyrics = [<span class=\"string\">&#x27;head&#x27;</span>, ...parts, <span class=\"string\">&#x27;and&#x27;</span>, <span class=\"string\">&#x27;toes&#x27;</span>];</span><br><span class=\"line\"><span class=\"comment\">// [&quot;head&quot;, &quot;shoulders&quot;, &quot;knees&quot;, &quot;and&quot;, &quot;toes&quot;]</span></span><br></pre></td></tr></table></figure>\n<p>展开运算符可以用于任何数组字面量，并可以多次使用。</p>\n<ol start=\"3\">\n<li>适用new</li>\n</ol>\n<p>JS的函数只能返回一个值，如果返回多个值就需要用到数组或对象。展开运算符提供了一种处理这种返回值的有效方法 </p>\n<ol start=\"4\">\n<li>替换push方法</li>\n</ol>\n<p>push方法常用于将一个数组加入到另一个数组的结尾。在ES5中是这样做的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>], arr2 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"comment\">// Append all items in arr2 onto arr1</span></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">push</span>.<span class=\"title function_\">apply</span>(arr1, arr2);</span><br></pre></td></tr></table></figure>\n<p>push方法的参数不能是数组，所以只好通过apply方法变通使用push方法。有了展开运算符，就可以像下面直接将数组传入push方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>], arr2 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">arr1.<span class=\"title function_\">push</span>(...arr2);</span><br><span class=\"line\">arr1 <span class=\"comment\">// [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n<p>上面可以将返回的数组使用展开运算直接传入构造函数。</p>\n<ol start=\"5\">\n<li>只用于可迭代的变量</li>\n</ol>\n<p>下面的用法就会报错：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">key1</span>: <span class=\"string\">&#x27;value1&#x27;</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> args = [...obj]; <span class=\"comment\">// 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">func</span>(...obj); <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"Express","date":"2016-07-29T07:10:00.000Z","_content":"\n> Fast, unopinionated, minimalist web framework for Node.js.\n\n<!--more-->\n\n## What is Express?\n\n> Express is a minimal and flexible Node.js web application framework.   \nIt provides a robust set of features for web and mobile applications.\n\n\n## Why choose it?\n\n#### APIs\n\n> A myriad of HTTP utility methods and middleware\nQuick and easy to create a robust API\n\n#### Performance\n\n> Provides a thin layer of fundamental web application features\n\n#### Frameworks\n\n> Many popular frameworks are based on Express: \nFeathers, KeystoneJS, LoopBack, MEA, Sails…\n\n\n## How to use it?\n\n- Install Node.js\n- Create project & Install express\n\n```bash\n$ npm install express –save\n```\n\n- Run\n\nCreate index.js, add the following code:\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/', function (req, res) {\n  res.send('Hello World!');\n});\n\napp.listen(3000, function () {\n  console.log('Example app listening on port 3000!');\n});\n```\n\n```bash\n$ node index.js\n```\n\nRun the above command to start your app.\n\n### Reference\n\n[Express](http://expressjs.com/)\n","source":"_posts/express.md","raw":"---\nlayout: post\ntitle: Express\ntags: [express,js,framework]\ndate: 2016-07-29 15:10:00 +800\n---\n\n> Fast, unopinionated, minimalist web framework for Node.js.\n\n<!--more-->\n\n## What is Express?\n\n> Express is a minimal and flexible Node.js web application framework.   \nIt provides a robust set of features for web and mobile applications.\n\n\n## Why choose it?\n\n#### APIs\n\n> A myriad of HTTP utility methods and middleware\nQuick and easy to create a robust API\n\n#### Performance\n\n> Provides a thin layer of fundamental web application features\n\n#### Frameworks\n\n> Many popular frameworks are based on Express: \nFeathers, KeystoneJS, LoopBack, MEA, Sails…\n\n\n## How to use it?\n\n- Install Node.js\n- Create project & Install express\n\n```bash\n$ npm install express –save\n```\n\n- Run\n\nCreate index.js, add the following code:\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/', function (req, res) {\n  res.send('Hello World!');\n});\n\napp.listen(3000, function () {\n  console.log('Example app listening on port 3000!');\n});\n```\n\n```bash\n$ node index.js\n```\n\nRun the above command to start your app.\n\n### Reference\n\n[Express](http://expressjs.com/)\n","slug":"express","published":1,"updated":"2022-07-14T01:23:25.012Z","comments":1,"photos":[],"link":"","_id":"cl5lql4di000l8ds6ac7ghkfy","content":"<blockquote>\n<p>Fast, unopinionated, minimalist web framework for Node.js.</p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"What-is-Express\"><a href=\"#What-is-Express\" class=\"headerlink\" title=\"What is Express?\"></a>What is Express?</h2><blockquote>\n<p>Express is a minimal and flexible Node.js web application framework.<br>It provides a robust set of features for web and mobile applications.</p>\n</blockquote>\n<h2 id=\"Why-choose-it\"><a href=\"#Why-choose-it\" class=\"headerlink\" title=\"Why choose it?\"></a>Why choose it?</h2><h4 id=\"APIs\"><a href=\"#APIs\" class=\"headerlink\" title=\"APIs\"></a>APIs</h4><blockquote>\n<p>A myriad of HTTP utility methods and middleware<br>Quick and easy to create a robust API</p>\n</blockquote>\n<h4 id=\"Performance\"><a href=\"#Performance\" class=\"headerlink\" title=\"Performance\"></a>Performance</h4><blockquote>\n<p>Provides a thin layer of fundamental web application features</p>\n</blockquote>\n<h4 id=\"Frameworks\"><a href=\"#Frameworks\" class=\"headerlink\" title=\"Frameworks\"></a>Frameworks</h4><blockquote>\n<p>Many popular frameworks are based on Express:<br>Feathers, KeystoneJS, LoopBack, MEA, Sails…</p>\n</blockquote>\n<h2 id=\"How-to-use-it\"><a href=\"#How-to-use-it\" class=\"headerlink\" title=\"How to use it?\"></a>How to use it?</h2><ul>\n<li>Install Node.js</li>\n<li>Create project &amp; Install express</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install express –save</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Run</li>\n</ul>\n<p>Create index.js, add the following code:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;Hello World!&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Example app listening on port 3000!&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node index.js</span><br></pre></td></tr></table></figure>\n<p>Run the above command to start your app.</p>\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><p><a href=\"http://expressjs.com/\">Express</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>Fast, unopinionated, minimalist web framework for Node.js.</p>\n</blockquote>","more":"<h2 id=\"What-is-Express\"><a href=\"#What-is-Express\" class=\"headerlink\" title=\"What is Express?\"></a>What is Express?</h2><blockquote>\n<p>Express is a minimal and flexible Node.js web application framework.<br>It provides a robust set of features for web and mobile applications.</p>\n</blockquote>\n<h2 id=\"Why-choose-it\"><a href=\"#Why-choose-it\" class=\"headerlink\" title=\"Why choose it?\"></a>Why choose it?</h2><h4 id=\"APIs\"><a href=\"#APIs\" class=\"headerlink\" title=\"APIs\"></a>APIs</h4><blockquote>\n<p>A myriad of HTTP utility methods and middleware<br>Quick and easy to create a robust API</p>\n</blockquote>\n<h4 id=\"Performance\"><a href=\"#Performance\" class=\"headerlink\" title=\"Performance\"></a>Performance</h4><blockquote>\n<p>Provides a thin layer of fundamental web application features</p>\n</blockquote>\n<h4 id=\"Frameworks\"><a href=\"#Frameworks\" class=\"headerlink\" title=\"Frameworks\"></a>Frameworks</h4><blockquote>\n<p>Many popular frameworks are based on Express:<br>Feathers, KeystoneJS, LoopBack, MEA, Sails…</p>\n</blockquote>\n<h2 id=\"How-to-use-it\"><a href=\"#How-to-use-it\" class=\"headerlink\" title=\"How to use it?\"></a>How to use it?</h2><ul>\n<li>Install Node.js</li>\n<li>Create project &amp; Install express</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install express –save</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Run</li>\n</ul>\n<p>Create index.js, add the following code:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;Hello World!&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">3000</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Example app listening on port 3000!&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node index.js</span><br></pre></td></tr></table></figure>\n<p>Run the above command to start your app.</p>\n<h3 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h3><p><a href=\"http://expressjs.com/\">Express</a></p>"},{"layout":"post","title":"How to list and delete branches","date":"2016-07-29T08:06:00.000Z","_content":"\n> Git list different demanded branches and delete branches both local and remote.\n\n<!--more-->\n\n## List branches\n\n```bash\n# list your local branches\n$ git branch\n\n# list your remote branches\n$ git branch -r\n\n# list both remote and local branches\n$ git branch -a\n```\n\n## See the last commit on each Branch\n\n```bash\n$ git branch -v\n```\n\n### List merged or not merged branches\n\n```bash\n# list the branches that are already merged into the branch you're on\n$ git branch --merged\n\n# list the branches that contain work you haven't yet merged in\n$ git branch --no-merged\n```\n\n## Delete branches\n\n```\n# delete a local branch\n$ git branch -d <<local_branch_name>>\n\n# delete a remote branch\n$ git push origin :<<remote_branch_name>>\n```\n\nIf you have other branches that contain work that haven't merged in yet, trying to delete it with `git branch -d` will fail.   \nBut if you really do want to delete the branch and lose that work, you can force it with -D.\n\n```bash\n# force to delete an unmerged branch\n$ git branch -D <<local_branch_name>>\n```\n\n## Reference\n\n[Git Branching - Branch Management](https://git-scm.com/book/en/v2/Git-Branching-Branch-Management)   \n\n","source":"_posts/list_delete_branches.md","raw":"---\nlayout: post\ntitle: How to list and delete branches\ntags: [git,branch,list,delete]\ndate: 2016-07-29 16:06 +800\n---\n\n> Git list different demanded branches and delete branches both local and remote.\n\n<!--more-->\n\n## List branches\n\n```bash\n# list your local branches\n$ git branch\n\n# list your remote branches\n$ git branch -r\n\n# list both remote and local branches\n$ git branch -a\n```\n\n## See the last commit on each Branch\n\n```bash\n$ git branch -v\n```\n\n### List merged or not merged branches\n\n```bash\n# list the branches that are already merged into the branch you're on\n$ git branch --merged\n\n# list the branches that contain work you haven't yet merged in\n$ git branch --no-merged\n```\n\n## Delete branches\n\n```\n# delete a local branch\n$ git branch -d <<local_branch_name>>\n\n# delete a remote branch\n$ git push origin :<<remote_branch_name>>\n```\n\nIf you have other branches that contain work that haven't merged in yet, trying to delete it with `git branch -d` will fail.   \nBut if you really do want to delete the branch and lose that work, you can force it with -D.\n\n```bash\n# force to delete an unmerged branch\n$ git branch -D <<local_branch_name>>\n```\n\n## Reference\n\n[Git Branching - Branch Management](https://git-scm.com/book/en/v2/Git-Branching-Branch-Management)   \n\n","slug":"list_delete_branches","published":1,"updated":"2022-07-14T01:23:25.012Z","comments":1,"photos":[],"link":"","_id":"cl5lql4dj000o8ds61ck1449d","content":"<blockquote>\n<p>Git list different demanded branches and delete branches both local and remote.</p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"List-branches\"><a href=\"#List-branches\" class=\"headerlink\" title=\"List branches\"></a>List branches</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># list your local branches</span></span><br><span class=\"line\">$ git branch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># list your remote branches</span></span><br><span class=\"line\">$ git branch -r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># list both remote and local branches</span></span><br><span class=\"line\">$ git branch -a</span><br></pre></td></tr></table></figure>\n<h2 id=\"See-the-last-commit-on-each-Branch\"><a href=\"#See-the-last-commit-on-each-Branch\" class=\"headerlink\" title=\"See the last commit on each Branch\"></a>See the last commit on each Branch</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -v</span><br></pre></td></tr></table></figure>\n<h3 id=\"List-merged-or-not-merged-branches\"><a href=\"#List-merged-or-not-merged-branches\" class=\"headerlink\" title=\"List merged or not merged branches\"></a>List merged or not merged branches</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># list the branches that are already merged into the branch you&#x27;re on</span></span><br><span class=\"line\">$ git branch --merged</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># list the branches that contain work you haven&#x27;t yet merged in</span></span><br><span class=\"line\">$ git branch --no-merged</span><br></pre></td></tr></table></figure>\n<h2 id=\"Delete-branches\"><a href=\"#Delete-branches\" class=\"headerlink\" title=\"Delete branches\"></a>Delete branches</h2><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"keyword\">delete</span> a <span class=\"keyword\">local</span> branch</span><br><span class=\"line\">$ git branch -d <span class=\"symbol\">&lt;&lt;local_branch_name&gt;&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># <span class=\"keyword\">delete</span> a remote branch</span><br><span class=\"line\">$ git push origin :<span class=\"symbol\">&lt;&lt;remote_branch_name&gt;&gt;</span></span><br></pre></td></tr></table></figure>\n<p>If you have other branches that contain work that haven’t merged in yet, trying to delete it with <code>git branch -d</code> will fail.<br>But if you really do want to delete the branch and lose that work, you can force it with -D.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># force to delete an unmerged branch</span></span><br><span class=\"line\">$ git branch -D &lt;&lt;<span class=\"string\">local_branch_name&gt;&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://git-scm.com/book/en/v2/Git-Branching-Branch-Management\">Git Branching - Branch Management</a>   </p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>Git list different demanded branches and delete branches both local and remote.</p>\n</blockquote>","more":"<h2 id=\"List-branches\"><a href=\"#List-branches\" class=\"headerlink\" title=\"List branches\"></a>List branches</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># list your local branches</span></span><br><span class=\"line\">$ git branch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># list your remote branches</span></span><br><span class=\"line\">$ git branch -r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># list both remote and local branches</span></span><br><span class=\"line\">$ git branch -a</span><br></pre></td></tr></table></figure>\n<h2 id=\"See-the-last-commit-on-each-Branch\"><a href=\"#See-the-last-commit-on-each-Branch\" class=\"headerlink\" title=\"See the last commit on each Branch\"></a>See the last commit on each Branch</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -v</span><br></pre></td></tr></table></figure>\n<h3 id=\"List-merged-or-not-merged-branches\"><a href=\"#List-merged-or-not-merged-branches\" class=\"headerlink\" title=\"List merged or not merged branches\"></a>List merged or not merged branches</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># list the branches that are already merged into the branch you&#x27;re on</span></span><br><span class=\"line\">$ git branch --merged</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># list the branches that contain work you haven&#x27;t yet merged in</span></span><br><span class=\"line\">$ git branch --no-merged</span><br></pre></td></tr></table></figure>\n<h2 id=\"Delete-branches\"><a href=\"#Delete-branches\" class=\"headerlink\" title=\"Delete branches\"></a>Delete branches</h2><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># <span class=\"keyword\">delete</span> a <span class=\"keyword\">local</span> branch</span><br><span class=\"line\">$ git branch -d <span class=\"symbol\">&lt;&lt;local_branch_name&gt;&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"># <span class=\"keyword\">delete</span> a remote branch</span><br><span class=\"line\">$ git push origin :<span class=\"symbol\">&lt;&lt;remote_branch_name&gt;&gt;</span></span><br></pre></td></tr></table></figure>\n<p>If you have other branches that contain work that haven’t merged in yet, trying to delete it with <code>git branch -d</code> will fail.<br>But if you really do want to delete the branch and lose that work, you can force it with -D.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># force to delete an unmerged branch</span></span><br><span class=\"line\">$ git branch -D &lt;&lt;<span class=\"string\">local_branch_name&gt;&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://git-scm.com/book/en/v2/Git-Branching-Branch-Management\">Git Branching - Branch Management</a>   </p>"},{"layout":"post","title":"Some useful Mac tips","date":"2017-07-05T02:00:00.000Z","_content":"\n> 本文列出了一些Mac使用中的技巧，有助于提高工作效率。\n\n<!--more-->\n\n### 基本快捷键\n\n显示桌面：`F11`   \n隐藏窗口： `command + H`, `command + option + H`   \n最小化当前窗口： `command + M`   \n新建： `command + N`, `command + T`   \n打开/插入文件： `command + O`   \n打印：`command + P`   \n关闭：`command + W`   \n退出：`command + Q`\n\n### 截屏\n截取所选屏幕区域到一个文件：`command + shift + 4`   \n截取全部屏幕到文件：`command + shift + 3`  \n截取全部屏幕到剪贴板： `command + shift + control + 3`  \n\n> ***Tips***：修改默认存储截屏目录可使用以下命令：  \ndefaults write com.apple.screencapture location [目录]\n\n### 在应用中的使用技巧\n\n重做，撤销的逆向操作： `command + shift + Z`, `command + Y`  \n将光标移至当前行的行尾/首： `command + 右箭头/左箭头`  \n向后删除：`fn + delete`  \n向上/下滚动一页，跳至文稿首/尾：`fn/command + 上/下/左/右`  \n将光标移至一个单词的首/尾：`option + 左/右`\n\n### Finder的使用技巧\n\n剪切文件：`command + option + V`  \n新建文件夹：`command + shift + N`  \n输入绝对路径直达文件夹： `command + shift + G`  \n删除：`command + delete`  \n清空垃圾箱：`command + shift + delete`\n\n### 浏览器使用技巧\n\n刷新：`command + R`, `command + shift + R`  \n切换tab：`control + tab`, `command +shift +[ ]`  \n光标直接跳至地址栏：`command + L`\n","source":"_posts/mac_useful_tips.md","raw":"---\nlayout: post\ntitle: Some useful Mac tips\ntags: [mac,tips]\ndate: 2017-07-05 10:00:00 +800\n---\n\n> 本文列出了一些Mac使用中的技巧，有助于提高工作效率。\n\n<!--more-->\n\n### 基本快捷键\n\n显示桌面：`F11`   \n隐藏窗口： `command + H`, `command + option + H`   \n最小化当前窗口： `command + M`   \n新建： `command + N`, `command + T`   \n打开/插入文件： `command + O`   \n打印：`command + P`   \n关闭：`command + W`   \n退出：`command + Q`\n\n### 截屏\n截取所选屏幕区域到一个文件：`command + shift + 4`   \n截取全部屏幕到文件：`command + shift + 3`  \n截取全部屏幕到剪贴板： `command + shift + control + 3`  \n\n> ***Tips***：修改默认存储截屏目录可使用以下命令：  \ndefaults write com.apple.screencapture location [目录]\n\n### 在应用中的使用技巧\n\n重做，撤销的逆向操作： `command + shift + Z`, `command + Y`  \n将光标移至当前行的行尾/首： `command + 右箭头/左箭头`  \n向后删除：`fn + delete`  \n向上/下滚动一页，跳至文稿首/尾：`fn/command + 上/下/左/右`  \n将光标移至一个单词的首/尾：`option + 左/右`\n\n### Finder的使用技巧\n\n剪切文件：`command + option + V`  \n新建文件夹：`command + shift + N`  \n输入绝对路径直达文件夹： `command + shift + G`  \n删除：`command + delete`  \n清空垃圾箱：`command + shift + delete`\n\n### 浏览器使用技巧\n\n刷新：`command + R`, `command + shift + R`  \n切换tab：`control + tab`, `command +shift +[ ]`  \n光标直接跳至地址栏：`command + L`\n","slug":"mac_useful_tips","published":1,"updated":"2022-07-14T01:23:25.012Z","comments":1,"photos":[],"link":"","_id":"cl5lql4dj000q8ds6gm47fb9z","content":"<blockquote>\n<p>本文列出了一些Mac使用中的技巧，有助于提高工作效率。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h3 id=\"基本快捷键\"><a href=\"#基本快捷键\" class=\"headerlink\" title=\"基本快捷键\"></a>基本快捷键</h3><p>显示桌面：<code>F11</code><br>隐藏窗口： <code>command + H</code>, <code>command + option + H</code><br>最小化当前窗口： <code>command + M</code><br>新建： <code>command + N</code>, <code>command + T</code><br>打开/插入文件： <code>command + O</code><br>打印：<code>command + P</code><br>关闭：<code>command + W</code><br>退出：<code>command + Q</code></p>\n<h3 id=\"截屏\"><a href=\"#截屏\" class=\"headerlink\" title=\"截屏\"></a>截屏</h3><p>截取所选屏幕区域到一个文件：<code>command + shift + 4</code><br>截取全部屏幕到文件：<code>command + shift + 3</code><br>截取全部屏幕到剪贴板： <code>command + shift + control + 3</code>  </p>\n<blockquote>\n<p><strong><em>Tips</em></strong>：修改默认存储截屏目录可使用以下命令：<br>defaults write com.apple.screencapture location [目录]</p>\n</blockquote>\n<h3 id=\"在应用中的使用技巧\"><a href=\"#在应用中的使用技巧\" class=\"headerlink\" title=\"在应用中的使用技巧\"></a>在应用中的使用技巧</h3><p>重做，撤销的逆向操作： <code>command + shift + Z</code>, <code>command + Y</code><br>将光标移至当前行的行尾/首： <code>command + 右箭头/左箭头</code><br>向后删除：<code>fn + delete</code><br>向上/下滚动一页，跳至文稿首/尾：<code>fn/command + 上/下/左/右</code><br>将光标移至一个单词的首/尾：<code>option + 左/右</code></p>\n<h3 id=\"Finder的使用技巧\"><a href=\"#Finder的使用技巧\" class=\"headerlink\" title=\"Finder的使用技巧\"></a>Finder的使用技巧</h3><p>剪切文件：<code>command + option + V</code><br>新建文件夹：<code>command + shift + N</code><br>输入绝对路径直达文件夹： <code>command + shift + G</code><br>删除：<code>command + delete</code><br>清空垃圾箱：<code>command + shift + delete</code></p>\n<h3 id=\"浏览器使用技巧\"><a href=\"#浏览器使用技巧\" class=\"headerlink\" title=\"浏览器使用技巧\"></a>浏览器使用技巧</h3><p>刷新：<code>command + R</code>, <code>command + shift + R</code><br>切换tab：<code>control + tab</code>, <code>command +shift +[ ]</code><br>光标直接跳至地址栏：<code>command + L</code></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本文列出了一些Mac使用中的技巧，有助于提高工作效率。</p>\n</blockquote>","more":"<h3 id=\"基本快捷键\"><a href=\"#基本快捷键\" class=\"headerlink\" title=\"基本快捷键\"></a>基本快捷键</h3><p>显示桌面：<code>F11</code><br>隐藏窗口： <code>command + H</code>, <code>command + option + H</code><br>最小化当前窗口： <code>command + M</code><br>新建： <code>command + N</code>, <code>command + T</code><br>打开/插入文件： <code>command + O</code><br>打印：<code>command + P</code><br>关闭：<code>command + W</code><br>退出：<code>command + Q</code></p>\n<h3 id=\"截屏\"><a href=\"#截屏\" class=\"headerlink\" title=\"截屏\"></a>截屏</h3><p>截取所选屏幕区域到一个文件：<code>command + shift + 4</code><br>截取全部屏幕到文件：<code>command + shift + 3</code><br>截取全部屏幕到剪贴板： <code>command + shift + control + 3</code>  </p>\n<blockquote>\n<p><strong><em>Tips</em></strong>：修改默认存储截屏目录可使用以下命令：<br>defaults write com.apple.screencapture location [目录]</p>\n</blockquote>\n<h3 id=\"在应用中的使用技巧\"><a href=\"#在应用中的使用技巧\" class=\"headerlink\" title=\"在应用中的使用技巧\"></a>在应用中的使用技巧</h3><p>重做，撤销的逆向操作： <code>command + shift + Z</code>, <code>command + Y</code><br>将光标移至当前行的行尾/首： <code>command + 右箭头/左箭头</code><br>向后删除：<code>fn + delete</code><br>向上/下滚动一页，跳至文稿首/尾：<code>fn/command + 上/下/左/右</code><br>将光标移至一个单词的首/尾：<code>option + 左/右</code></p>\n<h3 id=\"Finder的使用技巧\"><a href=\"#Finder的使用技巧\" class=\"headerlink\" title=\"Finder的使用技巧\"></a>Finder的使用技巧</h3><p>剪切文件：<code>command + option + V</code><br>新建文件夹：<code>command + shift + N</code><br>输入绝对路径直达文件夹： <code>command + shift + G</code><br>删除：<code>command + delete</code><br>清空垃圾箱：<code>command + shift + delete</code></p>\n<h3 id=\"浏览器使用技巧\"><a href=\"#浏览器使用技巧\" class=\"headerlink\" title=\"浏览器使用技巧\"></a>浏览器使用技巧</h3><p>刷新：<code>command + R</code>, <code>command + shift + R</code><br>切换tab：<code>control + tab</code>, <code>command +shift +[ ]</code><br>光标直接跳至地址栏：<code>command + L</code></p>"},{"title":"How to use hexo","date":"2015-01-01T01:22:30.000Z","_content":"\n> Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--more-->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/how-to-use-hexo.md","raw":"---\ntitle: How to use hexo\ndate: 2015-01-01 09:22:30 +800\n---\n\n> Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--more-->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"how-to-use-hexo","published":1,"updated":"2022-07-18T08:57:33.318Z","_id":"cl5lql4dk000s8ds6fai8dc7r","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n</blockquote>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>"},{"layout":"post","title":"Meta http-equiv属性值X-UA-Compatible","date":"2016-07-27T09:00:00.000Z","_content":"\n> X-UA-Compatible是IE8的一个专有meta属性，对于IE8以下的浏览器是不识别的。通过在meta中设置## X-UA-Compatible的值，可以指定网页的兼容性模式。在HTML的`<head>`标签中使用。\n\n<!--more-->\n\n## Why X-UA-Compatible\n\n在IE8刚推出时，由于重构的问题，无法适应较高级的浏览器，所以使用X-UA-Compatible标签强制IE8采用低版本方式渲染。\n\n使用下面代码后，开发者无需考虑网页是否兼容IE8，只要确保网页在IE6、IE7下的表现就可以了。\n\n```html\n<!-- emulate仿真 -->\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=EmulateIE7\">\n```\n\n### 使用Edge引擎渲染网页\n\n```html\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n```\n\n### 使用Edge引擎渲染网页，同时启用Google Chrome Frame\n\n```html\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n```\n\nGoogle Chrome Frame，官方正式中文名“谷歌浏览器内嵌框架”，是Google推出的一款免费IE专用插件，使用该插件，用户可以通过IE的用户界面，以Chrome内核的渲染方式浏览网页。Chrome Frame会把最新的Chrome Webkit内核和JavaScript引擎注入到IE中。\n\n通过在页面中加入上面一行代码，当安装有Chrome Frame插件的IE浏览器发现这行代码时，马上使用基于Webkit的Chrome渲染引擎替换IE自身的渲染引擎，而其它浏览器将忽略此行代码，不会影响代码执行。\n\n","source":"_posts/meta_x-ua-compatible.md","raw":"---\nlayout: post\ntitle: Meta http-equiv属性值X-UA-Compatible\ntags: [meta,X-UA-Compatible,http-equiv]\ndate: 2016-07-27 17:00:00 +800\n---\n\n> X-UA-Compatible是IE8的一个专有meta属性，对于IE8以下的浏览器是不识别的。通过在meta中设置## X-UA-Compatible的值，可以指定网页的兼容性模式。在HTML的`<head>`标签中使用。\n\n<!--more-->\n\n## Why X-UA-Compatible\n\n在IE8刚推出时，由于重构的问题，无法适应较高级的浏览器，所以使用X-UA-Compatible标签强制IE8采用低版本方式渲染。\n\n使用下面代码后，开发者无需考虑网页是否兼容IE8，只要确保网页在IE6、IE7下的表现就可以了。\n\n```html\n<!-- emulate仿真 -->\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=EmulateIE7\">\n```\n\n### 使用Edge引擎渲染网页\n\n```html\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n```\n\n### 使用Edge引擎渲染网页，同时启用Google Chrome Frame\n\n```html\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n```\n\nGoogle Chrome Frame，官方正式中文名“谷歌浏览器内嵌框架”，是Google推出的一款免费IE专用插件，使用该插件，用户可以通过IE的用户界面，以Chrome内核的渲染方式浏览网页。Chrome Frame会把最新的Chrome Webkit内核和JavaScript引擎注入到IE中。\n\n通过在页面中加入上面一行代码，当安装有Chrome Frame插件的IE浏览器发现这行代码时，马上使用基于Webkit的Chrome渲染引擎替换IE自身的渲染引擎，而其它浏览器将忽略此行代码，不会影响代码执行。\n\n","slug":"meta_x-ua-compatible","published":1,"updated":"2022-07-14T01:23:25.013Z","comments":1,"photos":[],"link":"","_id":"cl5lql4dl000t8ds6b9fr7pus","content":"<blockquote>\n<p>X-UA-Compatible是IE8的一个专有meta属性，对于IE8以下的浏览器是不识别的。通过在meta中设置## X-UA-Compatible的值，可以指定网页的兼容性模式。在HTML的<code>&lt;head&gt;</code>标签中使用。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"Why-X-UA-Compatible\"><a href=\"#Why-X-UA-Compatible\" class=\"headerlink\" title=\"Why X-UA-Compatible\"></a>Why X-UA-Compatible</h2><p>在IE8刚推出时，由于重构的问题，无法适应较高级的浏览器，所以使用X-UA-Compatible标签强制IE8采用低版本方式渲染。</p>\n<p>使用下面代码后，开发者无需考虑网页是否兼容IE8，只要确保网页在IE6、IE7下的表现就可以了。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- emulate仿真 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=EmulateIE7&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用Edge引擎渲染网页\"><a href=\"#使用Edge引擎渲染网页\" class=\"headerlink\" title=\"使用Edge引擎渲染网页\"></a>使用Edge引擎渲染网页</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用Edge引擎渲染网页，同时启用Google-Chrome-Frame\"><a href=\"#使用Edge引擎渲染网页，同时启用Google-Chrome-Frame\" class=\"headerlink\" title=\"使用Edge引擎渲染网页，同时启用Google Chrome Frame\"></a>使用Edge引擎渲染网页，同时启用Google Chrome Frame</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge,chrome=1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Google Chrome Frame，官方正式中文名“谷歌浏览器内嵌框架”，是Google推出的一款免费IE专用插件，使用该插件，用户可以通过IE的用户界面，以Chrome内核的渲染方式浏览网页。Chrome Frame会把最新的Chrome Webkit内核和JavaScript引擎注入到IE中。</p>\n<p>通过在页面中加入上面一行代码，当安装有Chrome Frame插件的IE浏览器发现这行代码时，马上使用基于Webkit的Chrome渲染引擎替换IE自身的渲染引擎，而其它浏览器将忽略此行代码，不会影响代码执行。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>X-UA-Compatible是IE8的一个专有meta属性，对于IE8以下的浏览器是不识别的。通过在meta中设置## X-UA-Compatible的值，可以指定网页的兼容性模式。在HTML的<code>&lt;head&gt;</code>标签中使用。</p>\n</blockquote>","more":"<h2 id=\"Why-X-UA-Compatible\"><a href=\"#Why-X-UA-Compatible\" class=\"headerlink\" title=\"Why X-UA-Compatible\"></a>Why X-UA-Compatible</h2><p>在IE8刚推出时，由于重构的问题，无法适应较高级的浏览器，所以使用X-UA-Compatible标签强制IE8采用低版本方式渲染。</p>\n<p>使用下面代码后，开发者无需考虑网页是否兼容IE8，只要确保网页在IE6、IE7下的表现就可以了。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- emulate仿真 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=EmulateIE7&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用Edge引擎渲染网页\"><a href=\"#使用Edge引擎渲染网页\" class=\"headerlink\" title=\"使用Edge引擎渲染网页\"></a>使用Edge引擎渲染网页</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用Edge引擎渲染网页，同时启用Google-Chrome-Frame\"><a href=\"#使用Edge引擎渲染网页，同时启用Google-Chrome-Frame\" class=\"headerlink\" title=\"使用Edge引擎渲染网页，同时启用Google Chrome Frame\"></a>使用Edge引擎渲染网页，同时启用Google Chrome Frame</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge,chrome=1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Google Chrome Frame，官方正式中文名“谷歌浏览器内嵌框架”，是Google推出的一款免费IE专用插件，使用该插件，用户可以通过IE的用户界面，以Chrome内核的渲染方式浏览网页。Chrome Frame会把最新的Chrome Webkit内核和JavaScript引擎注入到IE中。</p>\n<p>通过在页面中加入上面一行代码，当安装有Chrome Frame插件的IE浏览器发现这行代码时，马上使用基于Webkit的Chrome渲染引擎替换IE自身的渲染引擎，而其它浏览器将忽略此行代码，不会影响代码执行。</p>"},{"layout":"post","title":"Working with Git","date":"2016-07-27T05:50:00.000Z","_content":"\n> Git is a free and open source distributed version control system with branching staging, areas and data assurance.\n\n<!--more-->\n\n## Cloning\n\nCloning is how you get a copy of a codebase to your local PC.\n\n```bash\n$ git clone <<git-url>> [local-repo-name]\n```\n\n## Branching\n\nBranching allows you to work on an isolated copy of the code.\n\n```bash\n$ git checkout <<-b>> <<branch-name>>\n```\n\n`-b` for creating a new branch.   \nWithout `-b` will switch the current branch to `branch-name`.\n\n## Committing\n\nCommitting adds changes to the repository's history.\n\n```bash\n$ git add <<file/path/to/add>>\n$ git commit -m \"Commit Message Explaining What Changed\"\n```\n\nBefore committing, you should `add` the changed files or path you want to commit.\n\n## Pulling\n\nPulling allows you to bring in code changes from a branch on a remote.\n\n```bash\n$ git pull <<remote-name>> <<brach-name>>\n```\n\n`git-pull` will fetch and integrate with another repository or a local branch.\n\n## Pushing\n\nPushing allows you to put committed code changes on to a branch on a remote.\n\n```bash\n$ git push <<-u>> <<remote-name>> <<branch-name>>\n```\n\n`-u` to set the upstream tracking branch.\n\n## Remotes\n\nRemotes are other repositories (usually other copies of the one being worked on, or forks).\n\n```bash\n$ git remote add <<remote-name>> <<git-url>>\n```\n\n## Workflow\n\n1. Get a github account. [Github](https://github.com/), or your enterprise site.\n2. At your local PC, generate a SSH key:\n\n```bash\n$ ssh-keygen [key-name/default rsa]\n```\n\nAfter running `ssh-keygen` command, you'll get two files, one is private key and the other is the publick key. You need to copy the `.pub` file content (public key) to your github repository in your profile -> settings -> SSH and GPG Keys page, create a new SSH key and paste your public key here.\n\nAfter above steps, you can work with your github repository with git command line.\n\n\n3. Create a repository.\n\n4. Copy the repository to local PC.\n\nClone a repository through `Clone with SSH`, \n\n```bash\n$ git clone <<git@github.com:account-name/repo-name.git>>\n```\n\n\n5. Create or Modify files at your local repo.\n6. Add changes files.\n\n```bash\n$ git add <<file/path>>\n```\n\n7. Commit added files.\n\n```bash\n$ git commit -m \"Comments to the changes files\"\n```\n\n8. Push to origin master.\n\n```bash\n$ git push origin <<master/branch-name>>\n```\n\n9. If your repository is forked from another repository, after above steps, you need to create a `new Pull Request` from your forked repository to the remote master.\n\nAfter this, the remote master will recieve a merge request from you, the owner will take actions to your request after reviewing.\n\n\n## References\n\n[Git Branching Remote Branches](https://git-scm.com/book/en/v2/Git-Branching-Remote-Branches)   \n[git - 简明指南](http://rogerdudler.github.io/git-guide/index.zh.html)\n","source":"_posts/working_with_git.md","raw":"---\nlayout: post\ntitle: Working with Git\ntags: [git]\ndate: 2016-07-27 13:50:00 +800\n---\n\n> Git is a free and open source distributed version control system with branching staging, areas and data assurance.\n\n<!--more-->\n\n## Cloning\n\nCloning is how you get a copy of a codebase to your local PC.\n\n```bash\n$ git clone <<git-url>> [local-repo-name]\n```\n\n## Branching\n\nBranching allows you to work on an isolated copy of the code.\n\n```bash\n$ git checkout <<-b>> <<branch-name>>\n```\n\n`-b` for creating a new branch.   \nWithout `-b` will switch the current branch to `branch-name`.\n\n## Committing\n\nCommitting adds changes to the repository's history.\n\n```bash\n$ git add <<file/path/to/add>>\n$ git commit -m \"Commit Message Explaining What Changed\"\n```\n\nBefore committing, you should `add` the changed files or path you want to commit.\n\n## Pulling\n\nPulling allows you to bring in code changes from a branch on a remote.\n\n```bash\n$ git pull <<remote-name>> <<brach-name>>\n```\n\n`git-pull` will fetch and integrate with another repository or a local branch.\n\n## Pushing\n\nPushing allows you to put committed code changes on to a branch on a remote.\n\n```bash\n$ git push <<-u>> <<remote-name>> <<branch-name>>\n```\n\n`-u` to set the upstream tracking branch.\n\n## Remotes\n\nRemotes are other repositories (usually other copies of the one being worked on, or forks).\n\n```bash\n$ git remote add <<remote-name>> <<git-url>>\n```\n\n## Workflow\n\n1. Get a github account. [Github](https://github.com/), or your enterprise site.\n2. At your local PC, generate a SSH key:\n\n```bash\n$ ssh-keygen [key-name/default rsa]\n```\n\nAfter running `ssh-keygen` command, you'll get two files, one is private key and the other is the publick key. You need to copy the `.pub` file content (public key) to your github repository in your profile -> settings -> SSH and GPG Keys page, create a new SSH key and paste your public key here.\n\nAfter above steps, you can work with your github repository with git command line.\n\n\n3. Create a repository.\n\n4. Copy the repository to local PC.\n\nClone a repository through `Clone with SSH`, \n\n```bash\n$ git clone <<git@github.com:account-name/repo-name.git>>\n```\n\n\n5. Create or Modify files at your local repo.\n6. Add changes files.\n\n```bash\n$ git add <<file/path>>\n```\n\n7. Commit added files.\n\n```bash\n$ git commit -m \"Comments to the changes files\"\n```\n\n8. Push to origin master.\n\n```bash\n$ git push origin <<master/branch-name>>\n```\n\n9. If your repository is forked from another repository, after above steps, you need to create a `new Pull Request` from your forked repository to the remote master.\n\nAfter this, the remote master will recieve a merge request from you, the owner will take actions to your request after reviewing.\n\n\n## References\n\n[Git Branching Remote Branches](https://git-scm.com/book/en/v2/Git-Branching-Remote-Branches)   \n[git - 简明指南](http://rogerdudler.github.io/git-guide/index.zh.html)\n","slug":"working_with_git","published":1,"updated":"2022-07-14T01:23:25.013Z","comments":1,"photos":[],"link":"","_id":"cl5lql4ec003p8ds642qi4joh","content":"<blockquote>\n<p>Git is a free and open source distributed version control system with branching staging, areas and data assurance.</p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"Cloning\"><a href=\"#Cloning\" class=\"headerlink\" title=\"Cloning\"></a>Cloning</h2><p>Cloning is how you get a copy of a codebase to your local PC.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> &lt;&lt;<span class=\"string\">git-url&gt;&gt; [local-repo-name]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Branching\"><a href=\"#Branching\" class=\"headerlink\" title=\"Branching\"></a>Branching</h2><p>Branching allows you to work on an isolated copy of the code.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout &lt;&lt;-<span class=\"string\">b&gt;&gt; &lt;&lt;branch-name&gt;&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>-b</code> for creating a new branch.<br>Without <code>-b</code> will switch the current branch to <code>branch-name</code>.</p>\n<h2 id=\"Committing\"><a href=\"#Committing\" class=\"headerlink\" title=\"Committing\"></a>Committing</h2><p>Committing adds changes to the repository’s history.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add &lt;&lt;<span class=\"string\">file/path/to/add&gt;&gt;</span></span><br><span class=\"line\"><span class=\"string\">$ git commit -m &quot;Commit Message Explaining What Changed&quot;</span></span><br></pre></td></tr></table></figure>\n<p>Before committing, you should <code>add</code> the changed files or path you want to commit.</p>\n<h2 id=\"Pulling\"><a href=\"#Pulling\" class=\"headerlink\" title=\"Pulling\"></a>Pulling</h2><p>Pulling allows you to bring in code changes from a branch on a remote.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull &lt;&lt;<span class=\"string\">remote-name&gt;&gt; &lt;&lt;brach-name&gt;&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>git-pull</code> will fetch and integrate with another repository or a local branch.</p>\n<h2 id=\"Pushing\"><a href=\"#Pushing\" class=\"headerlink\" title=\"Pushing\"></a>Pushing</h2><p>Pushing allows you to put committed code changes on to a branch on a remote.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push &lt;&lt;-<span class=\"string\">u&gt;&gt; &lt;&lt;remote-name&gt;&gt; &lt;&lt;branch-name&gt;&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>-u</code> to set the upstream tracking branch.</p>\n<h2 id=\"Remotes\"><a href=\"#Remotes\" class=\"headerlink\" title=\"Remotes\"></a>Remotes</h2><p>Remotes are other repositories (usually other copies of the one being worked on, or forks).</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add &lt;&lt;<span class=\"string\">remote-name&gt;&gt; &lt;&lt;git-url&gt;&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Workflow\"><a href=\"#Workflow\" class=\"headerlink\" title=\"Workflow\"></a>Workflow</h2><ol>\n<li>Get a github account. <a href=\"https://github.com/\">Github</a>, or your enterprise site.</li>\n<li>At your local PC, generate a SSH key:</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen [key-name/default rsa]</span><br></pre></td></tr></table></figure>\n<p>After running <code>ssh-keygen</code> command, you’ll get two files, one is private key and the other is the publick key. You need to copy the <code>.pub</code> file content (public key) to your github repository in your profile -&gt; settings -&gt; SSH and GPG Keys page, create a new SSH key and paste your public key here.</p>\n<p>After above steps, you can work with your github repository with git command line.</p>\n<ol start=\"3\">\n<li><p>Create a repository.</p>\n</li>\n<li><p>Copy the repository to local PC.</p>\n</li>\n</ol>\n<p>Clone a repository through <code>Clone with SSH</code>, </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> &lt;&lt;<span class=\"string\">git@github.com:account-name/repo-name.git</span>&gt;&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>Create or Modify files at your local repo.</li>\n<li>Add changes files.</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add &lt;&lt;<span class=\"string\">file/path&gt;&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>Commit added files.</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m <span class=\"string\">&quot;Comments to the changes files&quot;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>Push to origin master.</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin &lt;&lt;<span class=\"string\">master/branch-name&gt;&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>If your repository is forked from another repository, after above steps, you need to create a <code>new Pull Request</code> from your forked repository to the remote master.</li>\n</ol>\n<p>After this, the remote master will recieve a merge request from you, the owner will take actions to your request after reviewing.</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><p><a href=\"https://git-scm.com/book/en/v2/Git-Branching-Remote-Branches\">Git Branching Remote Branches</a><br><a href=\"http://rogerdudler.github.io/git-guide/index.zh.html\">git - 简明指南</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>Git is a free and open source distributed version control system with branching staging, areas and data assurance.</p>\n</blockquote>","more":"<h2 id=\"Cloning\"><a href=\"#Cloning\" class=\"headerlink\" title=\"Cloning\"></a>Cloning</h2><p>Cloning is how you get a copy of a codebase to your local PC.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> &lt;&lt;<span class=\"string\">git-url&gt;&gt; [local-repo-name]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Branching\"><a href=\"#Branching\" class=\"headerlink\" title=\"Branching\"></a>Branching</h2><p>Branching allows you to work on an isolated copy of the code.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout &lt;&lt;-<span class=\"string\">b&gt;&gt; &lt;&lt;branch-name&gt;&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>-b</code> for creating a new branch.<br>Without <code>-b</code> will switch the current branch to <code>branch-name</code>.</p>\n<h2 id=\"Committing\"><a href=\"#Committing\" class=\"headerlink\" title=\"Committing\"></a>Committing</h2><p>Committing adds changes to the repository’s history.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add &lt;&lt;<span class=\"string\">file/path/to/add&gt;&gt;</span></span><br><span class=\"line\"><span class=\"string\">$ git commit -m &quot;Commit Message Explaining What Changed&quot;</span></span><br></pre></td></tr></table></figure>\n<p>Before committing, you should <code>add</code> the changed files or path you want to commit.</p>\n<h2 id=\"Pulling\"><a href=\"#Pulling\" class=\"headerlink\" title=\"Pulling\"></a>Pulling</h2><p>Pulling allows you to bring in code changes from a branch on a remote.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull &lt;&lt;<span class=\"string\">remote-name&gt;&gt; &lt;&lt;brach-name&gt;&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>git-pull</code> will fetch and integrate with another repository or a local branch.</p>\n<h2 id=\"Pushing\"><a href=\"#Pushing\" class=\"headerlink\" title=\"Pushing\"></a>Pushing</h2><p>Pushing allows you to put committed code changes on to a branch on a remote.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push &lt;&lt;-<span class=\"string\">u&gt;&gt; &lt;&lt;remote-name&gt;&gt; &lt;&lt;branch-name&gt;&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>-u</code> to set the upstream tracking branch.</p>\n<h2 id=\"Remotes\"><a href=\"#Remotes\" class=\"headerlink\" title=\"Remotes\"></a>Remotes</h2><p>Remotes are other repositories (usually other copies of the one being worked on, or forks).</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add &lt;&lt;<span class=\"string\">remote-name&gt;&gt; &lt;&lt;git-url&gt;&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Workflow\"><a href=\"#Workflow\" class=\"headerlink\" title=\"Workflow\"></a>Workflow</h2><ol>\n<li>Get a github account. <a href=\"https://github.com/\">Github</a>, or your enterprise site.</li>\n<li>At your local PC, generate a SSH key:</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen [key-name/default rsa]</span><br></pre></td></tr></table></figure>\n<p>After running <code>ssh-keygen</code> command, you’ll get two files, one is private key and the other is the publick key. You need to copy the <code>.pub</code> file content (public key) to your github repository in your profile -&gt; settings -&gt; SSH and GPG Keys page, create a new SSH key and paste your public key here.</p>\n<p>After above steps, you can work with your github repository with git command line.</p>\n<ol start=\"3\">\n<li><p>Create a repository.</p>\n</li>\n<li><p>Copy the repository to local PC.</p>\n</li>\n</ol>\n<p>Clone a repository through <code>Clone with SSH</code>, </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> &lt;&lt;<span class=\"string\">git@github.com:account-name/repo-name.git</span>&gt;&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>Create or Modify files at your local repo.</li>\n<li>Add changes files.</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add &lt;&lt;<span class=\"string\">file/path&gt;&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"7\">\n<li>Commit added files.</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m <span class=\"string\">&quot;Comments to the changes files&quot;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"8\">\n<li>Push to origin master.</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git push origin &lt;&lt;<span class=\"string\">master/branch-name&gt;&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"9\">\n<li>If your repository is forked from another repository, after above steps, you need to create a <code>new Pull Request</code> from your forked repository to the remote master.</li>\n</ol>\n<p>After this, the remote master will recieve a merge request from you, the owner will take actions to your request after reviewing.</p>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><p><a href=\"https://git-scm.com/book/en/v2/Git-Branching-Remote-Branches\">Git Branching Remote Branches</a><br><a href=\"http://rogerdudler.github.io/git-guide/index.zh.html\">git - 简明指南</a></p>"},{"layout":"post","title":"a == 1 && a == 2 && a == 3 ?","date":"2022-07-15T00:40:00.000Z","_content":"\n> 如何才能让标题的等式成立呢，这是一个很有意思的问题，也很考验 js 的基础知识，涉及到知识点还真不少，在此学习以记之。\n\n<!--more-->\n\n## 松相等和严相等\njs 中的相等分别松相等(==)和严相等(===)，这两个都可以用来判断两个值是否**相等**，那么二者的区别是什么呢？下面分情况分析一下：\n\n1. 对于基础类型之间的比较，==和===是有区别的：  \n- 同类型比较，直接进行值比较，两者结果相同；\n- 不同类型间比较，==会进行强制类型转换，转化成同一类型后，比较值是否相等，===如果类型不同，则结果直接不相等（这里涉及到如何进行类型转换，看下文）\n2. 对于引用类型之间的比较，==和===是没有区别的，都是进行**内存地址**比较，不同的两个引用类型比较的结果都不相同\n3. 基础类型和引用类型之间的比较，==和===的区别为：  \n- 类型不同，===始终不等；\n- 对于==，会将引用类型转化为基础类型，进行值比较（这里涉及到引用类型如何转化为基础类型，看下文）\n\n## ==比较的转换规则\n*x == y*的比较流程如下（ES5规范中定义：https://262.ecma-international.org/5.1/#sec-11.9.3）\n1. 如果Type(x)等于Type(y)，那么：  \na. 如果 Type(x)是 Undefined，返回 true,  \nb. 如果 Type(x)是 Null，返回 true,  \nc. 如果 Type(x)是 Number，数值类型，则：  \ni. 如果 x 是 NaN，返回 false.  \nii. 如果 y 是 NaN，返回 false.  \niii. 如果 x 和 y 都是 Number 类型，并且值相同，则返回 true.  \niv. 如果 x 是 +0 并且 y 是 -0，则返回 true.  \nv. 如果 x 是 -0 并且 y 是 +0，则返回 true.  \nvi. 返回 false  \nd. 如果 Type(x)是 String 类型，若 x 和 y 是完全相同的字符串，则返回 true，否则返回 false。  \ne. 如果 Type(x) 是 Boolean 类型，若 x 和 y 同时为 *true* 或同时为*false*，则返回 true，否则返回 false。\n\n2. 如果 x 和 y 中有一个为*undefined*，则返回 true.\n3. 如果 Type(x) 和 Type(y) 中有一个为 String，另一个为 Number，则会先把其中的 String 类型转化为 Number 类型再进行比较值。\n4. 如果 x 和 y 中有一个为 Boolean，则返回把 Boolean 转化为 Number 后的值和另一个进行比较。(false为0，true为1)\n5. 如果 Type(x)或 Type(y)中有一个是 Object，则会比较 x == toPrimitive(y) 或 toPrimitive(x) == y，即将引入类型转换为基本类型再进行比较，否则返回 false。\n\n## 对象和非对象之间的比较\n关于引用类型（对象/函数/数组）和基本类型（字符串/数字/布尔值）之间的比较，从上面的比较规则中我们看到，是将引用类型转化为基本类型再进行比较：\n1. 如果 Type(x) 是字符串或数字，Type(y) 是对象，则返回 x == toPrimitive(y) 的结果。\n2. 如果 Type(x) 是对象，Type(y) 是字符串或数字，则返回 toPrimitive(x) == y 的结果。\n\n> 什么是 toPrimitive() 函数？  \n\n***应用场景***：在 JS 中，如果想要将引用类型转换成基本类型时，实质就是调用对象的 ***valueOf*** 和 ***toString***方法，也就是拆箱转换。\n\n***函数结构***： toPrimitive(input, preferedType)\n\n***参数解释***：\n- input 是输入的值，即要转换的对象，必选。\n- preferedType 是期望转换的基本类型，他可以是字符串，也可以是数字。选填，默认为 number。\n\n#### 过程说明：\n1. 如果 input 是原始值，则直接返回这个值，\n2. 如果 input 是对象，调用 input.valueOf()，如果结果是原始值，返回结果；\n3. 否则，调用 input.toString()，如果结果是原始值，返回结果；\n4. 否则，抛出错误。如果转换的类型是 string，则步骤2和3交换执行顺序。\n\nvalueOf 和 toString 的优先级：\n1. 进行对象转换时，优先调用 toString 方法，若没有重写 toString，将调用 valueOf 方法，如果两个方法都没有重写，则按 Object 的 toString 输出；\n2. 进行强转字符串类型时将优先调用 toString 方法，强转为数字时优先调用 valueOf 方法。\n3. 在有运算操作符的情况下，valueOf 的优先级高于 toString。\n\n### 解决标题问题\n由上分析可知，在 a 为对象时，可以通过重写 a 的 valueOf 和 toString 方法来让标题的等式成立。\n\n```JavaScript\nconst a = {\n  value: 0,\n  valueOf() {\n    a.value ++;\n    return a.value;\n  }\n};\n\nconsole.log(a == 1 && a == 2 && a == 3) // true\n\n```\n或者：\n```JavaScript\nconst a = {\n  value: 0,\n  toString() {\n    a.value ++;\n    return a.value;\n  }\n}\n\nconsole.log(a == 1 && a == 2 && a == 3) // true\n\n```\n给对象 a 设置一个属性 value 初始为0，并修改其 valueOf 或 toString 方法，当执行*a == 1 && a == 2 && a == 3*时，每次等式比较都会触发 valueOf 或 toString 方法，就会执行 value ++，同时把新的 value 值用于等式比较，三次等式判断时，value 的值分别为1、2、3，所以等会会成立。\n\n本篇完\n","source":"_posts/object_equals.md","raw":"---\nlayout: post\ntitle: a == 1 && a == 2 && a == 3 ?\ntags: [object,equals,js]\ndate: 2022-07-15 08:40:00 +800\n---\n\n> 如何才能让标题的等式成立呢，这是一个很有意思的问题，也很考验 js 的基础知识，涉及到知识点还真不少，在此学习以记之。\n\n<!--more-->\n\n## 松相等和严相等\njs 中的相等分别松相等(==)和严相等(===)，这两个都可以用来判断两个值是否**相等**，那么二者的区别是什么呢？下面分情况分析一下：\n\n1. 对于基础类型之间的比较，==和===是有区别的：  \n- 同类型比较，直接进行值比较，两者结果相同；\n- 不同类型间比较，==会进行强制类型转换，转化成同一类型后，比较值是否相等，===如果类型不同，则结果直接不相等（这里涉及到如何进行类型转换，看下文）\n2. 对于引用类型之间的比较，==和===是没有区别的，都是进行**内存地址**比较，不同的两个引用类型比较的结果都不相同\n3. 基础类型和引用类型之间的比较，==和===的区别为：  \n- 类型不同，===始终不等；\n- 对于==，会将引用类型转化为基础类型，进行值比较（这里涉及到引用类型如何转化为基础类型，看下文）\n\n## ==比较的转换规则\n*x == y*的比较流程如下（ES5规范中定义：https://262.ecma-international.org/5.1/#sec-11.9.3）\n1. 如果Type(x)等于Type(y)，那么：  \na. 如果 Type(x)是 Undefined，返回 true,  \nb. 如果 Type(x)是 Null，返回 true,  \nc. 如果 Type(x)是 Number，数值类型，则：  \ni. 如果 x 是 NaN，返回 false.  \nii. 如果 y 是 NaN，返回 false.  \niii. 如果 x 和 y 都是 Number 类型，并且值相同，则返回 true.  \niv. 如果 x 是 +0 并且 y 是 -0，则返回 true.  \nv. 如果 x 是 -0 并且 y 是 +0，则返回 true.  \nvi. 返回 false  \nd. 如果 Type(x)是 String 类型，若 x 和 y 是完全相同的字符串，则返回 true，否则返回 false。  \ne. 如果 Type(x) 是 Boolean 类型，若 x 和 y 同时为 *true* 或同时为*false*，则返回 true，否则返回 false。\n\n2. 如果 x 和 y 中有一个为*undefined*，则返回 true.\n3. 如果 Type(x) 和 Type(y) 中有一个为 String，另一个为 Number，则会先把其中的 String 类型转化为 Number 类型再进行比较值。\n4. 如果 x 和 y 中有一个为 Boolean，则返回把 Boolean 转化为 Number 后的值和另一个进行比较。(false为0，true为1)\n5. 如果 Type(x)或 Type(y)中有一个是 Object，则会比较 x == toPrimitive(y) 或 toPrimitive(x) == y，即将引入类型转换为基本类型再进行比较，否则返回 false。\n\n## 对象和非对象之间的比较\n关于引用类型（对象/函数/数组）和基本类型（字符串/数字/布尔值）之间的比较，从上面的比较规则中我们看到，是将引用类型转化为基本类型再进行比较：\n1. 如果 Type(x) 是字符串或数字，Type(y) 是对象，则返回 x == toPrimitive(y) 的结果。\n2. 如果 Type(x) 是对象，Type(y) 是字符串或数字，则返回 toPrimitive(x) == y 的结果。\n\n> 什么是 toPrimitive() 函数？  \n\n***应用场景***：在 JS 中，如果想要将引用类型转换成基本类型时，实质就是调用对象的 ***valueOf*** 和 ***toString***方法，也就是拆箱转换。\n\n***函数结构***： toPrimitive(input, preferedType)\n\n***参数解释***：\n- input 是输入的值，即要转换的对象，必选。\n- preferedType 是期望转换的基本类型，他可以是字符串，也可以是数字。选填，默认为 number。\n\n#### 过程说明：\n1. 如果 input 是原始值，则直接返回这个值，\n2. 如果 input 是对象，调用 input.valueOf()，如果结果是原始值，返回结果；\n3. 否则，调用 input.toString()，如果结果是原始值，返回结果；\n4. 否则，抛出错误。如果转换的类型是 string，则步骤2和3交换执行顺序。\n\nvalueOf 和 toString 的优先级：\n1. 进行对象转换时，优先调用 toString 方法，若没有重写 toString，将调用 valueOf 方法，如果两个方法都没有重写，则按 Object 的 toString 输出；\n2. 进行强转字符串类型时将优先调用 toString 方法，强转为数字时优先调用 valueOf 方法。\n3. 在有运算操作符的情况下，valueOf 的优先级高于 toString。\n\n### 解决标题问题\n由上分析可知，在 a 为对象时，可以通过重写 a 的 valueOf 和 toString 方法来让标题的等式成立。\n\n```JavaScript\nconst a = {\n  value: 0,\n  valueOf() {\n    a.value ++;\n    return a.value;\n  }\n};\n\nconsole.log(a == 1 && a == 2 && a == 3) // true\n\n```\n或者：\n```JavaScript\nconst a = {\n  value: 0,\n  toString() {\n    a.value ++;\n    return a.value;\n  }\n}\n\nconsole.log(a == 1 && a == 2 && a == 3) // true\n\n```\n给对象 a 设置一个属性 value 初始为0，并修改其 valueOf 或 toString 方法，当执行*a == 1 && a == 2 && a == 3*时，每次等式比较都会触发 valueOf 或 toString 方法，就会执行 value ++，同时把新的 value 值用于等式比较，三次等式判断时，value 的值分别为1、2、3，所以等会会成立。\n\n本篇完\n","slug":"object_equals","published":1,"updated":"2022-07-15T08:39:02.517Z","_id":"cl5lruu1j0000gjs658im1zcw","comments":1,"photos":[],"link":"","content":"<blockquote>\n<p>如何才能让标题的等式成立呢，这是一个很有意思的问题，也很考验 js 的基础知识，涉及到知识点还真不少，在此学习以记之。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"松相等和严相等\"><a href=\"#松相等和严相等\" class=\"headerlink\" title=\"松相等和严相等\"></a>松相等和严相等</h2><p>js 中的相等分别松相等(==)和严相等(===)，这两个都可以用来判断两个值是否<strong>相等</strong>，那么二者的区别是什么呢？下面分情况分析一下：</p>\n<ol>\n<li>对于基础类型之间的比较，==和===是有区别的：  </li>\n</ol>\n<ul>\n<li>同类型比较，直接进行值比较，两者结果相同；</li>\n<li>不同类型间比较，==会进行强制类型转换，转化成同一类型后，比较值是否相等，===如果类型不同，则结果直接不相等（这里涉及到如何进行类型转换，看下文）</li>\n</ul>\n<ol start=\"2\">\n<li>对于引用类型之间的比较，==和===是没有区别的，都是进行<strong>内存地址</strong>比较，不同的两个引用类型比较的结果都不相同</li>\n<li>基础类型和引用类型之间的比较，==和===的区别为：  </li>\n</ol>\n<ul>\n<li>类型不同，===始终不等；</li>\n<li>对于==，会将引用类型转化为基础类型，进行值比较（这里涉及到引用类型如何转化为基础类型，看下文）</li>\n</ul>\n<h2 id=\"比较的转换规则\"><a href=\"#比较的转换规则\" class=\"headerlink\" title=\"==比较的转换规则\"></a>==比较的转换规则</h2><p><em>x == y</em>的比较流程如下（ES5规范中定义：<a href=\"https://262.ecma-international.org/5.1/#sec-11.9.3）\">https://262.ecma-international.org/5.1/#sec-11.9.3）</a></p>\n<ol>\n<li><p>如果Type(x)等于Type(y)，那么：<br>a. 如果 Type(x)是 Undefined，返回 true,<br>b. 如果 Type(x)是 Null，返回 true,<br>c. 如果 Type(x)是 Number，数值类型，则：<br>i. 如果 x 是 NaN，返回 false.<br>ii. 如果 y 是 NaN，返回 false.<br>iii. 如果 x 和 y 都是 Number 类型，并且值相同，则返回 true.<br>iv. 如果 x 是 +0 并且 y 是 -0，则返回 true.<br>v. 如果 x 是 -0 并且 y 是 +0，则返回 true.<br>vi. 返回 false<br>d. 如果 Type(x)是 String 类型，若 x 和 y 是完全相同的字符串，则返回 true，否则返回 false。<br>e. 如果 Type(x) 是 Boolean 类型，若 x 和 y 同时为 <em>true</em> 或同时为<em>false</em>，则返回 true，否则返回 false。</p>\n</li>\n<li><p>如果 x 和 y 中有一个为<em>undefined</em>，则返回 true.</p>\n</li>\n<li>如果 Type(x) 和 Type(y) 中有一个为 String，另一个为 Number，则会先把其中的 String 类型转化为 Number 类型再进行比较值。</li>\n<li>如果 x 和 y 中有一个为 Boolean，则返回把 Boolean 转化为 Number 后的值和另一个进行比较。(false为0，true为1)</li>\n<li>如果 Type(x)或 Type(y)中有一个是 Object，则会比较 x == toPrimitive(y) 或 toPrimitive(x) == y，即将引入类型转换为基本类型再进行比较，否则返回 false。</li>\n</ol>\n<h2 id=\"对象和非对象之间的比较\"><a href=\"#对象和非对象之间的比较\" class=\"headerlink\" title=\"对象和非对象之间的比较\"></a>对象和非对象之间的比较</h2><p>关于引用类型（对象/函数/数组）和基本类型（字符串/数字/布尔值）之间的比较，从上面的比较规则中我们看到，是将引用类型转化为基本类型再进行比较：</p>\n<ol>\n<li>如果 Type(x) 是字符串或数字，Type(y) 是对象，则返回 x == toPrimitive(y) 的结果。</li>\n<li>如果 Type(x) 是对象，Type(y) 是字符串或数字，则返回 toPrimitive(x) == y 的结果。</li>\n</ol>\n<blockquote>\n<p>什么是 toPrimitive() 函数？  </p>\n</blockquote>\n<p><strong><em>应用场景</em></strong>：在 JS 中，如果想要将引用类型转换成基本类型时，实质就是调用对象的 <strong><em>valueOf</em></strong> 和 <strong><em>toString</em></strong>方法，也就是拆箱转换。</p>\n<p><strong><em>函数结构</em></strong>： toPrimitive(input, preferedType)</p>\n<p><strong><em>参数解释</em></strong>：</p>\n<ul>\n<li>input 是输入的值，即要转换的对象，必选。</li>\n<li>preferedType 是期望转换的基本类型，他可以是字符串，也可以是数字。选填，默认为 number。</li>\n</ul>\n<h4 id=\"过程说明：\"><a href=\"#过程说明：\" class=\"headerlink\" title=\"过程说明：\"></a>过程说明：</h4><ol>\n<li>如果 input 是原始值，则直接返回这个值，</li>\n<li>如果 input 是对象，调用 input.valueOf()，如果结果是原始值，返回结果；</li>\n<li>否则，调用 input.toString()，如果结果是原始值，返回结果；</li>\n<li>否则，抛出错误。如果转换的类型是 string，则步骤2和3交换执行顺序。</li>\n</ol>\n<p>valueOf 和 toString 的优先级：</p>\n<ol>\n<li>进行对象转换时，优先调用 toString 方法，若没有重写 toString，将调用 valueOf 方法，如果两个方法都没有重写，则按 Object 的 toString 输出；</li>\n<li>进行强转字符串类型时将优先调用 toString 方法，强转为数字时优先调用 valueOf 方法。</li>\n<li>在有运算操作符的情况下，valueOf 的优先级高于 toString。</li>\n</ol>\n<h3 id=\"解决标题问题\"><a href=\"#解决标题问题\" class=\"headerlink\" title=\"解决标题问题\"></a>解决标题问题</h3><p>由上分析可知，在 a 为对象时，可以通过重写 a 的 valueOf 和 toString 方法来让标题的等式成立。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"title function_\">valueOf</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    a.<span class=\"property\">value</span> ++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.<span class=\"property\">value</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a == <span class=\"number\">1</span> &amp;&amp; a == <span class=\"number\">2</span> &amp;&amp; a == <span class=\"number\">3</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>或者：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"title function_\">toString</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    a.<span class=\"property\">value</span> ++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.<span class=\"property\">value</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a == <span class=\"number\">1</span> &amp;&amp; a == <span class=\"number\">2</span> &amp;&amp; a == <span class=\"number\">3</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br>给对象 a 设置一个属性 value 初始为0，并修改其 valueOf 或 toString 方法，当执行<em>a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3</em>时，每次等式比较都会触发 valueOf 或 toString 方法，就会执行 value ++，同时把新的 value 值用于等式比较，三次等式判断时，value 的值分别为1、2、3，所以等会会成立。</p>\n<p>本篇完</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>如何才能让标题的等式成立呢，这是一个很有意思的问题，也很考验 js 的基础知识，涉及到知识点还真不少，在此学习以记之。</p>\n</blockquote>","more":"<h2 id=\"松相等和严相等\"><a href=\"#松相等和严相等\" class=\"headerlink\" title=\"松相等和严相等\"></a>松相等和严相等</h2><p>js 中的相等分别松相等(==)和严相等(===)，这两个都可以用来判断两个值是否<strong>相等</strong>，那么二者的区别是什么呢？下面分情况分析一下：</p>\n<ol>\n<li>对于基础类型之间的比较，==和===是有区别的：  </li>\n</ol>\n<ul>\n<li>同类型比较，直接进行值比较，两者结果相同；</li>\n<li>不同类型间比较，==会进行强制类型转换，转化成同一类型后，比较值是否相等，===如果类型不同，则结果直接不相等（这里涉及到如何进行类型转换，看下文）</li>\n</ul>\n<ol start=\"2\">\n<li>对于引用类型之间的比较，==和===是没有区别的，都是进行<strong>内存地址</strong>比较，不同的两个引用类型比较的结果都不相同</li>\n<li>基础类型和引用类型之间的比较，==和===的区别为：  </li>\n</ol>\n<ul>\n<li>类型不同，===始终不等；</li>\n<li>对于==，会将引用类型转化为基础类型，进行值比较（这里涉及到引用类型如何转化为基础类型，看下文）</li>\n</ul>\n<h2 id=\"比较的转换规则\"><a href=\"#比较的转换规则\" class=\"headerlink\" title=\"==比较的转换规则\"></a>==比较的转换规则</h2><p><em>x == y</em>的比较流程如下（ES5规范中定义：<a href=\"https://262.ecma-international.org/5.1/#sec-11.9.3）\">https://262.ecma-international.org/5.1/#sec-11.9.3）</a></p>\n<ol>\n<li><p>如果Type(x)等于Type(y)，那么：<br>a. 如果 Type(x)是 Undefined，返回 true,<br>b. 如果 Type(x)是 Null，返回 true,<br>c. 如果 Type(x)是 Number，数值类型，则：<br>i. 如果 x 是 NaN，返回 false.<br>ii. 如果 y 是 NaN，返回 false.<br>iii. 如果 x 和 y 都是 Number 类型，并且值相同，则返回 true.<br>iv. 如果 x 是 +0 并且 y 是 -0，则返回 true.<br>v. 如果 x 是 -0 并且 y 是 +0，则返回 true.<br>vi. 返回 false<br>d. 如果 Type(x)是 String 类型，若 x 和 y 是完全相同的字符串，则返回 true，否则返回 false。<br>e. 如果 Type(x) 是 Boolean 类型，若 x 和 y 同时为 <em>true</em> 或同时为<em>false</em>，则返回 true，否则返回 false。</p>\n</li>\n<li><p>如果 x 和 y 中有一个为<em>undefined</em>，则返回 true.</p>\n</li>\n<li>如果 Type(x) 和 Type(y) 中有一个为 String，另一个为 Number，则会先把其中的 String 类型转化为 Number 类型再进行比较值。</li>\n<li>如果 x 和 y 中有一个为 Boolean，则返回把 Boolean 转化为 Number 后的值和另一个进行比较。(false为0，true为1)</li>\n<li>如果 Type(x)或 Type(y)中有一个是 Object，则会比较 x == toPrimitive(y) 或 toPrimitive(x) == y，即将引入类型转换为基本类型再进行比较，否则返回 false。</li>\n</ol>\n<h2 id=\"对象和非对象之间的比较\"><a href=\"#对象和非对象之间的比较\" class=\"headerlink\" title=\"对象和非对象之间的比较\"></a>对象和非对象之间的比较</h2><p>关于引用类型（对象/函数/数组）和基本类型（字符串/数字/布尔值）之间的比较，从上面的比较规则中我们看到，是将引用类型转化为基本类型再进行比较：</p>\n<ol>\n<li>如果 Type(x) 是字符串或数字，Type(y) 是对象，则返回 x == toPrimitive(y) 的结果。</li>\n<li>如果 Type(x) 是对象，Type(y) 是字符串或数字，则返回 toPrimitive(x) == y 的结果。</li>\n</ol>\n<blockquote>\n<p>什么是 toPrimitive() 函数？  </p>\n</blockquote>\n<p><strong><em>应用场景</em></strong>：在 JS 中，如果想要将引用类型转换成基本类型时，实质就是调用对象的 <strong><em>valueOf</em></strong> 和 <strong><em>toString</em></strong>方法，也就是拆箱转换。</p>\n<p><strong><em>函数结构</em></strong>： toPrimitive(input, preferedType)</p>\n<p><strong><em>参数解释</em></strong>：</p>\n<ul>\n<li>input 是输入的值，即要转换的对象，必选。</li>\n<li>preferedType 是期望转换的基本类型，他可以是字符串，也可以是数字。选填，默认为 number。</li>\n</ul>\n<h4 id=\"过程说明：\"><a href=\"#过程说明：\" class=\"headerlink\" title=\"过程说明：\"></a>过程说明：</h4><ol>\n<li>如果 input 是原始值，则直接返回这个值，</li>\n<li>如果 input 是对象，调用 input.valueOf()，如果结果是原始值，返回结果；</li>\n<li>否则，调用 input.toString()，如果结果是原始值，返回结果；</li>\n<li>否则，抛出错误。如果转换的类型是 string，则步骤2和3交换执行顺序。</li>\n</ol>\n<p>valueOf 和 toString 的优先级：</p>\n<ol>\n<li>进行对象转换时，优先调用 toString 方法，若没有重写 toString，将调用 valueOf 方法，如果两个方法都没有重写，则按 Object 的 toString 输出；</li>\n<li>进行强转字符串类型时将优先调用 toString 方法，强转为数字时优先调用 valueOf 方法。</li>\n<li>在有运算操作符的情况下，valueOf 的优先级高于 toString。</li>\n</ol>\n<h3 id=\"解决标题问题\"><a href=\"#解决标题问题\" class=\"headerlink\" title=\"解决标题问题\"></a>解决标题问题</h3><p>由上分析可知，在 a 为对象时，可以通过重写 a 的 valueOf 和 toString 方法来让标题的等式成立。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"title function_\">valueOf</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    a.<span class=\"property\">value</span> ++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.<span class=\"property\">value</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a == <span class=\"number\">1</span> &amp;&amp; a == <span class=\"number\">2</span> &amp;&amp; a == <span class=\"number\">3</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>或者：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = &#123;</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"title function_\">toString</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    a.<span class=\"property\">value</span> ++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.<span class=\"property\">value</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a == <span class=\"number\">1</span> &amp;&amp; a == <span class=\"number\">2</span> &amp;&amp; a == <span class=\"number\">3</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br>给对象 a 设置一个属性 value 初始为0，并修改其 valueOf 或 toString 方法，当执行<em>a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3</em>时，每次等式比较都会触发 valueOf 或 toString 方法，就会执行 value ++，同时把新的 value 值用于等式比较，三次等式判断时，value 的值分别为1、2、3，所以等会会成立。</p>\n<p>本篇完</p>"},{"layout":"post","title":"关于 CSS position 属性分析","date":"2022-07-18T09:00:00.000Z","_content":"\n> CSS 的 position 属性有5个属性值，那么这几个属性值是什么含义，它们之间有什么关系，本文将加以分析。\n\n<!--more-->\n\n## 静态定位 static\nstatic 值是默认值，任何页面元素在没有设置 position 的情况下，它默认的 position 就是 static，是元素的正常布局行为，即元素在文档常规流中当前的布局位置，此时 top, right, bottom, left 和 z-index 属性均无效。\n\n## 相对定位 relative\n这里的相对定位，很多人不清楚它是相对于谁定位，这里强调一下，一个元素设置了 position 值为 relative，实际上是相对于它**自身**进行定位，即元素在未添加定位时的位置，在不改变页面布局的前提下调整元素位置，因而会在该元素未添加定位时的位置留下空白。\n1. top - 相对于自身位置向下移动 top 大小距离；\n2. right - 相对于自身位置向左移动 right 大小距离；\n3. bottom - 相对于自身位置向上移动 bottom 大小距离；\n4. left - 相对于自身位置向右移动 left 大小距离。  \n\n**注意** position:relative 对 table-*-group, table-row, table-column, table-cell, table-caption 元素无效。\n\n## 绝对定位 absolute\n绝对定位的元素会脱离正常文档流，并不为元素预留原空间，通过指定元素相对于最近的**非 static 定位**的祖先元素的偏移，来确定元素位置。绝对定位的元素可以设置外边距（margins），且不会与其他边距合并。\n\n\n## 固定定位 fixed\n也是一种绝对定准，元素会被移出正常文档流，不会为元素预留空间，通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。   \n打印时，元素会出现在每页的固定位置。fixed 属性会创建新的层叠上下文。当元素祖先的 transform, perspective 或 filter 属性非 none 时，容器由视口改为该祖先。\n\n## 粘性定位 sticky\n粘性定位可以被认为是相对定位和固定定位的混合，元素在跨越特定阈值前为相对定位，之后为固定定位。元素根据正常文档流进行定位，然后相对它的**最近滚动祖先(nearest scolling ancestor)**和 containing block(最近块级祖先，nearest block-level ancestor)，包括 table-related 元素，基于 top, right, bottom 和 left 的值进行偏移。偏移值不影响任何其它元素的位置。  \n\n该值总是创建一个新的**层叠上下文(stacking context)**。注意，一个 sticky 元素会\"固定\"在离它最近的一个拥有\"滚动机制\"的祖先上（当该祖先的 ovewflow 是 hidden, scroll, auto 或 overlay 时），即便这个祖先不是最近的真实可滚动的祖先，这有效地抑制了任何\"sticky\"行为。\n\n```CSS\n#test-id {\n  position: sticky;\n  top: 10px;\n}\n```\n> 在 viewport 视口滚动到元素 top 距离小于10px 之前，元素为相对定位。之后，元素将固定在与顶部距离10px 的位置处，走到 viewport 视口滚到阈值以下。\n\n**注意**须指定 top, right, bottom 或 left 四个其中之一，才可使粘性定位生效。否则其行为与相对定位相同。\n\n本篇完\n","source":"_posts/css_position.md","raw":"---\nlayout: post\ntitle: 关于 CSS position 属性分析\ntags: [css,position,static,relative,absolute,fixed,sticky]\ndate: 2022-07-18 17:00:00 +800\n---\n\n> CSS 的 position 属性有5个属性值，那么这几个属性值是什么含义，它们之间有什么关系，本文将加以分析。\n\n<!--more-->\n\n## 静态定位 static\nstatic 值是默认值，任何页面元素在没有设置 position 的情况下，它默认的 position 就是 static，是元素的正常布局行为，即元素在文档常规流中当前的布局位置，此时 top, right, bottom, left 和 z-index 属性均无效。\n\n## 相对定位 relative\n这里的相对定位，很多人不清楚它是相对于谁定位，这里强调一下，一个元素设置了 position 值为 relative，实际上是相对于它**自身**进行定位，即元素在未添加定位时的位置，在不改变页面布局的前提下调整元素位置，因而会在该元素未添加定位时的位置留下空白。\n1. top - 相对于自身位置向下移动 top 大小距离；\n2. right - 相对于自身位置向左移动 right 大小距离；\n3. bottom - 相对于自身位置向上移动 bottom 大小距离；\n4. left - 相对于自身位置向右移动 left 大小距离。  \n\n**注意** position:relative 对 table-*-group, table-row, table-column, table-cell, table-caption 元素无效。\n\n## 绝对定位 absolute\n绝对定位的元素会脱离正常文档流，并不为元素预留原空间，通过指定元素相对于最近的**非 static 定位**的祖先元素的偏移，来确定元素位置。绝对定位的元素可以设置外边距（margins），且不会与其他边距合并。\n\n\n## 固定定位 fixed\n也是一种绝对定准，元素会被移出正常文档流，不会为元素预留空间，通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。   \n打印时，元素会出现在每页的固定位置。fixed 属性会创建新的层叠上下文。当元素祖先的 transform, perspective 或 filter 属性非 none 时，容器由视口改为该祖先。\n\n## 粘性定位 sticky\n粘性定位可以被认为是相对定位和固定定位的混合，元素在跨越特定阈值前为相对定位，之后为固定定位。元素根据正常文档流进行定位，然后相对它的**最近滚动祖先(nearest scolling ancestor)**和 containing block(最近块级祖先，nearest block-level ancestor)，包括 table-related 元素，基于 top, right, bottom 和 left 的值进行偏移。偏移值不影响任何其它元素的位置。  \n\n该值总是创建一个新的**层叠上下文(stacking context)**。注意，一个 sticky 元素会\"固定\"在离它最近的一个拥有\"滚动机制\"的祖先上（当该祖先的 ovewflow 是 hidden, scroll, auto 或 overlay 时），即便这个祖先不是最近的真实可滚动的祖先，这有效地抑制了任何\"sticky\"行为。\n\n```CSS\n#test-id {\n  position: sticky;\n  top: 10px;\n}\n```\n> 在 viewport 视口滚动到元素 top 距离小于10px 之前，元素为相对定位。之后，元素将固定在与顶部距离10px 的位置处，走到 viewport 视口滚到阈值以下。\n\n**注意**须指定 top, right, bottom 或 left 四个其中之一，才可使粘性定位生效。否则其行为与相对定位相同。\n\n本篇完\n","slug":"css_position","published":1,"updated":"2022-07-18T10:01:50.416Z","comments":1,"photos":[],"link":"","_id":"cl5qkvh7f0000wrs6d2mvapnb","content":"<blockquote>\n<p>CSS 的 position 属性有5个属性值，那么这几个属性值是什么含义，它们之间有什么关系，本文将加以分析。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"静态定位-static\"><a href=\"#静态定位-static\" class=\"headerlink\" title=\"静态定位 static\"></a>静态定位 static</h2><p>static 值是默认值，任何页面元素在没有设置 position 的情况下，它默认的 position 就是 static，是元素的正常布局行为，即元素在文档常规流中当前的布局位置，此时 top, right, bottom, left 和 z-index 属性均无效。</p>\n<h2 id=\"相对定位-relative\"><a href=\"#相对定位-relative\" class=\"headerlink\" title=\"相对定位 relative\"></a>相对定位 relative</h2><p>这里的相对定位，很多人不清楚它是相对于谁定位，这里强调一下，一个元素设置了 position 值为 relative，实际上是相对于它<strong>自身</strong>进行定位，即元素在未添加定位时的位置，在不改变页面布局的前提下调整元素位置，因而会在该元素未添加定位时的位置留下空白。</p>\n<ol>\n<li>top - 相对于自身位置向下移动 top 大小距离；</li>\n<li>right - 相对于自身位置向左移动 right 大小距离；</li>\n<li>bottom - 相对于自身位置向上移动 bottom 大小距离；</li>\n<li>left - 相对于自身位置向右移动 left 大小距离。  </li>\n</ol>\n<p><strong>注意</strong> position:relative 对 table-*-group, table-row, table-column, table-cell, table-caption 元素无效。</p>\n<h2 id=\"绝对定位-absolute\"><a href=\"#绝对定位-absolute\" class=\"headerlink\" title=\"绝对定位 absolute\"></a>绝对定位 absolute</h2><p>绝对定位的元素会脱离正常文档流，并不为元素预留原空间，通过指定元素相对于最近的<strong>非 static 定位</strong>的祖先元素的偏移，来确定元素位置。绝对定位的元素可以设置外边距（margins），且不会与其他边距合并。</p>\n<h2 id=\"固定定位-fixed\"><a href=\"#固定定位-fixed\" class=\"headerlink\" title=\"固定定位 fixed\"></a>固定定位 fixed</h2><p>也是一种绝对定准，元素会被移出正常文档流，不会为元素预留空间，通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。<br>打印时，元素会出现在每页的固定位置。fixed 属性会创建新的层叠上下文。当元素祖先的 transform, perspective 或 filter 属性非 none 时，容器由视口改为该祖先。</p>\n<h2 id=\"粘性定位-sticky\"><a href=\"#粘性定位-sticky\" class=\"headerlink\" title=\"粘性定位 sticky\"></a>粘性定位 sticky</h2><p>粘性定位可以被认为是相对定位和固定定位的混合，元素在跨越特定阈值前为相对定位，之后为固定定位。元素根据正常文档流进行定位，然后相对它的<strong>最近滚动祖先(nearest scolling ancestor)</strong>和 containing block(最近块级祖先，nearest block-level ancestor)，包括 table-related 元素，基于 top, right, bottom 和 left 的值进行偏移。偏移值不影响任何其它元素的位置。  </p>\n<p>该值总是创建一个新的<strong>层叠上下文(stacking context)</strong>。注意，一个 sticky 元素会”固定”在离它最近的一个拥有”滚动机制”的祖先上（当该祖先的 ovewflow 是 hidden, scroll, auto 或 overlay 时），即便这个祖先不是最近的真实可滚动的祖先，这有效地抑制了任何”sticky”行为。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#test-id</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: sticky;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在 viewport 视口滚动到元素 top 距离小于10px 之前，元素为相对定位。之后，元素将固定在与顶部距离10px 的位置处，走到 viewport 视口滚到阈值以下。</p>\n</blockquote>\n<p><strong>注意</strong>须指定 top, right, bottom 或 left 四个其中之一，才可使粘性定位生效。否则其行为与相对定位相同。</p>\n<p>本篇完</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>CSS 的 position 属性有5个属性值，那么这几个属性值是什么含义，它们之间有什么关系，本文将加以分析。</p>\n</blockquote>","more":"<h2 id=\"静态定位-static\"><a href=\"#静态定位-static\" class=\"headerlink\" title=\"静态定位 static\"></a>静态定位 static</h2><p>static 值是默认值，任何页面元素在没有设置 position 的情况下，它默认的 position 就是 static，是元素的正常布局行为，即元素在文档常规流中当前的布局位置，此时 top, right, bottom, left 和 z-index 属性均无效。</p>\n<h2 id=\"相对定位-relative\"><a href=\"#相对定位-relative\" class=\"headerlink\" title=\"相对定位 relative\"></a>相对定位 relative</h2><p>这里的相对定位，很多人不清楚它是相对于谁定位，这里强调一下，一个元素设置了 position 值为 relative，实际上是相对于它<strong>自身</strong>进行定位，即元素在未添加定位时的位置，在不改变页面布局的前提下调整元素位置，因而会在该元素未添加定位时的位置留下空白。</p>\n<ol>\n<li>top - 相对于自身位置向下移动 top 大小距离；</li>\n<li>right - 相对于自身位置向左移动 right 大小距离；</li>\n<li>bottom - 相对于自身位置向上移动 bottom 大小距离；</li>\n<li>left - 相对于自身位置向右移动 left 大小距离。  </li>\n</ol>\n<p><strong>注意</strong> position:relative 对 table-*-group, table-row, table-column, table-cell, table-caption 元素无效。</p>\n<h2 id=\"绝对定位-absolute\"><a href=\"#绝对定位-absolute\" class=\"headerlink\" title=\"绝对定位 absolute\"></a>绝对定位 absolute</h2><p>绝对定位的元素会脱离正常文档流，并不为元素预留原空间，通过指定元素相对于最近的<strong>非 static 定位</strong>的祖先元素的偏移，来确定元素位置。绝对定位的元素可以设置外边距（margins），且不会与其他边距合并。</p>\n<h2 id=\"固定定位-fixed\"><a href=\"#固定定位-fixed\" class=\"headerlink\" title=\"固定定位 fixed\"></a>固定定位 fixed</h2><p>也是一种绝对定准，元素会被移出正常文档流，不会为元素预留空间，通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。<br>打印时，元素会出现在每页的固定位置。fixed 属性会创建新的层叠上下文。当元素祖先的 transform, perspective 或 filter 属性非 none 时，容器由视口改为该祖先。</p>\n<h2 id=\"粘性定位-sticky\"><a href=\"#粘性定位-sticky\" class=\"headerlink\" title=\"粘性定位 sticky\"></a>粘性定位 sticky</h2><p>粘性定位可以被认为是相对定位和固定定位的混合，元素在跨越特定阈值前为相对定位，之后为固定定位。元素根据正常文档流进行定位，然后相对它的<strong>最近滚动祖先(nearest scolling ancestor)</strong>和 containing block(最近块级祖先，nearest block-level ancestor)，包括 table-related 元素，基于 top, right, bottom 和 left 的值进行偏移。偏移值不影响任何其它元素的位置。  </p>\n<p>该值总是创建一个新的<strong>层叠上下文(stacking context)</strong>。注意，一个 sticky 元素会”固定”在离它最近的一个拥有”滚动机制”的祖先上（当该祖先的 ovewflow 是 hidden, scroll, auto 或 overlay 时），即便这个祖先不是最近的真实可滚动的祖先，这有效地抑制了任何”sticky”行为。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#test-id</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: sticky;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在 viewport 视口滚动到元素 top 距离小于10px 之前，元素为相对定位。之后，元素将固定在与顶部距离10px 的位置处，走到 viewport 视口滚到阈值以下。</p>\n</blockquote>\n<p><strong>注意</strong>须指定 top, right, bottom 或 left 四个其中之一，才可使粘性定位生效。否则其行为与相对定位相同。</p>\n<p>本篇完</p>"},{"layout":"post","title":"常用 Git 命令集","date":"2022-07-21T09:50:00.000Z","_content":"\n\n> 本文收集了一些常用的 Git 命令，方便查找\n\n<!--more-->\n\n## 本地分支关联远程分支\n1. 查看远程分支和其最近提交\n```bash\ngit branch -vv\n```\n2. 查看远程分支\n```bash\ngit branch -r\n```\n3. 存在关联错误的情况先删除\n```bash\ngit remote remove origin/master\n```\n4. 关联正确分支\n```bash\ngit branch --set-upstream-to=origin/dev dev\n```\n\n## 创建远端分支\n1. 创建一个本地分支\n```bash\ngit checkout -b [branch_name]\n```\n2. 创建远端分支\n```bash\ngit push origin [remote_branch_name]\n```\n3. 将本地分支与远程同名分支关联\n```bash\ngit push --set-upstream origin [local_branch_name]\n```\n\n## 本地暂存\n1. 添加要保存文件\n```bash\ngit add .\n```\n2. 保存\n```bash\ngit stash save \"a message\"\n```\n3. 恢复  \n\n先查看：如果有多个stash内容，这里可以选择恢复哪一个\n```bash\ngit stash list\nstash@{0}: On dev: saved_changes\n```\n方法1：这种情况保存的内容仍然保留\n```bash\ngit stash apply stash@{0}\n```\n方法2：这种情况不会保留已保存内容\n```bash\ngit pop\n```\n\n## 提交另外一个分支上的某个提交\n对于多分支的代码库，将代码从一个分支转移到另一个分支是常见需求。\n这时分两种情况。一种情况是，你需要另一个分支的所有代码变动，那么就采用合并（git merge）。另一种情况是，你只需要部分代码变动（某几个提交），这时可以采用 Cherry pick。\nhttp://www.ruanyifeng.com/blog/2020/04/git-cherry-pick.html\n\n## 回退到某次提交\n- 未提交到远程\n```bash\ngit reset --soft HEAD^\n```\n说明：HEAD^ 表示上一个版本，即上一次的 commit，也可以写成 HEAD~1。\n如果进行两次的 commit，想要都撤回，可以使用 HEAD~2\n\n- 已提交到远程，回滚\n```bash\ngit reset --hard commit_id\n```\n回退到commit_id这次的提交，包含这次\n```bash\ngit push --force\n```\n强制推到远端\n\n## 更改远程仓库指向\n1. 查看远程当前远程库地址：\n```bash\ngit remote -v\n```\n2. 重新设置远程库地址\n```bash\ngit remote set-url origin http://120.221.160.107:3000/medtech_web/lrhealth_ms.git\ngit remote set-url origin http://120.221.161.88:9001/medtech_web/cloudImage-webH5.git\n```\n\n## 删除分支\n- 删除本地\n```bash\ngit branch -D [分支名]\n```\n- 删除远程分支\n```bash\ngit push origin --delete [分支名]\n```\n\n## 切换远端 git 仓库地址\n```bash\ngit remote set-url origin http://mingzhanghui@192.168.10.57/r/OnlineEdu/bgms-web.git\n```\n\n## 打 tag\n- 创建 tag\n```bash\ngit tag [tagName]\n```\n\n- 推到远程\n```bash\ngit push origin [tagName]\n```\n\n- 删除本地 tag\n```bash\ngit tag -d [tagName]\n```\n\n- 删除远程 tag\n```bash\ngit push orign :refs/tags/[tagName]\n```\n\n","source":"_posts/working_with_git_v2.md","raw":"---\nlayout: post\ntitle: 常用 Git 命令集\ntags: [git]\ndate: 2022-07-21 17:50:00 +800\n---\n\n\n> 本文收集了一些常用的 Git 命令，方便查找\n\n<!--more-->\n\n## 本地分支关联远程分支\n1. 查看远程分支和其最近提交\n```bash\ngit branch -vv\n```\n2. 查看远程分支\n```bash\ngit branch -r\n```\n3. 存在关联错误的情况先删除\n```bash\ngit remote remove origin/master\n```\n4. 关联正确分支\n```bash\ngit branch --set-upstream-to=origin/dev dev\n```\n\n## 创建远端分支\n1. 创建一个本地分支\n```bash\ngit checkout -b [branch_name]\n```\n2. 创建远端分支\n```bash\ngit push origin [remote_branch_name]\n```\n3. 将本地分支与远程同名分支关联\n```bash\ngit push --set-upstream origin [local_branch_name]\n```\n\n## 本地暂存\n1. 添加要保存文件\n```bash\ngit add .\n```\n2. 保存\n```bash\ngit stash save \"a message\"\n```\n3. 恢复  \n\n先查看：如果有多个stash内容，这里可以选择恢复哪一个\n```bash\ngit stash list\nstash@{0}: On dev: saved_changes\n```\n方法1：这种情况保存的内容仍然保留\n```bash\ngit stash apply stash@{0}\n```\n方法2：这种情况不会保留已保存内容\n```bash\ngit pop\n```\n\n## 提交另外一个分支上的某个提交\n对于多分支的代码库，将代码从一个分支转移到另一个分支是常见需求。\n这时分两种情况。一种情况是，你需要另一个分支的所有代码变动，那么就采用合并（git merge）。另一种情况是，你只需要部分代码变动（某几个提交），这时可以采用 Cherry pick。\nhttp://www.ruanyifeng.com/blog/2020/04/git-cherry-pick.html\n\n## 回退到某次提交\n- 未提交到远程\n```bash\ngit reset --soft HEAD^\n```\n说明：HEAD^ 表示上一个版本，即上一次的 commit，也可以写成 HEAD~1。\n如果进行两次的 commit，想要都撤回，可以使用 HEAD~2\n\n- 已提交到远程，回滚\n```bash\ngit reset --hard commit_id\n```\n回退到commit_id这次的提交，包含这次\n```bash\ngit push --force\n```\n强制推到远端\n\n## 更改远程仓库指向\n1. 查看远程当前远程库地址：\n```bash\ngit remote -v\n```\n2. 重新设置远程库地址\n```bash\ngit remote set-url origin http://120.221.160.107:3000/medtech_web/lrhealth_ms.git\ngit remote set-url origin http://120.221.161.88:9001/medtech_web/cloudImage-webH5.git\n```\n\n## 删除分支\n- 删除本地\n```bash\ngit branch -D [分支名]\n```\n- 删除远程分支\n```bash\ngit push origin --delete [分支名]\n```\n\n## 切换远端 git 仓库地址\n```bash\ngit remote set-url origin http://mingzhanghui@192.168.10.57/r/OnlineEdu/bgms-web.git\n```\n\n## 打 tag\n- 创建 tag\n```bash\ngit tag [tagName]\n```\n\n- 推到远程\n```bash\ngit push origin [tagName]\n```\n\n- 删除本地 tag\n```bash\ngit tag -d [tagName]\n```\n\n- 删除远程 tag\n```bash\ngit push orign :refs/tags/[tagName]\n```\n\n","slug":"working_with_git_v2","published":1,"updated":"2022-07-22T00:40:31.969Z","_id":"cl5vqhagk0000p7s655zv5x7y","comments":1,"photos":[],"link":"","content":"<blockquote>\n<p>本文收集了一些常用的 Git 命令，方便查找</p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"本地分支关联远程分支\"><a href=\"#本地分支关联远程分支\" class=\"headerlink\" title=\"本地分支关联远程分支\"></a>本地分支关联远程分支</h2><ol>\n<li>查看远程分支和其最近提交<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -vv</span><br></pre></td></tr></table></figure></li>\n<li>查看远程分支<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -r</span><br></pre></td></tr></table></figure></li>\n<li>存在关联错误的情况先删除<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote remove origin/master</span><br></pre></td></tr></table></figure></li>\n<li>关联正确分支<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch --set-upstream-to=origin/dev dev</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"创建远端分支\"><a href=\"#创建远端分支\" class=\"headerlink\" title=\"创建远端分支\"></a>创建远端分支</h2><ol>\n<li>创建一个本地分支<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b [branch_name]</span><br></pre></td></tr></table></figure></li>\n<li>创建远端分支<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin [remote_branch_name]</span><br></pre></td></tr></table></figure></li>\n<li>将本地分支与远程同名分支关联<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push --set-upstream origin [local_branch_name]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"本地暂存\"><a href=\"#本地暂存\" class=\"headerlink\" title=\"本地暂存\"></a>本地暂存</h2><ol>\n<li>添加要保存文件<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br></pre></td></tr></table></figure></li>\n<li>保存<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash save <span class=\"string\">&quot;a message&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li>恢复  </li>\n</ol>\n<p>先查看：如果有多个stash内容，这里可以选择恢复哪一个<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash list</span><br><span class=\"line\">stash@&#123;0&#125;: On dev: saved_changes</span><br></pre></td></tr></table></figure><br>方法1：这种情况保存的内容仍然保留<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash apply stash@&#123;0&#125;</span><br></pre></td></tr></table></figure><br>方法2：这种情况不会保留已保存内容<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pop</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"提交另外一个分支上的某个提交\"><a href=\"#提交另外一个分支上的某个提交\" class=\"headerlink\" title=\"提交另外一个分支上的某个提交\"></a>提交另外一个分支上的某个提交</h2><p>对于多分支的代码库，将代码从一个分支转移到另一个分支是常见需求。<br>这时分两种情况。一种情况是，你需要另一个分支的所有代码变动，那么就采用合并（git merge）。另一种情况是，你只需要部分代码变动（某几个提交），这时可以采用 Cherry pick。<br><a href=\"http://www.ruanyifeng.com/blog/2020/04/git-cherry-pick.html\">http://www.ruanyifeng.com/blog/2020/04/git-cherry-pick.html</a></p>\n<h2 id=\"回退到某次提交\"><a href=\"#回退到某次提交\" class=\"headerlink\" title=\"回退到某次提交\"></a>回退到某次提交</h2><ul>\n<li><p>未提交到远程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --soft HEAD^</span><br></pre></td></tr></table></figure>\n<p>说明：HEAD^ 表示上一个版本，即上一次的 commit，也可以写成 HEAD~1。<br>如果进行两次的 commit，想要都撤回，可以使用 HEAD~2</p>\n</li>\n<li><p>已提交到远程，回滚</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard commit_id</span><br></pre></td></tr></table></figure>\n<p>回退到commit_id这次的提交，包含这次</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push --force</span><br></pre></td></tr></table></figure>\n<p>强制推到远端</p>\n</li>\n</ul>\n<h2 id=\"更改远程仓库指向\"><a href=\"#更改远程仓库指向\" class=\"headerlink\" title=\"更改远程仓库指向\"></a>更改远程仓库指向</h2><ol>\n<li>查看远程当前远程库地址：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure></li>\n<li>重新设置远程库地址<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote set-url origin http://120.221.160.107:3000/medtech_web/lrhealth_ms.git</span><br><span class=\"line\">git remote set-url origin http://120.221.161.88:9001/medtech_web/cloudImage-webH5.git</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h2><ul>\n<li>删除本地<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -D [分支名]</span><br></pre></td></tr></table></figure></li>\n<li>删除远程分支<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin --delete [分支名]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"切换远端-git-仓库地址\"><a href=\"#切换远端-git-仓库地址\" class=\"headerlink\" title=\"切换远端 git 仓库地址\"></a>切换远端 git 仓库地址</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote set-url origin http://mingzhanghui@192.168.10.57/r/OnlineEdu/bgms-web.git</span><br></pre></td></tr></table></figure>\n<h2 id=\"打-tag\"><a href=\"#打-tag\" class=\"headerlink\" title=\"打 tag\"></a>打 tag</h2><ul>\n<li><p>创建 tag</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag [tagName]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>推到远程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin [tagName]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除本地 tag</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -d [tagName]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除远程 tag</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push orign :refs/tags/[tagName]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本文收集了一些常用的 Git 命令，方便查找</p>\n</blockquote>","more":"<h2 id=\"本地分支关联远程分支\"><a href=\"#本地分支关联远程分支\" class=\"headerlink\" title=\"本地分支关联远程分支\"></a>本地分支关联远程分支</h2><ol>\n<li>查看远程分支和其最近提交<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -vv</span><br></pre></td></tr></table></figure></li>\n<li>查看远程分支<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -r</span><br></pre></td></tr></table></figure></li>\n<li>存在关联错误的情况先删除<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote remove origin/master</span><br></pre></td></tr></table></figure></li>\n<li>关联正确分支<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch --set-upstream-to=origin/dev dev</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"创建远端分支\"><a href=\"#创建远端分支\" class=\"headerlink\" title=\"创建远端分支\"></a>创建远端分支</h2><ol>\n<li>创建一个本地分支<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b [branch_name]</span><br></pre></td></tr></table></figure></li>\n<li>创建远端分支<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin [remote_branch_name]</span><br></pre></td></tr></table></figure></li>\n<li>将本地分支与远程同名分支关联<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push --set-upstream origin [local_branch_name]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"本地暂存\"><a href=\"#本地暂存\" class=\"headerlink\" title=\"本地暂存\"></a>本地暂存</h2><ol>\n<li>添加要保存文件<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br></pre></td></tr></table></figure></li>\n<li>保存<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash save <span class=\"string\">&quot;a message&quot;</span></span><br></pre></td></tr></table></figure></li>\n<li>恢复  </li>\n</ol>\n<p>先查看：如果有多个stash内容，这里可以选择恢复哪一个<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash list</span><br><span class=\"line\">stash@&#123;0&#125;: On dev: saved_changes</span><br></pre></td></tr></table></figure><br>方法1：这种情况保存的内容仍然保留<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash apply stash@&#123;0&#125;</span><br></pre></td></tr></table></figure><br>方法2：这种情况不会保留已保存内容<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pop</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"提交另外一个分支上的某个提交\"><a href=\"#提交另外一个分支上的某个提交\" class=\"headerlink\" title=\"提交另外一个分支上的某个提交\"></a>提交另外一个分支上的某个提交</h2><p>对于多分支的代码库，将代码从一个分支转移到另一个分支是常见需求。<br>这时分两种情况。一种情况是，你需要另一个分支的所有代码变动，那么就采用合并（git merge）。另一种情况是，你只需要部分代码变动（某几个提交），这时可以采用 Cherry pick。<br><a href=\"http://www.ruanyifeng.com/blog/2020/04/git-cherry-pick.html\">http://www.ruanyifeng.com/blog/2020/04/git-cherry-pick.html</a></p>\n<h2 id=\"回退到某次提交\"><a href=\"#回退到某次提交\" class=\"headerlink\" title=\"回退到某次提交\"></a>回退到某次提交</h2><ul>\n<li><p>未提交到远程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --soft HEAD^</span><br></pre></td></tr></table></figure>\n<p>说明：HEAD^ 表示上一个版本，即上一次的 commit，也可以写成 HEAD~1。<br>如果进行两次的 commit，想要都撤回，可以使用 HEAD~2</p>\n</li>\n<li><p>已提交到远程，回滚</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard commit_id</span><br></pre></td></tr></table></figure>\n<p>回退到commit_id这次的提交，包含这次</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push --force</span><br></pre></td></tr></table></figure>\n<p>强制推到远端</p>\n</li>\n</ul>\n<h2 id=\"更改远程仓库指向\"><a href=\"#更改远程仓库指向\" class=\"headerlink\" title=\"更改远程仓库指向\"></a>更改远程仓库指向</h2><ol>\n<li>查看远程当前远程库地址：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure></li>\n<li>重新设置远程库地址<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote set-url origin http://120.221.160.107:3000/medtech_web/lrhealth_ms.git</span><br><span class=\"line\">git remote set-url origin http://120.221.161.88:9001/medtech_web/cloudImage-webH5.git</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h2><ul>\n<li>删除本地<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -D [分支名]</span><br></pre></td></tr></table></figure></li>\n<li>删除远程分支<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin --delete [分支名]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"切换远端-git-仓库地址\"><a href=\"#切换远端-git-仓库地址\" class=\"headerlink\" title=\"切换远端 git 仓库地址\"></a>切换远端 git 仓库地址</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote set-url origin http://mingzhanghui@192.168.10.57/r/OnlineEdu/bgms-web.git</span><br></pre></td></tr></table></figure>\n<h2 id=\"打-tag\"><a href=\"#打-tag\" class=\"headerlink\" title=\"打 tag\"></a>打 tag</h2><ul>\n<li><p>创建 tag</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag [tagName]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>推到远程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin [tagName]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除本地 tag</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -d [tagName]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除远程 tag</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push orign :refs/tags/[tagName]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>"},{"layout":"post","title":"微信小程序 tab 切换时触发的触底事件 onReachBottom","date":"2022-07-27T06:30:00.000Z","_content":"\n> 最近在做微信小程序开发项目，遇到了一个比较棘手的问题，就是页面中的 tab 切换需要重新加载数据，但是此时由于 tab 内容高度变化触发了页面触底事件 onReachBottom，又加载了一次数据，导致数据的重复。\n\n<!--more-->\n\n## 问题描述\n微信小程序的页面生命周期方法中提供了一个 onReachBottom 方法，监听页面滚动是否到底部，归页面滚动到底部时处理相应的逻辑，在我的项目中，主要是触底加载下一页数据，即上拉加载更多，当前没有数据更多数据了显示***我也是有底线的***。由于页面组成比较复杂，列表数据展示在3个不同的 tab 中，分别展示不同类型数据，当 tab 切换时去加载对应类型的数据。  \n问题就在于当切换 tab 时，页面高度发生变化，同时触发了 onReachBottom 事件，导致了页面数据重复被加载显示。\n\n## 尝试解决方案\n#### 尝试方案一\n由于是触发了两个事件，考虑在触发另外一个事件加载数据前加一个判断，先想到的就是增加一个标志位 isReachBottom，初始为 false，当页面触底时，设置 isReachBottom 为 true.\n```JavaScript\n//...\ndata: {\n  ...\n  isReachBottom: false\n},\n//\ngetList() {\n  // ...\n},\n\n// ...\n\nonReachBottom() {\n  this.setData({\n    isReachBottom: true\n  });\n  this.getList();\n}\n\nonTabChange() {\n  // 其它逻辑\n  if(this.data.isReachBottom) return;\n  this.getList();\n}\n```\n但是问题就在于，当其中一个 tab 页触底后，isReachBottom 就被设置成了 true，切换到其它 tab 后，这个值也仍然是 true，导致出现 tab 切换时不加载数据。\n\n#### 尝试方案二\n因为同时触发两个加载事件，增加防抖或者节流来阻止多次执行，但是这个方案引入了宏任务，导致执行顺序偶尔不符合预期，增加了代码复杂度。\n\n```JavaScript\n// 防抖\nfuncion debounce(fn, wait) {\n  let timer = null;\n  return () => {\n    if(timer) {\n      clearTimeout(timer);\n    }\n    timer = setTimeout(() => {\n      fn.call(this);\n    }, wait);\n  }\n}\n```\n\n```JavaScript\n// 节流 - 利用延时器实现\nfunction throttle(fn, wait) {\n  let timer = null;\n  return () => {\n    if(timer) return;\n    timer = setTimeout(() => {\n      fn.call(this);\n      timer = null;\n    }, wait)\n  }\n}\n\n// 节流 - 利用时间戳实现\nfunction throttle(fn, wait) {\n  let last = 0;\n  return () => {\n    let now = Date.now();\n    if(now - last > wait) {\n      fn.call(this);\n      last = Date.now();\n    }\n  }\n}\n```\n\n## 最终解决方案\n最后考虑到 onTabChange 事件是在 onReachBottom 事件触发前触发的，设置一个 isTabChange 标志，初始值为 false，当 tab 切换时，首先把 isTabChagne 设置为 true，此时后触发的 onReachBottom 在请求数据前增加判断，如果 isTabChange 为 true，则 return，否则触底继续加载数据。每次请求数据返回后把 isTabChange 置为 false。\n\n```JavaScript\n\ndata: {\n  isTabChagne: false\n}\n\ngetList() {\n  // ajax 请求结束\n  this.setData({\n    //...\n    isTabChange: false\n  });\n}\n\nonTabChange() {\n  this.setData({\n    isTabChange: true\n  });\n  this.getList();\n}\n\nonReachBottom() {\n  if(this.data.isTabChange) return;\n  this.getList();\n}\n\n```\n通过 disable 触底加载逻辑，可能成功避免重复加载问题。\n\n## 结论\n最终解决方案是在经过两次失败尝试后想出来的，仔细思考一下其实就是和尝试方案一相同的思路，方案一想通过知道是否触底来在 tabchagne 时避免再次加载，而解决方案是通过知道是否是 tabchagne 来在触底时避免再次加载，还是要多多思考。\n\n本篇完\n","source":"_posts/wx_app_tab_loading.md","raw":"---\nlayout: post\ntitle: 微信小程序 tab 切换时触发的触底事件 onReachBottom\ntags: [wx,app,onreachbottom,tab,loading]\ndate: 2022-07-27 14:30:00 +800\n---\n\n> 最近在做微信小程序开发项目，遇到了一个比较棘手的问题，就是页面中的 tab 切换需要重新加载数据，但是此时由于 tab 内容高度变化触发了页面触底事件 onReachBottom，又加载了一次数据，导致数据的重复。\n\n<!--more-->\n\n## 问题描述\n微信小程序的页面生命周期方法中提供了一个 onReachBottom 方法，监听页面滚动是否到底部，归页面滚动到底部时处理相应的逻辑，在我的项目中，主要是触底加载下一页数据，即上拉加载更多，当前没有数据更多数据了显示***我也是有底线的***。由于页面组成比较复杂，列表数据展示在3个不同的 tab 中，分别展示不同类型数据，当 tab 切换时去加载对应类型的数据。  \n问题就在于当切换 tab 时，页面高度发生变化，同时触发了 onReachBottom 事件，导致了页面数据重复被加载显示。\n\n## 尝试解决方案\n#### 尝试方案一\n由于是触发了两个事件，考虑在触发另外一个事件加载数据前加一个判断，先想到的就是增加一个标志位 isReachBottom，初始为 false，当页面触底时，设置 isReachBottom 为 true.\n```JavaScript\n//...\ndata: {\n  ...\n  isReachBottom: false\n},\n//\ngetList() {\n  // ...\n},\n\n// ...\n\nonReachBottom() {\n  this.setData({\n    isReachBottom: true\n  });\n  this.getList();\n}\n\nonTabChange() {\n  // 其它逻辑\n  if(this.data.isReachBottom) return;\n  this.getList();\n}\n```\n但是问题就在于，当其中一个 tab 页触底后，isReachBottom 就被设置成了 true，切换到其它 tab 后，这个值也仍然是 true，导致出现 tab 切换时不加载数据。\n\n#### 尝试方案二\n因为同时触发两个加载事件，增加防抖或者节流来阻止多次执行，但是这个方案引入了宏任务，导致执行顺序偶尔不符合预期，增加了代码复杂度。\n\n```JavaScript\n// 防抖\nfuncion debounce(fn, wait) {\n  let timer = null;\n  return () => {\n    if(timer) {\n      clearTimeout(timer);\n    }\n    timer = setTimeout(() => {\n      fn.call(this);\n    }, wait);\n  }\n}\n```\n\n```JavaScript\n// 节流 - 利用延时器实现\nfunction throttle(fn, wait) {\n  let timer = null;\n  return () => {\n    if(timer) return;\n    timer = setTimeout(() => {\n      fn.call(this);\n      timer = null;\n    }, wait)\n  }\n}\n\n// 节流 - 利用时间戳实现\nfunction throttle(fn, wait) {\n  let last = 0;\n  return () => {\n    let now = Date.now();\n    if(now - last > wait) {\n      fn.call(this);\n      last = Date.now();\n    }\n  }\n}\n```\n\n## 最终解决方案\n最后考虑到 onTabChange 事件是在 onReachBottom 事件触发前触发的，设置一个 isTabChange 标志，初始值为 false，当 tab 切换时，首先把 isTabChagne 设置为 true，此时后触发的 onReachBottom 在请求数据前增加判断，如果 isTabChange 为 true，则 return，否则触底继续加载数据。每次请求数据返回后把 isTabChange 置为 false。\n\n```JavaScript\n\ndata: {\n  isTabChagne: false\n}\n\ngetList() {\n  // ajax 请求结束\n  this.setData({\n    //...\n    isTabChange: false\n  });\n}\n\nonTabChange() {\n  this.setData({\n    isTabChange: true\n  });\n  this.getList();\n}\n\nonReachBottom() {\n  if(this.data.isTabChange) return;\n  this.getList();\n}\n\n```\n通过 disable 触底加载逻辑，可能成功避免重复加载问题。\n\n## 结论\n最终解决方案是在经过两次失败尝试后想出来的，仔细思考一下其实就是和尝试方案一相同的思路，方案一想通过知道是否触底来在 tabchagne 时避免再次加载，而解决方案是通过知道是否是 tabchagne 来在触底时避免再次加载，还是要多多思考。\n\n本篇完\n","slug":"wx_app_tab_loading","published":1,"updated":"2022-07-27T08:21:26.414Z","comments":1,"photos":[],"link":"","_id":"cl63c8jj900007ks6eg63ehln","content":"<blockquote>\n<p>最近在做微信小程序开发项目，遇到了一个比较棘手的问题，就是页面中的 tab 切换需要重新加载数据，但是此时由于 tab 内容高度变化触发了页面触底事件 onReachBottom，又加载了一次数据，导致数据的重复。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>微信小程序的页面生命周期方法中提供了一个 onReachBottom 方法，监听页面滚动是否到底部，归页面滚动到底部时处理相应的逻辑，在我的项目中，主要是触底加载下一页数据，即上拉加载更多，当前没有数据更多数据了显示<strong><em>我也是有底线的</em></strong>。由于页面组成比较复杂，列表数据展示在3个不同的 tab 中，分别展示不同类型数据，当 tab 切换时去加载对应类型的数据。<br>问题就在于当切换 tab 时，页面高度发生变化，同时触发了 onReachBottom 事件，导致了页面数据重复被加载显示。</p>\n<h2 id=\"尝试解决方案\"><a href=\"#尝试解决方案\" class=\"headerlink\" title=\"尝试解决方案\"></a>尝试解决方案</h2><h4 id=\"尝试方案一\"><a href=\"#尝试方案一\" class=\"headerlink\" title=\"尝试方案一\"></a>尝试方案一</h4><p>由于是触发了两个事件，考虑在触发另外一个事件加载数据前加一个判断，先想到的就是增加一个标志位 isReachBottom，初始为 false，当页面触底时，设置 isReachBottom 为 true.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"><span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"attr\">isReachBottom</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"title function_\">getList</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">onReachBottom</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">isReachBottom</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">getList</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">onTabChange</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 其它逻辑</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">isReachBottom</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">getList</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>但是问题就在于，当其中一个 tab 页触底后，isReachBottom 就被设置成了 true，切换到其它 tab 后，这个值也仍然是 true，导致出现 tab 切换时不加载数据。</p>\n<h4 id=\"尝试方案二\"><a href=\"#尝试方案二\" class=\"headerlink\" title=\"尝试方案二\"></a>尝试方案二</h4><p>因为同时触发两个加载事件，增加防抖或者节流来阻止多次执行，但是这个方案引入了宏任务，导致执行顺序偶尔不符合预期，增加了代码复杂度。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 防抖</span></span><br><span class=\"line\">funcion <span class=\"title function_\">debounce</span>(<span class=\"params\">fn, wait</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(timer) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      fn.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;, wait);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 节流 - 利用延时器实现</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">fn, wait</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(timer) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      fn.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">      timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;, wait)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 节流 - 利用时间戳实现</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">fn, wait</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> last = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> now = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(now - last &gt; wait) &#123;</span><br><span class=\"line\">      fn.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">      last = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最终解决方案\"><a href=\"#最终解决方案\" class=\"headerlink\" title=\"最终解决方案\"></a>最终解决方案</h2><p>最后考虑到 onTabChange 事件是在 onReachBottom 事件触发前触发的，设置一个 isTabChange 标志，初始值为 false，当 tab 切换时，首先把 isTabChagne 设置为 true，此时后触发的 onReachBottom 在请求数据前增加判断，如果 isTabChange 为 true，则 return，否则触底继续加载数据。每次请求数据返回后把 isTabChange 置为 false。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">isTabChagne</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">getList</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ajax 请求结束</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"attr\">isTabChange</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">onTabChange</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">isTabChange</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">getList</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">onReachBottom</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">isTabChange</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">getList</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>通过 disable 触底加载逻辑，可能成功避免重复加载问题。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>最终解决方案是在经过两次失败尝试后想出来的，仔细思考一下其实就是和尝试方案一相同的思路，方案一想通过知道是否触底来在 tabchagne 时避免再次加载，而解决方案是通过知道是否是 tabchagne 来在触底时避免再次加载，还是要多多思考。</p>\n<p>本篇完</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>最近在做微信小程序开发项目，遇到了一个比较棘手的问题，就是页面中的 tab 切换需要重新加载数据，但是此时由于 tab 内容高度变化触发了页面触底事件 onReachBottom，又加载了一次数据，导致数据的重复。</p>\n</blockquote>","more":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>微信小程序的页面生命周期方法中提供了一个 onReachBottom 方法，监听页面滚动是否到底部，归页面滚动到底部时处理相应的逻辑，在我的项目中，主要是触底加载下一页数据，即上拉加载更多，当前没有数据更多数据了显示<strong><em>我也是有底线的</em></strong>。由于页面组成比较复杂，列表数据展示在3个不同的 tab 中，分别展示不同类型数据，当 tab 切换时去加载对应类型的数据。<br>问题就在于当切换 tab 时，页面高度发生变化，同时触发了 onReachBottom 事件，导致了页面数据重复被加载显示。</p>\n<h2 id=\"尝试解决方案\"><a href=\"#尝试解决方案\" class=\"headerlink\" title=\"尝试解决方案\"></a>尝试解决方案</h2><h4 id=\"尝试方案一\"><a href=\"#尝试方案一\" class=\"headerlink\" title=\"尝试方案一\"></a>尝试方案一</h4><p>由于是触发了两个事件，考虑在触发另外一个事件加载数据前加一个判断，先想到的就是增加一个标志位 isReachBottom，初始为 false，当页面触底时，设置 isReachBottom 为 true.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"><span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"attr\">isReachBottom</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"title function_\">getList</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">onReachBottom</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">isReachBottom</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">getList</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">onTabChange</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 其它逻辑</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">isReachBottom</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">getList</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>但是问题就在于，当其中一个 tab 页触底后，isReachBottom 就被设置成了 true，切换到其它 tab 后，这个值也仍然是 true，导致出现 tab 切换时不加载数据。</p>\n<h4 id=\"尝试方案二\"><a href=\"#尝试方案二\" class=\"headerlink\" title=\"尝试方案二\"></a>尝试方案二</h4><p>因为同时触发两个加载事件，增加防抖或者节流来阻止多次执行，但是这个方案引入了宏任务，导致执行顺序偶尔不符合预期，增加了代码复杂度。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 防抖</span></span><br><span class=\"line\">funcion <span class=\"title function_\">debounce</span>(<span class=\"params\">fn, wait</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(timer) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      fn.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">    &#125;, wait);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 节流 - 利用延时器实现</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">fn, wait</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(timer) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      fn.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">      timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;, wait)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 节流 - 利用时间戳实现</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">fn, wait</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> last = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> now = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(now - last &gt; wait) &#123;</span><br><span class=\"line\">      fn.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">      last = <span class=\"title class_\">Date</span>.<span class=\"title function_\">now</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最终解决方案\"><a href=\"#最终解决方案\" class=\"headerlink\" title=\"最终解决方案\"></a>最终解决方案</h2><p>最后考虑到 onTabChange 事件是在 onReachBottom 事件触发前触发的，设置一个 isTabChange 标志，初始值为 false，当 tab 切换时，首先把 isTabChagne 设置为 true，此时后触发的 onReachBottom 在请求数据前增加判断，如果 isTabChange 为 true，则 return，否则触底继续加载数据。每次请求数据返回后把 isTabChange 置为 false。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">isTabChagne</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">getList</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ajax 请求结束</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"attr\">isTabChange</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">onTabChange</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">isTabChange</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">getList</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">onReachBottom</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">isTabChange</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">getList</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>通过 disable 触底加载逻辑，可能成功避免重复加载问题。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>最终解决方案是在经过两次失败尝试后想出来的，仔细思考一下其实就是和尝试方案一相同的思路，方案一想通过知道是否触底来在 tabchagne 时避免再次加载，而解决方案是通过知道是否是 tabchagne 来在触底时避免再次加载，还是要多多思考。</p>\n<p>本篇完</p>"},{"layout":"post","title":"微信小程序模板使用总结","date":"2022-07-28T08:23:00.000Z","_content":"\n> 最近在做微信小程序开发项目，在使用模板时遇到一些问题，在此记录并总结学习。\n\n<!--more-->\n\n## 模板的基本使用\n**template**是微信小程序定义模板的关键字，模板定义有以下两种方式：\n- WXML 文件内部中定义\n```html\n<template is=\"card\">\n  <view class=\"card-container\">\n    <view class=\"row\">\n      <view>标题</view>\n      <view>{{title}}</view>\n    </view>\n    <view class=\"row\">\n      <view>作者</view>\n      <view>{{name}}</view>\n    </view>\n  </view>\n</template>\n\n<view class=\"page-container\">\n  <template is=\"card\" wx:for=\"{{[{title: '标题1', name: '张三1'}, {title: '标题2', name: '张三2'}]}}\" wx:key=\"id\" data=\"{{...item}}\"></template>\n</view>\n```\n> 这里 is 的值就是模板的 name 属性值，用于指定使用的模板\n\n- 单独定义模板页面，在使用的 WXML 文件中 import 进来使用\n```html\n<!-- template.wxml -->\n<template is=\"card\">\n  <view class=\"card-container\">\n    <view class=\"row\">\n      <view>标题</view>\n      <view>{{title}}</view>\n    </view>\n    <view class=\"row\">\n      <view>作者</view>\n      <view>{{name}}</view>\n    </view>\n  </view>\n</template>\n```\n```html\n<!-- home.wxml -->\n<!-- 声明需要使用的模板文件 -->\n<import src=\"path/to/template.wxml\" />\n\n<!-- 使用 -->\n<view class=\"page-container\">\n  <template is=\"card\" wx:for=\"{{[{title: '标题1', name: '张三1'}, {title: '标题2', name: '张三2'}]}}\" wx:key=\"id\" data=\"{{...item}}\"></template>\n</view>\n```\n\n## 模板的作用域\n模板拥有自己的作用域，只能使用 data 传入的数据以及模板定义文件中定义的 <wxs /> 模块。\n\n注意：模板只能使用传入的 data 数据和 wxs 中定义的数据，不能使用 Page 或 Component 中定义的 data 属性中的值\n\n本篇完\n","source":"_posts/wx_app_template.md","raw":"---\nlayout: post\ntitle: 微信小程序模板使用总结\ntags: [wx,app,onreachbottom,tab,loading]\ndate: 2022-07-28 16:23:00 +800\n---\n\n> 最近在做微信小程序开发项目，在使用模板时遇到一些问题，在此记录并总结学习。\n\n<!--more-->\n\n## 模板的基本使用\n**template**是微信小程序定义模板的关键字，模板定义有以下两种方式：\n- WXML 文件内部中定义\n```html\n<template is=\"card\">\n  <view class=\"card-container\">\n    <view class=\"row\">\n      <view>标题</view>\n      <view>{{title}}</view>\n    </view>\n    <view class=\"row\">\n      <view>作者</view>\n      <view>{{name}}</view>\n    </view>\n  </view>\n</template>\n\n<view class=\"page-container\">\n  <template is=\"card\" wx:for=\"{{[{title: '标题1', name: '张三1'}, {title: '标题2', name: '张三2'}]}}\" wx:key=\"id\" data=\"{{...item}}\"></template>\n</view>\n```\n> 这里 is 的值就是模板的 name 属性值，用于指定使用的模板\n\n- 单独定义模板页面，在使用的 WXML 文件中 import 进来使用\n```html\n<!-- template.wxml -->\n<template is=\"card\">\n  <view class=\"card-container\">\n    <view class=\"row\">\n      <view>标题</view>\n      <view>{{title}}</view>\n    </view>\n    <view class=\"row\">\n      <view>作者</view>\n      <view>{{name}}</view>\n    </view>\n  </view>\n</template>\n```\n```html\n<!-- home.wxml -->\n<!-- 声明需要使用的模板文件 -->\n<import src=\"path/to/template.wxml\" />\n\n<!-- 使用 -->\n<view class=\"page-container\">\n  <template is=\"card\" wx:for=\"{{[{title: '标题1', name: '张三1'}, {title: '标题2', name: '张三2'}]}}\" wx:key=\"id\" data=\"{{...item}}\"></template>\n</view>\n```\n\n## 模板的作用域\n模板拥有自己的作用域，只能使用 data 传入的数据以及模板定义文件中定义的 <wxs /> 模块。\n\n注意：模板只能使用传入的 data 数据和 wxs 中定义的数据，不能使用 Page 或 Component 中定义的 data 属性中的值\n\n本篇完\n","slug":"wx_app_template","published":1,"updated":"2022-07-28T09:00:44.200Z","comments":1,"photos":[],"link":"","_id":"cl64t2yus000085s6gnif27w7","content":"<blockquote>\n<p>最近在做微信小程序开发项目，在使用模板时遇到一些问题，在此记录并总结学习。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"模板的基本使用\"><a href=\"#模板的基本使用\" class=\"headerlink\" title=\"模板的基本使用\"></a>模板的基本使用</h2><p><strong>template</strong>是微信小程序定义模板的关键字，模板定义有以下两种方式：</p>\n<ul>\n<li><p>WXML 文件内部中定义</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">is</span>=<span class=\"string\">&quot;card&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card-container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span>标题<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span>作者<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;page-container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">is</span>=<span class=\"string\">&quot;card&quot;</span> <span class=\"attr\">wx:for</span>=<span class=\"string\">&quot;&#123;&#123;[&#123;title: &#x27;标题1&#x27;, name: &#x27;张三1&#x27;&#125;, &#123;title: &#x27;标题2&#x27;, name: &#x27;张三2&#x27;&#125;]&#125;&#125;&quot;</span> <span class=\"attr\">wx:key</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">data</span>=<span class=\"string\">&quot;&#123;&#123;...item&#125;&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里 is 的值就是模板的 name 属性值，用于指定使用的模板</p>\n</blockquote>\n</li>\n<li><p>单独定义模板页面，在使用的 WXML 文件中 import 进来使用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- template.wxml --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">is</span>=<span class=\"string\">&quot;card&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card-container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span>标题<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span>作者<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- home.wxml --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 声明需要使用的模板文件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;path/to/template.wxml&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 使用 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;page-container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">is</span>=<span class=\"string\">&quot;card&quot;</span> <span class=\"attr\">wx:for</span>=<span class=\"string\">&quot;&#123;&#123;[&#123;title: &#x27;标题1&#x27;, name: &#x27;张三1&#x27;&#125;, &#123;title: &#x27;标题2&#x27;, name: &#x27;张三2&#x27;&#125;]&#125;&#125;&quot;</span> <span class=\"attr\">wx:key</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">data</span>=<span class=\"string\">&quot;&#123;&#123;...item&#125;&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"模板的作用域\"><a href=\"#模板的作用域\" class=\"headerlink\" title=\"模板的作用域\"></a>模板的作用域</h2><p>模板拥有自己的作用域，只能使用 data 传入的数据以及模板定义文件中定义的 <wxs /> 模块。</p>\n<p>注意：模板只能使用传入的 data 数据和 wxs 中定义的数据，不能使用 Page 或 Component 中定义的 data 属性中的值</p>\n<p>本篇完</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>最近在做微信小程序开发项目，在使用模板时遇到一些问题，在此记录并总结学习。</p>\n</blockquote>","more":"<h2 id=\"模板的基本使用\"><a href=\"#模板的基本使用\" class=\"headerlink\" title=\"模板的基本使用\"></a>模板的基本使用</h2><p><strong>template</strong>是微信小程序定义模板的关键字，模板定义有以下两种方式：</p>\n<ul>\n<li><p>WXML 文件内部中定义</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">is</span>=<span class=\"string\">&quot;card&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card-container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span>标题<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span>作者<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;page-container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">is</span>=<span class=\"string\">&quot;card&quot;</span> <span class=\"attr\">wx:for</span>=<span class=\"string\">&quot;&#123;&#123;[&#123;title: &#x27;标题1&#x27;, name: &#x27;张三1&#x27;&#125;, &#123;title: &#x27;标题2&#x27;, name: &#x27;张三2&#x27;&#125;]&#125;&#125;&quot;</span> <span class=\"attr\">wx:key</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">data</span>=<span class=\"string\">&quot;&#123;&#123;...item&#125;&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里 is 的值就是模板的 name 属性值，用于指定使用的模板</p>\n</blockquote>\n</li>\n<li><p>单独定义模板页面，在使用的 WXML 文件中 import 进来使用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- template.wxml --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">is</span>=<span class=\"string\">&quot;card&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;card-container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span>标题<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;row&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span>作者<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- home.wxml --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 声明需要使用的模板文件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;path/to/template.wxml&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 使用 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;page-container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">is</span>=<span class=\"string\">&quot;card&quot;</span> <span class=\"attr\">wx:for</span>=<span class=\"string\">&quot;&#123;&#123;[&#123;title: &#x27;标题1&#x27;, name: &#x27;张三1&#x27;&#125;, &#123;title: &#x27;标题2&#x27;, name: &#x27;张三2&#x27;&#125;]&#125;&#125;&quot;</span> <span class=\"attr\">wx:key</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">data</span>=<span class=\"string\">&quot;&#123;&#123;...item&#125;&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"模板的作用域\"><a href=\"#模板的作用域\" class=\"headerlink\" title=\"模板的作用域\"></a>模板的作用域</h2><p>模板拥有自己的作用域，只能使用 data 传入的数据以及模板定义文件中定义的 <wxs /> 模块。</p>\n<p>注意：模板只能使用传入的 data 数据和 wxs 中定义的数据，不能使用 Page 或 Component 中定义的 data 属性中的值</p>\n<p>本篇完</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cl5lql4cy00018ds66ycvhhte","tag_id":"cl5lql4d400038ds63r7xfezh","_id":"cl5lql4dh000i8ds69mpuazef"},{"post_id":"cl5lql4cy00018ds66ycvhhte","tag_id":"cl5lql4d900078ds63lte5ws9","_id":"cl5lql4dh000k8ds6750nf2ww"},{"post_id":"cl5lql4cy00018ds66ycvhhte","tag_id":"cl5lql4db000a8ds62epn1har","_id":"cl5lql4dj000n8ds6ghugakm4"},{"post_id":"cl5lql4cy00018ds66ycvhhte","tag_id":"cl5lql4de000d8ds64pc36p44","_id":"cl5lql4dj000p8ds60czw8hqu"},{"post_id":"cl5lql4d200028ds6eghi3tbk","tag_id":"cl5lql4df000g8ds63v7x601f","_id":"cl5lql4dn000w8ds61wwshshv"},{"post_id":"cl5lql4d200028ds6eghi3tbk","tag_id":"cl5lql4di000m8ds62bh7gqci","_id":"cl5lql4dn000x8ds63vpm4plm"},{"post_id":"cl5lql4d200028ds6eghi3tbk","tag_id":"cl5lql4dk000r8ds61der4b4q","_id":"cl5lql4dn000z8ds61ds4hllt"},{"post_id":"cl5lql4d200028ds6eghi3tbk","tag_id":"cl5lql4dm000u8ds6bqmic196","_id":"cl5lql4dn00108ds639nye2u4"},{"post_id":"cl5lql4d600048ds6embf6em4","tag_id":"cl5lql4dm000v8ds6av83bmhw","_id":"cl5lql4do00148ds6f1jy03v2"},{"post_id":"cl5lql4d600048ds6embf6em4","tag_id":"cl5lql4dn000y8ds6gmqrd3o0","_id":"cl5lql4do00158ds6er8lgsjt"},{"post_id":"cl5lql4d600048ds6embf6em4","tag_id":"cl5lql4dn00118ds60sgffvbv","_id":"cl5lql4do00178ds6b6np1gk4"},{"post_id":"cl5lql4d600048ds6embf6em4","tag_id":"cl5lql4do00128ds6booidwfd","_id":"cl5lql4dp00188ds6gnkfhg9v"},{"post_id":"cl5lql4d700058ds651nm9s84","tag_id":"cl5lql4do00138ds6aarz5syv","_id":"cl5lql4dq001c8ds6dcuqbfrg"},{"post_id":"cl5lql4d700058ds651nm9s84","tag_id":"cl5lql4do00168ds61hm90r4h","_id":"cl5lql4dq001d8ds6469g72nw"},{"post_id":"cl5lql4d700058ds651nm9s84","tag_id":"cl5lql4dp00198ds6gbji663e","_id":"cl5lql4dr001f8ds6ettl6vrk"},{"post_id":"cl5lql4d700058ds651nm9s84","tag_id":"cl5lql4dp001a8ds653ioa19x","_id":"cl5lql4dr001g8ds6g8lqclaw"},{"post_id":"cl5lql4d800068ds6233yeczk","tag_id":"cl5lql4dm000v8ds6av83bmhw","_id":"cl5lql4ds001j8ds68x4sh8ga"},{"post_id":"cl5lql4d800068ds6233yeczk","tag_id":"cl5lql4dn000y8ds6gmqrd3o0","_id":"cl5lql4ds001k8ds6bwat7qt3"},{"post_id":"cl5lql4d800068ds6233yeczk","tag_id":"cl5lql4dr001h8ds67j2ba6r9","_id":"cl5lql4ds001m8ds6bfnp0kjy"},{"post_id":"cl5lql4d900088ds68z5b9qnc","tag_id":"cl5lql4ds001i8ds64wop70y1","_id":"cl5lql4dt001p8ds68wf039e6"},{"post_id":"cl5lql4d900088ds68z5b9qnc","tag_id":"cl5lql4ds001l8ds62a5v3m7q","_id":"cl5lql4dt001q8ds649dk6xn2"},{"post_id":"cl5lql4d900088ds68z5b9qnc","tag_id":"cl5lql4ds001n8ds6hykhb2hd","_id":"cl5lql4du001s8ds6etc6gup6"},{"post_id":"cl5lql4db00098ds6c59zaboi","tag_id":"cl5lql4di000m8ds62bh7gqci","_id":"cl5lql4du001v8ds65twc1adi"},{"post_id":"cl5lql4db00098ds6c59zaboi","tag_id":"cl5lql4dt001r8ds60w3v7apb","_id":"cl5lql4du001w8ds6bl4n47eu"},{"post_id":"cl5lql4db00098ds6c59zaboi","tag_id":"cl5lql4du001t8ds684yq08y8","_id":"cl5lql4dv001y8ds63okybcst"},{"post_id":"cl5lql4dc000b8ds651wudrm3","tag_id":"cl5lql4du001u8ds6et74gbra","_id":"cl5lql4dv00218ds60pbi2xm0"},{"post_id":"cl5lql4dc000b8ds651wudrm3","tag_id":"cl5lql4du001x8ds6cvblg7yf","_id":"cl5lql4dv00228ds614f83erb"},{"post_id":"cl5lql4dc000b8ds651wudrm3","tag_id":"cl5lql4dv001z8ds62l6f3ll4","_id":"cl5lql4dw00248ds63j8dgwin"},{"post_id":"cl5lql4dd000c8ds6hpcuh3nz","tag_id":"cl5lql4dv00208ds6b4os66yk","_id":"cl5lql4dw00278ds671r90e8m"},{"post_id":"cl5lql4dd000c8ds6hpcuh3nz","tag_id":"cl5lql4dv00238ds6835b5bm2","_id":"cl5lql4dw00288ds62hth98qi"},{"post_id":"cl5lql4dd000c8ds6hpcuh3nz","tag_id":"cl5lql4dw00258ds6g9t44fjj","_id":"cl5lql4dx002a8ds6c3bd7tef"},{"post_id":"cl5lql4de000e8ds68vmg1tbg","tag_id":"cl5lql4dw00268ds60ojs60qp","_id":"cl5lql4dx002d8ds6ekmq2exy"},{"post_id":"cl5lql4de000e8ds68vmg1tbg","tag_id":"cl5lql4dw00298ds623zfev3y","_id":"cl5lql4dx002e8ds698g66k56"},{"post_id":"cl5lql4de000e8ds68vmg1tbg","tag_id":"cl5lql4dx002b8ds6anjz0u2x","_id":"cl5lql4dy002g8ds65cfaa5bl"},{"post_id":"cl5lql4df000f8ds691tm4k7p","tag_id":"cl5lql4dx002c8ds66rvc58b2","_id":"cl5lql4dz002l8ds67j1lcfml"},{"post_id":"cl5lql4df000f8ds691tm4k7p","tag_id":"cl5lql4dv00208ds6b4os66yk","_id":"cl5lql4dz002m8ds6626reerq"},{"post_id":"cl5lql4df000f8ds691tm4k7p","tag_id":"cl5lql4dv00238ds6835b5bm2","_id":"cl5lql4e0002o8ds6e19bchuw"},{"post_id":"cl5lql4df000f8ds691tm4k7p","tag_id":"cl5lql4dy002i8ds6gggwa3hs","_id":"cl5lql4e0002p8ds675ob5hcz"},{"post_id":"cl5lql4df000f8ds691tm4k7p","tag_id":"cl5lql4dz002j8ds66sbyhv3a","_id":"cl5lql4e0002r8ds6cdsi75at"},{"post_id":"cl5lql4dg000h8ds6bh10e6zi","tag_id":"cl5lql4dz002k8ds64gyhbos9","_id":"cl5lql4e1002t8ds635im2c5e"},{"post_id":"cl5lql4dg000h8ds6bh10e6zi","tag_id":"cl5lql4dz002n8ds68c5h3arm","_id":"cl5lql4e1002u8ds68iwg392q"},{"post_id":"cl5lql4dg000h8ds6bh10e6zi","tag_id":"cl5lql4e0002q8ds62qhu3kfe","_id":"cl5lql4e1002w8ds64wpg7evt"},{"post_id":"cl5lql4dh000j8ds6bcoz0dyq","tag_id":"cl5lql4dz002k8ds64gyhbos9","_id":"cl5lql4e2002z8ds6dreh8xnn"},{"post_id":"cl5lql4dh000j8ds6bcoz0dyq","tag_id":"cl5lql4dz002n8ds68c5h3arm","_id":"cl5lql4e200308ds64aru80o9"},{"post_id":"cl5lql4dh000j8ds6bcoz0dyq","tag_id":"cl5lql4e1002x8ds6ccal46xo","_id":"cl5lql4e500328ds680koe79b"},{"post_id":"cl5lql4di000l8ds6ac7ghkfy","tag_id":"cl5lql4e2002y8ds60engef9s","_id":"cl5lql4e500358ds66b6rb12i"},{"post_id":"cl5lql4di000l8ds6ac7ghkfy","tag_id":"cl5lql4e200318ds6hnek04a5","_id":"cl5lql4e600368ds6bpt9d8j0"},{"post_id":"cl5lql4di000l8ds6ac7ghkfy","tag_id":"cl5lql4e500338ds6e64980qa","_id":"cl5lql4e600388ds6h3ff1wvv"},{"post_id":"cl5lql4dj000o8ds61ck1449d","tag_id":"cl5lql4dv00208ds6b4os66yk","_id":"cl5lql4e7003c8ds69h3c92gg"},{"post_id":"cl5lql4dj000o8ds61ck1449d","tag_id":"cl5lql4e600378ds61u4vdyoz","_id":"cl5lql4e7003d8ds6g0398ldh"},{"post_id":"cl5lql4dj000o8ds61ck1449d","tag_id":"cl5lql4e600398ds6hpup1w57","_id":"cl5lql4e8003f8ds6981vdnug"},{"post_id":"cl5lql4dj000o8ds61ck1449d","tag_id":"cl5lql4e7003a8ds661ee37n8","_id":"cl5lql4e8003g8ds6dvvfdup0"},{"post_id":"cl5lql4dj000q8ds6gm47fb9z","tag_id":"cl5lql4e7003b8ds6ft3odbm9","_id":"cl5lql4e9003i8ds65nxs14k4"},{"post_id":"cl5lql4dj000q8ds6gm47fb9z","tag_id":"cl5lql4e7003e8ds66cxl0m4a","_id":"cl5lql4e9003j8ds6h46sbvb4"},{"post_id":"cl5lql4dl000t8ds6b9fr7pus","tag_id":"cl5lql4e8003h8ds647f16cn7","_id":"cl5lql4eb003m8ds6b8lne0i9"},{"post_id":"cl5lql4dl000t8ds6b9fr7pus","tag_id":"cl5lql4e9003k8ds6d5i97eru","_id":"cl5lql4eb003n8ds67mz2arvt"},{"post_id":"cl5lql4dl000t8ds6b9fr7pus","tag_id":"cl5lql4ea003l8ds6f5ey3wsm","_id":"cl5lql4eb003o8ds61h7k01ok"},{"post_id":"cl5lql4ec003p8ds642qi4joh","tag_id":"cl5lql4dv00208ds6b4os66yk","_id":"cl5lql4ed003q8ds6492ybokx"},{"post_id":"cl5lruu1j0000gjs658im1zcw","tag_id":"cl5ls3q0y0001gjs6ggmo4x3y","_id":"cl5ls3q0z0003gjs65hpgf326"},{"post_id":"cl5lruu1j0000gjs658im1zcw","tag_id":"cl5ls3q0y0002gjs6c3l74dkr","_id":"cl5ls3q0z0004gjs6d4lfd074"},{"post_id":"cl5lruu1j0000gjs658im1zcw","tag_id":"cl5lql4e200318ds6hnek04a5","_id":"cl5ls3q100005gjs6azt9gqd2"},{"post_id":"cl5qkvh7f0000wrs6d2mvapnb","tag_id":"cl5lql4d400038ds63r7xfezh","_id":"cl5qkvh7w0007wrs65gcs3pb3"},{"post_id":"cl5qkvh7f0000wrs6d2mvapnb","tag_id":"cl5qkvh7p0001wrs6aj9b0bde","_id":"cl5qkvh7w0008wrs6gi0vd9nr"},{"post_id":"cl5qkvh7f0000wrs6d2mvapnb","tag_id":"cl5qkvh7t0002wrs6g9wjfl65","_id":"cl5qkvh7w0009wrs6hkmc433f"},{"post_id":"cl5qkvh7f0000wrs6d2mvapnb","tag_id":"cl5qkvh7u0003wrs6fdp29jpb","_id":"cl5qkvh7w000awrs688r7hcrx"},{"post_id":"cl5qkvh7f0000wrs6d2mvapnb","tag_id":"cl5qkvh7u0004wrs6cpnca2h5","_id":"cl5qkvh7w000bwrs67lvac9wk"},{"post_id":"cl5qkvh7f0000wrs6d2mvapnb","tag_id":"cl5qkvh7v0005wrs67riz2n56","_id":"cl5qkvh7w000cwrs62ana8ke2"},{"post_id":"cl5qkvh7f0000wrs6d2mvapnb","tag_id":"cl5qkvh7v0006wrs654bac9rh","_id":"cl5qkvh7w000dwrs6h73r0q30"},{"post_id":"cl5vqhagk0000p7s655zv5x7y","tag_id":"cl5lql4dv00208ds6b4os66yk","_id":"cl5vqhah10001p7s6hsmxf09b"},{"post_id":"cl63c8jj900007ks6eg63ehln","tag_id":"cl63c8jjj00017ks66oys1e2i","_id":"cl63c8jjq00067ks61q39e7mz"},{"post_id":"cl63c8jj900007ks6eg63ehln","tag_id":"cl63c8jjo00027ks6dej354nw","_id":"cl63c8jjq00077ks6d9lf886v"},{"post_id":"cl63c8jj900007ks6eg63ehln","tag_id":"cl63c8jjo00037ks6gfh15oxh","_id":"cl63c8jjq00087ks6cx6gbn4o"},{"post_id":"cl63c8jj900007ks6eg63ehln","tag_id":"cl63c8jjp00047ks666bv7sg1","_id":"cl63c8jjq00097ks65obu1dmd"},{"post_id":"cl63c8jj900007ks6eg63ehln","tag_id":"cl63c8jjp00057ks66v5cg2t2","_id":"cl63c8jjq000a7ks69k1rh2ty"},{"post_id":"cl64t2yus000085s6gnif27w7","tag_id":"cl63c8jjj00017ks66oys1e2i","_id":"cl64t2yv4000185s63hnmdss9"},{"post_id":"cl64t2yus000085s6gnif27w7","tag_id":"cl63c8jjo00027ks6dej354nw","_id":"cl64t2yv4000285s65u0w18ji"},{"post_id":"cl64t2yus000085s6gnif27w7","tag_id":"cl63c8jjo00037ks6gfh15oxh","_id":"cl64t2yv5000385s635o02tvi"},{"post_id":"cl64t2yus000085s6gnif27w7","tag_id":"cl63c8jjp00047ks666bv7sg1","_id":"cl64t2yv5000485s69x0kevse"},{"post_id":"cl64t2yus000085s6gnif27w7","tag_id":"cl63c8jjp00057ks66v5cg2t2","_id":"cl64t2yv5000585s6hybv9yuj"}],"Tag":[{"name":"css","_id":"cl5lql4d400038ds63r7xfezh"},{"name":"display","_id":"cl5lql4d900078ds63lte5ws9"},{"name":"visibility","_id":"cl5lql4db000a8ds62epn1har"},{"name":"opacity","_id":"cl5lql4de000d8ds64pc36p44"},{"name":"html","_id":"cl5lql4df000g8ds63v7x601f"},{"name":"code","_id":"cl5lql4di000m8ds62bh7gqci"},{"name":"checkmark","_id":"cl5lql4dk000r8ds61der4b4q"},{"name":"symbol","_id":"cl5lql4dm000u8ds6bqmic196"},{"name":"JavaScript","_id":"cl5lql4dm000v8ds6av83bmhw"},{"name":"JS","_id":"cl5lql4dn000y8ds6gmqrd3o0"},{"name":"markable","_id":"cl5lql4dn00118ds60sgffvbv"},{"name":"double","_id":"cl5lql4do00128ds6booidwfd"},{"name":"rtc","_id":"cl5lql4do00138ds6aarz5syv"},{"name":"eclipse","_id":"cl5lql4do00168ds61hm90r4h"},{"name":"java","_id":"cl5lql4dp00198ds6gbji663e"},{"name":"IllegalStateException","_id":"cl5lql4dp001a8ds653ioa19x"},{"name":"context","_id":"cl5lql4dr001h8ds67j2ba6r9"},{"name":"SyntheticEvent","_id":"cl5lql4ds001i8ds64wop70y1"},{"name":"react","_id":"cl5lql4ds001l8ds62a5v3m7q"},{"name":"javascript","_id":"cl5lql4ds001n8ds6hykhb2hd"},{"name":"review","_id":"cl5lql4dt001r8ds60w3v7apb"},{"name":"代码审核","_id":"cl5lql4du001t8ds684yq08y8"},{"name":"contenteditable","_id":"cl5lql4du001u8ds6et74gbra"},{"name":"div","_id":"cl5lql4du001x8ds6cvblg7yf"},{"name":"p","_id":"cl5lql4dv001z8ds62l6f3ll4"},{"name":"git","_id":"cl5lql4dv00208ds6b4os66yk"},{"name":"bash","_id":"cl5lql4dv00238ds6835b5bm2"},{"name":"win7","_id":"cl5lql4dw00258ds6g9t44fjj"},{"name":"hello","_id":"cl5lql4dw00268ds60ojs60qp"},{"name":"jekyll","_id":"cl5lql4dw00298ds623zfev3y"},{"name":"theme","_id":"cl5lql4dx002b8ds6anjz0u2x"},{"name":"shell","_id":"cl5lql4dx002c8ds66rvc58b2"},{"name":"github","_id":"cl5lql4dy002i8ds6gggwa3hs"},{"name":"permission","_id":"cl5lql4dz002j8ds66sbyhv3a"},{"name":"es6","_id":"cl5lql4dz002k8ds64gyhbos9"},{"name":"es2015","_id":"cl5lql4dz002n8ds68c5h3arm"},{"name":"class","_id":"cl5lql4e0002q8ds62qhu3kfe"},{"name":"function","_id":"cl5lql4e1002x8ds6ccal46xo"},{"name":"express","_id":"cl5lql4e2002y8ds60engef9s"},{"name":"js","_id":"cl5lql4e200318ds6hnek04a5"},{"name":"framework","_id":"cl5lql4e500338ds6e64980qa"},{"name":"branch","_id":"cl5lql4e600378ds61u4vdyoz"},{"name":"list","_id":"cl5lql4e600398ds6hpup1w57"},{"name":"delete","_id":"cl5lql4e7003a8ds661ee37n8"},{"name":"mac","_id":"cl5lql4e7003b8ds6ft3odbm9"},{"name":"tips","_id":"cl5lql4e7003e8ds66cxl0m4a"},{"name":"meta","_id":"cl5lql4e8003h8ds647f16cn7"},{"name":"X-UA-Compatible","_id":"cl5lql4e9003k8ds6d5i97eru"},{"name":"http-equiv","_id":"cl5lql4ea003l8ds6f5ey3wsm"},{"name":"object","_id":"cl5ls3q0y0001gjs6ggmo4x3y"},{"name":"equals","_id":"cl5ls3q0y0002gjs6c3l74dkr"},{"name":"position","_id":"cl5qkvh7p0001wrs6aj9b0bde"},{"name":"static","_id":"cl5qkvh7t0002wrs6g9wjfl65"},{"name":"relative","_id":"cl5qkvh7u0003wrs6fdp29jpb"},{"name":"absolute","_id":"cl5qkvh7u0004wrs6cpnca2h5"},{"name":"fixed","_id":"cl5qkvh7v0005wrs67riz2n56"},{"name":"sticky","_id":"cl5qkvh7v0006wrs654bac9rh"},{"name":"wx","_id":"cl63c8jjj00017ks66oys1e2i"},{"name":"app","_id":"cl63c8jjo00027ks6dej354nw"},{"name":"onreachbottom","_id":"cl63c8jjo00037ks6gfh15oxh"},{"name":"tab","_id":"cl63c8jjp00047ks666bv7sg1"},{"name":"loading","_id":"cl63c8jjp00057ks66v5cg2t2"}]}}